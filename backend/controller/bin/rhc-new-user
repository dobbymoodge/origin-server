#!/usr/bin/ruby

require 'rubygems'
require 'libra'
require 'mcollective'
require 'json'

include MCollective::RPC
include Libra

options = rpcoptions do |parser, options|
    parser.define_head "Create a new user"
    parser.banner = "Usage: rhc-new-user [options]"

    parser.on('-n', '--namespace NAMESPACE', "The unique namespace") do |namespace|
      options[:namespace] = namespace
    end

    parser.on('-e', '--email EMAIL', 'The user email') do |email|
      options[:email] = email
    end

    parser.on('-s', '--ssh SSH_KEY', 'The user public SSH key') do |ssh|
      options[:ssh] = ssh
    end

    parser.on('-a', '--alter', 'Alter / Update user info') do
      options[:alter] = true
    end
    
    parser.on('-p', '--password PASSWORD', 'The user password') do |password|
      options[:password] = password
    end
end

unless options.include?(:namespace) or options[:namespace] =~ /^[a-zA-Z0-9]+$/
    puts "The namespace is invalid."
    exit 254
end

unless options.include?(:email) or options[:email] =~ /^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$/
    puts "The email is invalid."
    exit 253
end

unless options.include?(:ssh) or options[:ssh] =~ (options[:ssh] == Base64.encode64(Base64.decode64(options[:ssh])).gsub(/\n/, ''))
    puts "The ssh key is invalid."
    exit 252
end

unless options.include?(:password)
    puts "The password is missing."
    exit 251
end

# Set the MCollective options
Libra.c[:rpc_opts] = options

# Check if user already exists
user = User.find(options[:namespace])
if user
  if options[:alter]
    user.email=options[:email]
    user.ssh=options[:ssh]
    user.update
    Server.execute_many('li-controller-0.1', 'configure',
        "-c #{user.uuid} -e #{user.email} -s #{user.ssh}",
        "customer_#{user.username}", user.username)
  else
    puts "Namespace already exists!  To overwrite or change, use --alter"
    exit 254
  end
else
  if User.valid_registration?(options[:email], options[:password])
    user = User.create(options[:namespace], options[:ssh], options[:email])
  else
    puts "User registration invalid"
    exit 250
  end
end

json_return = JSON.generate({
                        :namespace => user.username,
                        :uuid => user.uuid
                        })

puts json_return