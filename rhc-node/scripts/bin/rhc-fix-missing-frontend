#!/usr/bin/env oo-ruby

#
# Fix gears with broken front-end configurations by re-asserting them.
#

require 'rubygems'
require 'openshift-origin-node'


$errors = []
def with_track_errors
  begin
    yield
  rescue Exception => e
    $errors << e
  end
end

errors = []
uuids = ARGV.map { |n| n }

if uuids.empty?
  $stdout.puts "Usage: #{$0} uuid uuid uuid ..."
  exit(0)
end

$stdout.puts("Rebuilding the frontend for:")
$stdout.puts("\t#{uuids.join("\n\t")}")

$stdout.puts("Hit 'y' to continue, anything else to abort.")
resp = $stdin.gets
if not resp.nil?
  resp.strip!
  if resp != 'y'
    $stdout.puts("Aborting")
    exit(0)
  end
end


uuids.each do |uuid|
  with_track_errors do
    $stdout.puts("Fixing gear: #{uuid} ...")

    gear = OpenShift::Runtime::ApplicationContainer.from_uuid(uuid)

    frontend = OpenShift::Runtime::FrontendHttpServer.new(gear)
    frontend.create

    gear.cartridge_model.each_cartridge do |cart|
      if gear.cartridge_model.respond_to?(:connect_frontend)
        gear.cartridge_model.connect_frontend(cart)
      elsif gear.cartridge_model.respond_to?(:deploy_httpd_proxy)
        gear.cartridge_model.deploy_httpd_proxy(cart.name)
      else
        raise NoMethodError, "No method to recreate the frontend for gears of type: #{gear.cartridge_model.class.name}."
      end
    end

  end
end

$stdout.puts("Done")

if not $errors.empty?
  $stderr.puts("Errors during run:")
  $errors.each do |e|
    $stderr.puts("------------------------------")
    $stderr.puts("#{e}")
    $stderr.puts("\t#{e.backtrace.join("\n\t")}")
  end
  exit(1)
end

exit(0)
