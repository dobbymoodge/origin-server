#!/bin/sh

#
# usage: list_guest_accounts [options]
#
# options:
#   -h: help           # describe the command, usage and options
#   -v: verbose        # produce more human readable output
#   -d: debug          # produce output useful to developers and debuggers
#   -n: dryrun         # take no actions which make any changes
#   -f <text|json|xml> # output format: value forms are text, JSON and XML

function usage() {
    echo "Synopsis: list libra node guest user accounts

usage: $0 [options]

options:
   -h: help           # describe the command, usage and options
   -v: verbose        # produce more human readable output
   -d: debug          # produce output useful to developers and debuggers
   -n: dryrun         # take no actions which make any changes

   -f [text|json|xml] # request output format.  Valid formats are
                      # text [default] - Human readable
                      # json           - Output as Javascript object set
                      # xml            - Output as valid XML fragment
"
}

# Space delimited list
VALID_FORMATS="TEXT JSON XML"

# Regular expression to match exactly any element in the list
VALID_FORMAT_PATTERN='^('$(echo $VALID_FORMATS | tr ' ' '|')')$'

function valid_format() {
    # FORMAT_STRING=$1
    echo $1 | grep -i -E $VALID_FORMAT_PATTERN > /dev/null 2>&1
}

function debug() { 
    # MESSAGE=$1
    test $DEBUG && echo "DEBUG: $1"
}

function verbose() {
    # MESSAGE=$1
    test $VERBOSE && echo "$1"
}

#
# Parse options
#
while getopts "hvdnf:" opt
do
    case $opt in 
	h)
	    usage
	    exit 0
	    ;;

	v)
	    VERBOSE=true
	    ;;
	
	d)
	    DEBUG=true
	    ;;

	n) # dry run
            # in this script there are no side effects, so -n makes no change
	    NOOP=true
	    ;;

	f)
	    OUTPUT_FORMAT=$(echo $OPTARG | tr [:lower:] [:upper:])
	    if ! valid_format $OUTPUT_FORMAT
            then
		echo "Invalid format: $OUTPUT_FORMAT" >&2
		usage
		exit 1
            fi
	    ;;
    esac
done

# set defaults if not provided
DEBUG=${DEBUG:=false}
VERBOSE=${VERBOSE:=false}
NOOP=${NOOP:=false}
OUTPUT_FORMAT=${OUTPUT_FORMAT:="TEXT"}
PASSWD_FILE=${PASSWD_FILE:="/etc/passwd"}
LIBRA_ACCOUNT_PATTERN=${LIBRA_ACCOUNT_PATTERN:=":libra guest:"}


TEXT_HEADER_FORMAT="--- Account List Header ---"
TEXT_ACCOUNT_FORMAT="%s"
TEXT_ACCOUNT_SEPERATOR=""
TEXT_FOOTER_FORMAT="--- Account List Footer ---"


JSON_HEADER_FORMAT='{"accounts": ['
JSON_ACCOUNT_FORMAT='  {"username": "%s"}'
JSON_ACCOUNT_SEPERATOR=","
JSON_FOOTER_FORMAT="]}"


XML_HEADER_FORMAT="<accounts>"
XML_ACCOUNT_FORMAT='  <account username="%s" />'
XML_ACCOUNT_SEPERATOR=""
XML_FOOTER_FORMAT="</accounts>"

eval "HEADER_FORMAT=\"\$${OUTPUT_FORMAT}_HEADER_FORMAT\""
eval "ACCOUNT_FORMAT=\"\$${OUTPUT_FORMAT}_ACCOUNT_FORMAT\""
eval "ACCOUNT_SEPERATOR=\"\$${OUTPUT_FORMAT}_ACCOUNT_SEPERATOR\""
eval "FOOTER_FORMAT=\"\$${OUTPUT_FORMAT}_FOOTER_FORMAT\""


function print_account_line() {
    # USERNAME=$1

    case $OUTPUT_FORMAT in
	text)
	    print_account_line_text
	    ;;

	json)
	    ;;
	
	xml)
	    ;;
    esac
}


#
# Sample text output:
# -----------------------
# --- LIBRA USER LIST ---
# -----------------------
# USERNAME
# <username>
# ...
#

# Sample JSON output:
#
# {'accounts': [
#   {"username": "<username0>"},
#   {"username": "<username1>"},
#   {"username": "<username2>"},
#   ...
# ]
# }


# Sample XML output
# <accounts>
#   <user name="username0"/>
#   <user name="username1"/>
#   <user name="username2"/>
#   ...
# </accounts>

function get_account_list() {
    # match the right pattern in the requested file and take the first element
    grep "$LIBRA_ACCOUNT_PATTERN" "$PASSWD_FILE" | cut -d: -f1
}

function print_header() {
    printf -- "$HEADER_FORMAT\n"
}

function print_account_list() {
    ACCOUNT_LIST=`get_account_list`
    NUM_ACCOUNTS=`echo $ACCOUNT_LIST | wc -w`
    I=0
    for USERNAME in $ACCOUNT_LIST
    do
	printf "$ACCOUNT_FORMAT" "$USERNAME"
	I=$(expr $I + 1)
	if [ $I -lt $NUM_ACCOUNTS ]
	then
	    echo -n "${ACCOUNT_SEPERATOR}"
	fi
	echo
    done
}

function print_footer() {
    printf -- "$FOOTER_FORMAT\n"
}

print_header
print_account_list
print_footer
