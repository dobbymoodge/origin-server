#!/bin/sh

#
# usage: list_guest_applications [options] [username...]
#
# options:
#   -h: help           # describe the command, usage and options
#   -v: verbose        # produce more human readable output
#   -d: debug          # produce output useful to developers and debuggers
#   -n: dryrun         # take no actions which make any changes
#   -f <text|json|xml> # output format: value forms are text, JSON and XML

function usage() {
    echo "Synopsis: list libra node guest user applications

usage: $0 [options] [username...]

username:
   zero or more valid local unix usernames

options:
   -h: help           # describe the command, usage and options
   -v: verbose        # produce more human readable output
   -d: debug          # produce output useful to developers and debuggers
   -n: dryrun         # take no actions which make any changes

   -f [text|json|xml] # request output format.  Valid formats are
                      # text [default] - Human readable
                      # json           - Output as Javascript object set
                      # xml            - Output as valid XML fragment

"
}

# Space delimited list
VALID_FORMATS="TEXT JSON XML"

# Regular expression to match exactly any element in the list
VALID_FORMAT_PATTERN='^('$(echo $VALID_FORMATS | tr ' ' '|')')$'

function valid_format() {
    # FORMAT_STRING=$1
    echo $1 | grep -i -E $VALID_FORMAT_PATTERN > /dev/null 2>&1
}

function debug() { 
    # MESSAGE=$1
    test $DEBUG && echo "DEBUG: $1"
}

function verbose() {
    # MESSAGE=$1
    test $VERBOSE && echo "$1"
}

#
# Parse options
#
while getopts "hvdnf:" opt
do
    case $opt in 
	h)
	    usage
	    exit 0
	    ;;

	v)
	    VERBOSE=true
	    shift
	    ;;
	
	d)
	    DEBUG=true
	    shift
	    ;;

	n) # dry run
            # in this script there are no side effects, so -n makes no change
	    NOOP=true
	    shift
	    ;;

	f)
	    OUTPUT_FORMAT=$(echo $OPTARG | tr [:lower:] [:upper:])
	    if ! valid_format $OUTPUT_FORMAT
            then
		echo "Invalid format: $OUTPUT_FORMAT" >&2
		usage
		exit 1
            fi
	    shift 2
	    ;;
    esac
done

# set defaults if not provided
DEBUG=${DEBUG:=false}
VERBOSE=${VERBOSE:=false}
NOOP=${NOOP:=false}
OUTPUT_FORMAT=${OUTPUT_FORMAT:="TEXT"}
PASSWD_FILE=${PASSWD_FILE:="/etc/passwd"}
LIBRA_ACCOUNT_PATTERN=${LIBRA_ACCOUNT_PATTERN:=":libra guest:"}


TEXT_HEADER_FORMAT="--- Application List Header ---"
TEXT_ACCOUNT_HEADER='username: %s'
TEXT_ACCOUNT_FOOTER=''
TEXT_ACCOUNT_SEPERATOR=''
TEXT_APPLIST_HEADER='  applications:'
TEXT_APPLICATION_FORMAT='    name: %s, type: %s'
TEXT_APPLIST_FOOTER='\n'
TEXT_APPLIST_SEPERATOR=''
TEXT_FOOTER_FORMAT="--- Application List Footer ---"


JSON_HEADER_FORMAT='{"accounts": ['
JSON_ACCOUNT_HEADER='  {"username": "%s"'
JSON_ACCOUNT_FOOTER='  }'
JSON_ACCOUNT_SEPERATOR=','
JSON_APPLIST_HEADER='    {"applications": ['
JSON_APPLICATION_FORMAT='       {"name": "%s", "type": "%s"}'
JSON_APPLIST_FOOTER='    }'
JSON_APPLIST_SEPERATOR=','
JSON_FOOTER_FORMAT=']}'


XML_HEADER_FORMAT="<accounts>"
XML_ACCOUNT_HEADER='  <user "username"="%s" >'
XML_ACCOUNT_FOOTER='  </user>'
XML_ACCOUNT_SEPERATOR=''
XML_APPLIST_HEADER='    <applications>'
XML_APPLICATION_FORMAT='       <application name="%s" type="%s" />'
XML_APPLIST_FOOTER='    </applications>'
XML_APPLIST_SEPERATOR=''
XML_FOOTER_FORMAT="</accounts>"

FORMAT_STRINGS="
HEADER_FORMAT 
ACCOUNT_HEADER ACCOUNT_FOOTER ACCOUNT_SEPERATOR
APPLIST_HEADER APPLIST_FOOTER APPLIST_SEPERATOR
APPLICATION_FORMAT
FOOTER_FORMAT
"

for FORMAT_NAME in $FORMAT_STRINGS
do
    eval "${FORMAT_NAME}=\"\$"`echo ${OUTPUT_FORMAT}_${FORMAT_NAME}`"\""
done

#eval "HEADER_FORMAT=\"\$${OUTPUT_FORMAT}_HEADER_FORMAT\""
#eval "ACCOUNT_FORMAT=\"\$${OUTPUT_FORMAT}_ACCOUNT_FORMAT\""
#eval "ACCOUNT_SEPERATOR=\"\$${OUTPUT_FORMAT}_ACCOUNT_SEPERATOR\""
#eval "FOOTER_FORMAT=\"\$${OUTPUT_FORMAT}_FOOTER_FORMAT\""


#
# Given a username, make sure it has a valid entry in /etc/passwd and
# is marked as a libra guest.
#
# Check for exactly one match?
function username_is_valid() {
    # USERNAME=$1
    grep -E "^$1:" ${PASSWD_FILE} | grep ":libra guest:" >/dev/null 2>&1
}

function print_account_line() {
    # USERNAME=$1

    case $OUTPUT_FORMAT in
	text)
	    print_account_line_text
	    ;;

	json)
	    ;;
	
	xml)
	    ;;
    esac
}


#
# Sample text output:
# -----------------------
# --- LIBRA USER LIST ---
# -----------------------
# USERNAME
# <username>
# ...
#

# Sample JSON output:
#
# {'accounts': [
#   {"username": "<username0>"},
#   {"username": "<username1>"},
#   {"username": "<username2>"},
#   ...
# ]
# }


# Sample XML output
# <accounts>
#   <user name="username0"/>
#   <user name="username1"/>
#   <user name="username2"/>
#   ...
# </accounts>

function get_account_list() {
    # match the right pattern in the requested file and take the first element
    grep "$LIBRA_ACCOUNT_PATTERN" "$PASSWD_FILE" | cut -d: -f1
}

function print_header() {
    printf -- "$HEADER_FORMAT\n"
}

function print_account_header() {
    printf "  $ACCOUNT_HEADER" $1
}

function print_account_footer() {
    
    printf "  $ACCOUNT_FOOTER"
}

function print_application_header() {
    printf "    application header\n"
}

function print_application_footer() {
    printf "    application footer\n"
}

function homedir() {
    # USERNAME=$1
    grep -E ^$1: ${PASSWD_FILE} | cut -d: -f 6
}

function get_application_list() {
    # USERNAME=$1
    
    ls -d `homedir $1`/git/*.git | sed -e 's:^.*/:: ; s/.git$//'
}

function print_application_list() {
    #ACCOUNT_LIST=$1
    NUM_ACCOUNTS=`echo $1 | wc -w`
    I=0
    for USERNAME in $1
    do
	APP_LIST=`get_application_list $USERNAME`

	# if there's at least one

	# print app list header

	# for each app

	#    print app status

	# print app list footer
	printf "$ACCOUNT_FORMAT" "$USERNAME"
	I=$(expr $I + 1)
	if [ $I -lt $NUM_ACCOUNTS ]
	then
	    echo -n "${ACCOUNT_SEPERATOR}"
	fi
	echo
    done
}

function print_footer() {
    printf -- "$FOOTER_FORMAT\n"
}


if [ $# -gt 0 ]
then
    ACCOUNT_LIST="$*"
else
    ACCOUNT_LIST=`get_account_list`
fi

echo there are $# args left
echo remaining args are $*
print_header
for USERNAME in $ACCOUNT_LIST
do
    if username_is_valid $USERNAME
    then
	print_account_header $USERNAME
	print_application_list $USERNAME
	print_account_footer
    fi
done
print_footer
