#!/usr/bin/env ruby
# Copyright © 2010 Jim Jagielski All rights reserved
# Copyright © 2010 Mike McGrath All rights reserved
# Copyright © 2010 Red Hat, Inc. All rights reserved

# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.

require 'rhc-common'

#
# Check if host exists
#
def hostexist?(host)
    dns = Resolv::DNS.new
    resp = dns.getresources(host, Resolv::DNS::Resource::IN::A)
    return resp.any?
end

def p_usage
    rhlogin = @local_config.get_value('default_rhlogin') ? "Default: #{@local_config.get_value('default_rhlogin')}" : "(required)"
    puts <<USAGE

Usage: #{$0}
Control a libra app

  -a|--app   application   Application name  (alphanumeric) (required)
  -l|--rhlogin rhlogin     Red Hat login  (alphanumeric) (#{rhlogin})
  -p|--password password   RHLogin password  (alphanumeric) (optional, will prompt)
  -c|--command command     (start|stop|restart|reload|status|destroy)
  -b|--bypass              Bypass warnings
  -d|--debug               Print Debug info
  -h|--help                Show Usage info

USAGE
exit 255
end

opts = GetoptLong.new(
    ["--debug",     "-d", GetoptLong::NO_ARGUMENT],
    ["--help",      "-h", GetoptLong::NO_ARGUMENT],
    ["--bypass",    "-b", GetoptLong::NO_ARGUMENT],
    ["--rhlogin",   "-l", GetoptLong::OPTIONAL_ARGUMENT],
    ["--password",   "-p", GetoptLong::OPTIONAL_ARGUMENT],
    ["--app",       "-a", GetoptLong::REQUIRED_ARGUMENT],
    ["--command",   "-c", GetoptLong::REQUIRED_ARGUMENT]
)


# Pull in configs from files
libra_domain = get_var('libra_domain')
libra_server = get_var('libra_server')
debug = get_var('debug') == 'false' ? nil : get_var('debug')
ssh_config = "#{ENV['HOME']}/.ssh/config"
ssh_config_d = "#{ENV['HOME']}/.ssh/"

opt = {}
opts.each do |o, a|
    opt[o[2..-1]] = a.to_s
end

if opt["help"]
    p_usage
end

if opt["debug"]
    debug = true
end

opt["rhlogin"] = @local_config.get_value('default_rhlogin') unless opt["rhlogin"]

if !RHC::check_rhlogin(opt['rhlogin'])
    p_usage
end

if !RHC::check_app(opt['app'])
    p_usage
end

unless defined? opt["command"] and opt["command"] =~ /(start|stop|restart|reload|status|destroy)/
    puts "Command is required"
    p_usage
end

if !opt['rhlogin'] || !opt['app'] || !opt['command']
    p_usage
end

password = opt['password']
if !password
  password = RHC::get_password
end

user_info = RHC::get_user_info(libra_server, opt['rhlogin'], password, @http, debug, false)
app = user_info['app_info'][opt['app']]
if app
  framework = app['framework']
else
  puts "Application not found: #{opt['app']}"
  exit 101
end
#
# Send Warning
#

opt["command"] = "deconfigure" if opt["command"] == "destroy"

if !opt["bypass"] and opt["command"] == "deconfigure"
    # deconfigure is the actual hook called on 'destroy'
    # destroy is used for clarity


    puts <<WARNING
!!!! WARNING !!!! WARNING !!!! WARNING !!!!
You are about to destroy the #{opt['app']} application.

This is NOT reversable, all remote data for this application will be removed.
WARNING

    print "Do you want to destroy this application (y/n): "
    agree = gets.chomp
    if agree != 'y'
        puts "Destroy aborted"
        exit 217
    end
end
puts ""
puts "Remember: this is pre-alpha destructionware.  Let #libra know of any bugs you find."
puts ""

data = {:cartridge => framework,
                :action => opt['command'],
                :app_name => "#{opt['app']}",
                :rhlogin => "#{opt['rhlogin']}",
                :password => password
                }
if debug
  data['debug'] = "true"
end

json_data = JSON.generate(data)

puts "Contacting https://#{libra_server}"

url = URI.parse("https://#{libra_server}/app/broker/cartridge")
response = RHC::http_post(@http, url, json_data)

if response.code == '200'
    RHC::print_response_success(response, debug)
    puts "Action successful"
else
    RHC::print_response_err(response, debug)
end
