#!/usr/bin/env ruby
# Copyright © 2010 Jim Jagielski All rights reserved
# Copyright © 2010 Mike McGrath All rights reserved
# Copyright © 2010 Red Hat, Inc. All rights reserved

# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.

require "rubygems"
require "uri"
require "net/http"
require "net/https"
require "getoptlong"
require 'resolv'
require 'json'
require 'parseconfig'
require 'fileutils'
require File.dirname($0) + '/rhc-common'

#
# Check if host exists
#
def hostexist?(host)
    dns = Resolv::DNS.new
    resp = dns.getresources(host, Resolv::DNS::Resource::IN::A)
    return resp.any?
end

def p_usage
    rhlogin = @local_config.get_value('default_rhlogin') ? "Default: #{@local_config.get_value('default_rhlogin')}" : "(required)"
    type_keys = RHC::get_type_keys(', ')
    puts <<USAGE

Usage: #{$0}
Create a new app libra project.

  -a|--app   application     Application name  (alphanumeric) (required)
  -t|--type  type            Type of app to create (#{type_keys}) (required)
  -l|--rhlogin  rhlogin      RHCloud rhlogin  (alphanumeric) (#{rhlogin})
  -p|--password  password    RHLogin password  (alphanumeric) (optional, will prompt)
  -r|--repo  path            Git Repo path (defaults to ./$app_name)
  -n|--nogit                 Only create remote space, don't pull it locally
  -d|--debug                 Print Debug info
  -h|--help                  Show Usage info

USAGE
exit 255
end

opts = GetoptLong.new(
    ["--debug", "-d", GetoptLong::NO_ARGUMENT],
    ["--help",  "-h", GetoptLong::NO_ARGUMENT],
    ["--nogit", "-n", GetoptLong::NO_ARGUMENT],
    ["--rhlogin",  "-l", GetoptLong::OPTIONAL_ARGUMENT],
    ["--password",  "-p", GetoptLong::OPTIONAL_ARGUMENT],
    ["--app",   "-a", GetoptLong::REQUIRED_ARGUMENT],
    ["--repo",  "-r", GetoptLong::OPTIONAL_ARGUMENT],
    ["--type",  "-t", GetoptLong::REQUIRED_ARGUMENT]
)

# Pull in configs from files
libra_domain = get_var('libra_domain')
libra_dir = get_var('libra_dir')
li_server = get_var('li_server')
debug = get_var('debug') == 'false' ? nil : get_var('debug')

ssh_config = "#{ENV['HOME']}/.ssh/config"
ssh_config_d = "#{ENV['HOME']}/.ssh/"

opt = {}
opts.each do |o, a|
    opt[o[2..-1]] = a.to_s
end

if opt["help"]
    p_usage
end

if opt["debug"]
    debug = true
end

opt["rhlogin"] = @local_config.get_value('default_rhlogin') unless opt["rhlogin"]

if !RHC::check_rhlogin(opt['rhlogin'])
    p_usage
end

if !RHC::check_app(opt['app'])
    p_usage
end

type = RHC::get_type(opt['type'])
if !type
    p_usage
end

if !opt["rhlogin"] || !opt["app"] || !opt["type"]
    p_usage
end

password = opt['password']
if !password
  password = RHC::get_password
end

#
# Get UUID from file
#

uuid = @local_config.get_value(opt["rhlogin"])
unless uuid
    puts "Could not find UUID for #{opt["rhlogin"]}"
    exit 149
end

opt["repo"] = opt["app"] unless opt["repo"]

puts ""
puts "Please support the beta - let #libra know of any bugs you find"
puts ""

#
# Confirm local git repo exists
#

if File.exists?(opt['repo'])
    puts "We will not overwrite an existing git repo. Please remove:"
    puts "  #{File.expand_path(opt['repo'])}"
    puts "Then try again."
    puts
    exit 255
else
    begin
        # Create the parent directory for the git repo
        @git_parent = File.expand_path(opt['repo'] + "/../")
        FileUtils.mkdir_p(@git_parent)
    rescue Errno::EACCES
        puts "Could not write to #{@git_parent}"
        puts "Reason: " + $!
        puts
        puts "Please re-run from a directory you have write access to or specify -r with a"
        puts "path you have write access to"
        puts
        exit 206
    end
end

#
# Confirm libra_id_rsa exists
#
unless File.exists?("#{ssh_config_d}/libra_id_rsa")
    puts
    puts "Could not find #{ssh_config_d}/libra_id_rsa, cannot continue"
    puts "This file was created by rhc-create-domain.  If it does not exist you may need to create"
    puts "a new one."
    puts
    exit 235
end

#
# Create remote application space
#

puts "Creating remote application space: " + opt['app']

json_data = JSON.generate(
               {:cartridge => opt['type'],
                :action => 'configure',
                :app_name => opt['app'],
                :rhlogin => opt['rhlogin'],
                :password => password
                })

puts "Contacting server https://#{li_server}"

url = URI.parse("https://#{li_server}/php/cartridge_do.php")
response = RHC::http_post(@http, url, json_data)

json_resp = JSON.parse(response.body);
if response.code == '200'
    if debug
        puts "HTTP response from server is:"
        json_resp.each do |k,v|
            puts "#{k.to_s}: #{v.to_s}"
        end
    end
    puts "Creation successful"
else
    puts "Problem with server. Response code was #{response.code}"
    puts "HTTP response from server is #{response.body}"
    json_resp.each do |k,v|
        puts "#{k.to_s}: #{v.to_s}"
    end
    exit 254
end

#
# At this point, we need to register a handler to guarantee app
# cleanup on any exceptions or calls to exit
#
at_exit do
    unless $!.nil? || $!.is_a?(SystemExit) && $!.success?
        json_data = JSON.generate(
                   {:cartridge => opt['type'],
                    :action => 'deconfigure',
                    :app_name => opt['app'],
                    :rhlogin => opt['rhlogin'],
                    :password => password
                    })
        puts "Cleaning up application"
        url = URI.parse("https://#{li_server}/php/cartridge_do.php")
        RHC::http_post(@http, url, json_data)
    end
end

#
# Check / add new host to ~/.ssh/config
#

puts "Checking ~/.ssh/config"

user_info = RHC::get_user_info(li_server, opt['rhlogin'], password, @http, debug)

my_url = "#{opt['app']}-#{user_info['user_info']['namespace']}.#{libra_domain}"

found = false

begin
    File.open(ssh_config, "r") do |sline|
        while(line = sline.gets)
            if line.to_s.start_with? "Host *.#{libra_domain}"
                found = true
                break
            end
        end
    end
rescue Errno::EACCES
    puts "Could not read from #{ssh_config}"
    puts "Reason: " + $!
    puts
    puts "Please correct this first.  Then run rerun."
    puts
    exit 240
rescue Errno::ENOENT
    puts "Could not find #{ssh_config}.  This is ok, continuing"
end
if found
    puts "Found #{libra_domain} in ~/.ssh/config... No need to adjust"
else
    puts "    Adding #{libra_domain} to ~/.ssh/config"
    begin
        f = File.open(ssh_config, "a")
        f.puts <<SSH

# Added by libra app on #{`date`}
Host *.#{libra_domain}
    IdentityFile ~/.ssh/libra_id_rsa
    VerifyHostKeyDNS yes
    StrictHostKeyChecking no
    PasswordAuthentication no
    UserKnownHostsFile ~/.ssh/libra_known_hosts

SSH
        f.close
     rescue Errno::EACCES
        puts "Could not write to #{ssh_config}"
        puts "Reason: " + $!
        puts
        puts "Please correct this first.  Then run rerun."
        puts
        exit 240
    rescue Errno::ENOENT
        # Make directory and config if they do not exist
        puts "Could not find directory: " + $!
        puts "creating"
        FileUtils.mkdir_p ssh_config_d
        file = File.open(ssh_config, 'w')
        file.close
        retry
    end
end

File.chmod(0700, ssh_config_d)
File.chmod(0600, ssh_config)

#
# Confirm that the host exists in DNS
#
puts "Confirming that host exists..."
loop = 0
sleep_time = 2.5
while loop < 5 && !hostexist?(my_url)
    sleep sleep_time *= 2
    loop+=1
    puts "  retry # #{loop} - #{my_url}"
end

if loop == 5
    puts "Host could not be created and/or found..."
    exit 255
end

sleep_time = 2
attempt = 0

#
# Pull new repo locally
#
#  Full path
# git_url = "ssh://#{uuid}@#{opt['app']}.#{user_info['user_info']['namespace']}.#{libra_domain}/#{libra_dir}/#{uuid}/git/#{opt['app']}.git/"

# Shorter path (easier to read)
git_url = "ssh://#{uuid}@#{opt['app']}-#{user_info['user_info']['namespace']}.#{libra_domain}/~/git/#{opt['app']}.git/"

unless opt['nogit']
    puts "Pulling new repo down"

    puts "git clone #{git_url} #{opt['repo']}" if debug
    git_pull = `git clone #{git_url} #{opt['repo']}`
    if $?.exitstatus != 0
        puts "Error in git pull"
        puts git_pull
        exit 255
    end
else
    puts <<IMPORTANT

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
IMPORTANT: Since the -n flag was specified, no local repo has been created.
This means you can't make changes to your published application until after
you clone the repo yourself.  See the git url below for more information.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

IMPORTANT
end

#
# At this point, we need to register a handler to guarantee git
# repo cleanup on any exceptions or calls to exit
#
at_exit do
    unless $!.nil? || $!.is_a?(SystemExit) && $!.success?
        puts "Cleaning up git repo"
        FileUtils.rm_rf opt['repo']
    end
end

#
# Test several times, doubling sleep time between attempts.
#

puts "Confirming application #{opt['app']} is available"
while sleep_time < 65
    attempt+=1
    puts "  Attempt # #{attempt}"
    page = ''
    if (type == :php)
      page = 'health_check.php'
    elsif (type == :rack)
      page = 'health'
    elsif (type == :wsgi)
      page = 'health'
    end
    url = URI.parse("http://#{my_url}/#{page}")
    response = @http.get_response(url)
    if response.code == "200" && response.body[0,1] == "1"
        puts <<LOOKSGOOD

Success!  Your application is now published here:

      http://#{my_url}/

The remote repository is located here:

    #{git_url}

To make changes to your application, commit to #{opt['repo']}/.
Then run 'git push' to update your libra space

LOOKSGOOD
        exit 0
    end
    puts "Server responded with #{response.code}"
    puts response.body
    puts
    puts "    sleeping #{sleep_time} seconds"
    sleep sleep_time
    sleep_time *= 2
end
puts "Unable to find or access the site... problems"
exit 255
