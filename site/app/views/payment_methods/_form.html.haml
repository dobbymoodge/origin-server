:css
  /* credit card */
  .card-types-passive {
    list-style: none;
    margin-left: 230px;
  }
  .card-types-passive li {
    display: inline;
    float: left;
    text-indent: -5000em;
  }
  .card-types-passive .cc-card {
    background: #fff url("#{image_path("credit-cards.png")}") 0 0 no-repeat;
    height: 25px;
    width: 52px;
  }
  .card-types-passive li.Visa {
    background-position: 0 0;
  }
  .card-types-passive li.Mastercard {
    background-position: -55px 0;
  }
  .card-types-passive li.AMEX {
    background-position: -110px 0;
  }
  .card-types-passive.selected .cc-card.selected {
    opacity: 1;
    background-color: transparent;
    z-index: 10;
  }
  .card-types-passive.selected .cc-card {	
    -moz-transition: opacity 400ms ease 0s;
    background-color: transparent;
    opacity: 0.33;
  }
  
  .form-validation .validation01 {
    top: 35px;
  }
  
  .payment_method {
    margin: 18px 0;
    -webkit-margin-top-collapse: separate; /* needed since used after legend which collapses margins */
  }

= semantic_form_for payment_method, :url => aria_direct_post_url, :html => {:class => 'form-horizontal', :id => 'payment_method'} do |f|

  = f.hidden_field :form_of_payment, :name => :formOfPayment
  = f.hidden_field :session_id, :name => :inSessionID
  = f.hidden_field :mode, :name => :mode
  = f.hidden_field :client_no, :name => :client_no

  = f.inputs 'Payment Method' do
    - if defined? previous_payment_method and not previous_payment_method.nil?
      .control-group
        .controls
          .payment_method
            Card on file: #### #### #### #{previous_payment_method.cc_no}, expires #{previous_payment_method.cc_exp_mm} / #{previous_payment_method.cc_exp_yyyy}
    -# This hand-rendered form control needs to be converted into a formtastic input type.
    = f.inputs :inline => true, :required => true, :label => 'Credit Card Number' do
      .clearfix
        = f.input :cc_no, :input_html => { :name => 'cc_no', :type => 'text', :class => 'pull-left input-large', :value => (@payment_method.cc_no || '') }
        = f.inline_errors_for :cc_no
        %ul{ :class => 'card-types-passive selected' }
          %li{ :class => 'Visa cc-card' }
            %span VISA
          %li{ :class => 'Mastercard cc-card' }
            %span Mastercard
          %li{ :class => 'AMEX cc-card' }
            %span American Express
    = f.inputs :inline => true, :required => true, :label => 'Expiration Date' do
      = f.input :cc_exp_mm, :as => :select, :include_blank => false, :default => (@payment_method.cc_exp_mm || Date.today.month), :collection => (1..12).to_a.map{|num| [(num < 10 ? "0#{num}" : num.to_s),num]}, :input_html => { :name => 'cc_exp_mm', :class => 'input-small' }
      - year_options = (Date.today.year..(Date.today.year + 10)).to_a
      = f.input :cc_exp_yyyy, :as => :select, :include_blank => false, :default => (@payment_method.cc_exp_yyyy || Date.today.year), :collection => year_options, :input_html => { :name => 'cc_exp_yyyy', :class => 'input-medium' }
      = f.inline_errors_for :cc_exp_mm
      = f.inline_errors_for :cc_exp_yyyy    
    = f.input :cvv, :label => 'Security Code', :input_html => { :class => 'input-mini', :name => :cvv }

  = f.buttons do
    = link_to *previous_link
    = f.commit_button "Save Payment"
    = f.loading

  -#TODO: needs error handling display on page
  -#%iframe#payment_frame.hidden{:name => :payment_frame, :data => {'frame-url' => aria_direct_post_url(:params => 'serve_direct')}, :src => javascript_path('blank.html')}

- content_for :javascripts do
  :javascript
    $(document).ready(function() {
      var frame = $('#payment_frame');
      if (frame.length == 0) return;
      $('#payment_method')
        .attr('target', 'payment_frame')
        .attr('action', frame.attr('data-frame-url'))
        .submit(function() {
          var callback = false;
          var form = this;
          window['payment_method_complete'] = function(errors, next) {
            if (form.finished) form.finished();
            callback = true;
            if (errors && errors.length > 0)
              alert("Your payment cannot be processed because of errors.");
            else {
              window.location.href = next;
            }
          };
          frame.load(function() {
            setTimeout(function() {
              if(callback) return;
              alert('An error has occurred and your payment cannot be processed at this time.  Please try again later.')
            }, 2000);
          });
        })
    });
