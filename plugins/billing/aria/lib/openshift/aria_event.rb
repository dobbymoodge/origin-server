module OpenShift
  class AriaEvent

    EVENTS = {
      "101" => "Account created",
      "102" => "Account administrative contact modified",
      "105" => "Account Status Changed",
      "107" => "Account master service plan modified",
      "110" => "Account supplemental service plan assigned",
      "112" => "Account supplemental service plan de-assigned",
      "114" => "Account supplemental service plan modified",
      "118" => "Account supplemental field value added event",
      "119" => "Account supplemental field value modified"
    }
    LABEL = "- [NEW]"
    STATUS_CODES = {
      "0"  => "InActive",
      "1"  => "Active",
      "-1" => "Suspended",
      "-2" => "Cancelled", 
      "-3" => "Terminated"
    }
    PLAN_STATE_UPDATE_RETRIES = 3
    PLAN_STATE_UPDATE_RETRY_TIME = 3

    def self.get_header
      data = <<MSG
Account Provisioning Update
-----------------------------------
This provisioning message was generated by the Aria systems via OpenShift
-----------------------------------
MSG
    end

    def self.get_events(h)
      event_info = ""
      for i in 0..h['event_id'].length-1 do
        event_info += "#{h['event_id'][i]}: #{h['event_label'][i]}\n"
      end
      data = <<MSG
Events
-----------------------------------
#{event_info}
MSG
    end
    
    def self.get_account_data(h, label=false)
      rhlogin = ""
      begin
        for i in 0..h['supp_field_name'].length-1 do
          if h['supp_field_name'][i] == 'RHLogin'
            rhlogin = h['supp_field_value'][i]
            break
          end
        end
      rescue
        #Ignore
      end
      label_str = label ? OpenShift::AriaEvent::LABEL : ""
      data = <<MSG
Account Data #{label_str}
-----------------------------------
Client Number: #{h['client_no']}
Aria PO#: #{h['transaction_id']}
RHLogin: #{rhlogin}
MSG
    end

    def self.get_detail_account_data(h)
      # Convert status codes to status msgs
      status_msg = OpenShift::AriaEvent::STATUS_CODES[h['status_cd']]
      h['status_cd'] += " (#{status_msg})" if status_msg
      data = <<MSG
Sku: #{h['plan_name']}
Qty: #{h['plan_units']}
Status Code: #{h['status_cd']} 
Promo Code: #{h['promo_code']}
MSG
    end

    def self.get_account_contact(h, label=false)
      label_str = label ? OpenShift::AriaEvent::LABEL : ""
      data = <<MSG
End User Contact #{label_str}
-----------------------------------
First Name: #{h['first_name']}
Last Name: #{h['last_name']}
Company Name: #{h['company_name']}
Address1: #{h['address1']}
Address2: #{h['address2']}
City: #{h['city']}
State/Province: #{h['state_prov']}
Postal Code: #{h['postal_code']}
Country: #{h['country']}
Phone: #{h['phone']}
Email: #{h['email']}
MSG
    end

    def self.get_billing_data(h, label=false)
      label_str = label ? OpenShift::AriaEvent::LABEL : ""
      data = <<MSG
Billing Data #{label_str}
-----------------------------------
Company Name: Aria Systems
MSG
    end

    def self.get_supplemental_plans(h, label=false)
      supp_plans = ""
      begin
        for i in 0..h['supp_plan_no'].length-1 do
          supp_plans += "Supp Plan #{i+1}:\n"
          supp_plans += " Name: #{h['supp_plan_name'][i]}\n"
          supp_plans += " Number: #{h['supp_plan_no'][i]}\n" 
          supp_plans += " Activation Date: #{h['supp_plan_activation_date'][i]}\n"
          supp_plans += " Units: #{h['supp_plan_units'][i]}\n"
          supp_plans += " Termination Date: #{h['supp_plan_termination_date'][i]}\n\n"
        end 
      rescue
        # Ignore
      end
      return if supp_plans.empty?
      label_str = label ? OpenShift::AriaEvent::LABEL : ""
      data = <<MSG
Supplemental Plans #{label_str}
-----------------------------------
#{supp_plans}
MSG
    end

    def self.get_supplemental_fields(h, label=false)
      supp_fields = ""
      begin
        for i in 0..h['supp_field_name'].length-1 do
          next if h['supp_field_name'][i] == 'RHLogin'  # skip RHLogin, already listed in Account Data section
          supp_fields += "#{h['supp_field_name'][i]}: #{h['supp_field_value'][i]}\n"
        end 
      rescue
        # Ignore
      end  
      return if supp_fields.empty?
      label_str = label ? OpenShift::AriaEvent::LABEL : ""
      data = <<MSG
Supplemental Fields #{label_str}
-----------------------------------
#{supp_fields}
MSG
    end

    def self.mark_acct_canceled(h)
      begin
        login = nil
        for i in 0..h['supp_field_name'].length-1 do
          if h['supp_field_name'][i] == 'RHLogin'
            login = h['supp_field_value'][i]
            break
          end
        end
        Rails.logger.error "Unable to find 'RHLogin' field for the event: #{h}" unless login
        filter = {:login => login, :pending_plan_id => nil, :pending_plan_uptime => nil}
        update = {"$set" => {:pending_plan_id => :freeshift, :pending_plan_uptime => Time.now.utc, :plan_state => CloudUser::PLAN_STATES['canceled']}}
        user = nil
        OpenShift::AriaEvent::PLAN_STATE_UPDATE_RETRIES.times do 
          user = CloudUser.with(consistency: :strong).where(filter).find_and_modify(update, {:new => true})
          break if user
          sleep OpenShift::AriaEvent::PLAN_STATE_UPDATE_RETRY_TIME
        end
        Rails.logger.error "Failed to change plan state to 'canceled' for user '#{login}'. Event: #{h}" unless user
      rescue Exception => e
        Rails.logger.error e.message
        Rails.logger.error e.backtrace.inspect
      end 
    end

    def self.handle_event(h)
      aria_config = Rails.application.config.billing[:config]
      h['event_id'].each do |ev|
        body = nil
        email_to = aria_config[:event_orders_team_email]
        case ev.to_i
        when 101
          body = acct_create(h)
        when 102
          body = acct_contact(h)
          email_to = aria_config[:event_peoples_team_email]
        when 105
          if OpenShift::AriaEvent::STATUS_CODES.keys.include?(h['status_cd'])
            mark_acct_canceled(h) if h['status_cd'] < "0"
            body = acct_status(h)
          end
        when 107
          body = acct_plans(h)
        when 110, 112, 114
          body = acct_supp_plans(h)
        when 118, 119
          body = acct_supp_fields(h)
        else
          Rails.logger.error "Invalid Event, id: #{ev}"
        end
        OpenShift::AriaNotification.report_event(ev, body, email_to) if body 
      end
    end
   
    def self.acct_create(h)
      body = <<MSG
#{get_header}
#{get_account_data(h, true)}
#{get_detail_account_data(h)}
#{get_supplemental_plans(h, true)}
#{get_account_contact(h, true)}
#{get_billing_data(h, true)}
#{get_supplemental_fields(h, true)}
#{get_events(h)}
MSG
    end 

    def self.acct_contact(h)
      body = <<MSG
#{get_header}
#{get_account_data(h)}
#{get_account_contact(h, true)}
#{get_supplemental_fields(h)}
#{get_events(h)}
MSG
    end
   
    def self.acct_status(h)
      body = <<MSG
#{get_header}
#{get_account_data(h, true)}
#{get_detail_account_data(h)}
#{get_supplemental_plans(h)}
#{get_account_contact(h)}
#{get_billing_data(h)}
#{get_supplemental_fields(h)}
#{get_events(h)}
MSG
    end
   
    def self.acct_plans(h)
      body = <<MSG
#{get_header}
#{get_account_data(h, true)}
#{get_detail_account_data(h)}
#{get_supplemental_fields(h)}
#{get_events(h)}
MSG
    end
   
    def self.acct_supp_plans(h)
      body = <<MSG
#{get_header}
#{get_account_data(h)}
#{get_supplemental_plans(h, true)}
#{get_supplemental_fields(h)}
#{get_events(h)}
MSG
    end

    def self.acct_supp_fields(h)
      supp_field_info = get_supplemental_fields(h, true)
      return if supp_field_info.nil?
      body = <<MSG
#{get_header}
#{get_account_data(h)}
#{supp_field_info}
#{get_events(h)}
MSG
    end 
  end
end
