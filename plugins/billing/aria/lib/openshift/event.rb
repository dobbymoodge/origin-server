module OpenShift
  module AriaBilling
    class Event

      EVENTS = {
        "101" => "Account created",
        "102" => "Account administrative contact modified",
        "105" => "Account Status Changed",
        "107" => "Account master service plan modified",
        "110" => "Account supplemental service plan assigned",
        "112" => "Account supplemental service plan de-assigned",
        "114" => "Account supplemental service plan modified",
        "118" => "Account supplemental field value added event",
        "119" => "Account supplemental field value modified"
      }

      def self.get_header
        data = <<MSG
Account Provisioning Update
-----------------------------------
This provisioning message was generated by the Aria STAGING system
-----------------------------------
MSG
      end

      def self.get_events(h)
        event_info = ""
        for i in 0..h['event_id'].length-1 do
          event_info += "#{h['event_id'][i]}: #{h['event_label'][i]}\n"
        end
        data = <<MSG
Events
-----------------------------------
#{event_info}
MSG
      end
      
      def self.get_account_data(h)
        rhlogin = ""
        begin
          for i in 0..h['supp_field_name'].length-1 do
            if h['supp_field_name'][i] == 'RHLogin'
              rhlogin = h['supp_field_value'][i]
              break
            end
          end
        rescue
          #Ignore
        end
        data = <<MSG
Account Data
-----------------------------------
Client Number: #{h['client_no']}
Aria PO#: #{h['transaction_id']}
RHLogin: #{rhlogin}
MSG
      end

      def self.get_detail_account_data(h)
        data = <<MSG
Sku: #{h['plan_name']}
Qty: #{h['plan_units']}
Status Code: #{h['status_cd']}
Promo Code: #{h['promo_code']}
MSG
      end

      def self.get_account_contact(h)
        data = <<MSG
End User Contact
-----------------------------------
First Name: #{h['first_name']}
Last Name: #{h['last_name']}
Company Name: #{h['company_name']}
Address1: #{h['address1']}
Address2: #{h['address2']}
City: #{h['city']}
State/Province: #{h['state_prov']}
Postal Code: #{h['postal_code']}
Country: #{h['country']}
Phone: #{h['phone']}
Email: #{h['email']}
MSG
      end

      def self.get_billing_data(h)
        data = <<MSG
Billing Data
-----------------------------------
Company Name: Aria Systems
MSG
      end

      def self.get_supplemental_plans(h)
        supp_plans = ""
        begin
          for i in 0..h['supp_plan_no'].length-1 do
            supp_plans += "Supp Plan #{i+1}:"
            supp_plans += "<dd> Name: #{h['supp_plan_name'][i]} </dd>"
            supp_plans += "<dd> Number: #{h['supp_plan_no'][i]} </dd>" 
            supp_plans += "<dd> Activation Date: #{h['supp_plan_activation_date'][i]} </dd>"
            supp_plans += "<dd> Units: #{h['supp_plan_units'][i]} </dd>"
            supp_plans += "<dd> Termination Date: #{h['supp_plan_termination_date'][i]} </dd>\n\n"
          end 
        rescue
          # Ignore
        end
        data = <<MSG
Supplemental Plans
-----------------------------------
#{supp_plans}
MSG
      end

      def self.get_supplemental_fields(h)
        supp_fields = ""
        begin
          for i in 0..h['supp_field_name'].length-1 do
            next if h['supp_field_name'][i] == 'RHLogin'  # skip RHLogin, already listed in Account Data section
            supp_fields += "#{h['supp_field_name'][i]}: #{h['supp_field_value'][i]}\n"
          end 
        rescue
          # Ignore
        end
        data = <<MSG
Supplemental Fields
-----------------------------------
#{supp_fields}
MSG
      end

      def self.handle_event(h)
        aria_config = Rails.application.config.billing[:config]
        h['event_id'].each do |ev|
          email_to = aria_config[:event_orders_team_email]
          case ev.to_i
          when 101
            body = acct_create(h)
          when 102
            body = acct_contact(h)
            email_to = aria_config[:event_peoples_team_email]
          when 105
            # Status Codes => 1:Active, -1:Suspended, -2:Cancelled, -3:Terminated
            if ["1", "-1", "-2", "-3"].include?(h['status_cd'])
              body = acct_status(h)
            else
              next
            end
          when 107
            body = acct_plans(h)
          when 110, 112, 114
            body = acct_supp_plans(h)
          when 118, 119
            body = acct_supp_fields(h)
          else
            raise Exception.new "Invalid Event, id: #{ev}"
          end
          body.gsub!(/\n/, "<br/>")
          OpenShift::AriaBilling::Notification.report_event(ev, body, email_to) 
        end
      end
     
      def self.acct_create(h)
        body = <<MSG
<html><body>#{get_header}
<b>#{get_account_data(h)}
#{get_detail_account_data(h)}
#{get_supplemental_plans(h)}
#{get_account_contact(h)}
#{get_billing_data(h)}
#{get_supplemental_fields(h)}</b>
#{get_events(h)}
</body></html>
MSG
      end 

      def self.acct_contact(h)
        body = <<MSG
<html><body>#{get_header}
#{get_account_data(h)}
<b>#{get_account_contact(h)}</b>
#{get_supplemental_fields(h)}
#{get_events(h)}
</body></html>
MSG
      end
     
      def self.acct_status(h)
        body = <<MSG
<html><body>#{get_header}
#{get_account_data(h)}
<b>#{get_detail_account_data(h)}</b>
#{get_supplemental_plans(h)}
#{get_account_contact(h)}
#{get_billing_data(h)}
#{get_supplemental_fields(h)}
#{get_events(h)}
</body></html>
MSG
      end
     
      def self.acct_plans(h)
        body = <<MSG
<html><body>#{get_header}
#{get_account_data(h)}
<b>#{get_detail_account_data(h)}</b>
#{get_supplemental_fields(h)}
#{get_events(h)}
</body></html>
MSG
      end
     
      def self.acct_supp_plans(h)
        body = <<MSG
<html><body>#{get_header}
#{get_account_data(h)}
<b>#{get_supplemental_plans(h)}</b>
#{get_supplemental_fields(h)}
#{get_events(h)}
</body></html>
MSG
      end

      def self.acct_supp_fields(h)
        body = <<MSG
<html><body>#{get_header}
#{get_account_data(h)}
<b>#{get_supplemental_fields(h)}</b>
#{get_events(h)}
</body></html>
MSG
      end 
    end
  end
end
