#!/usr/bin/env oo-ruby

#--
# Copyright 2012 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

require 'rubygems'
require 'getoptlong'
require 'time'

def usage
  puts <<USAGE
== Synopsis

#{$0}: Delete subaccounts that has no activity for at least a week and has no applications for the given login.

== Usage

#{$0} OPTIONS

Options:
-l|--login <login_name>
    Login with OpenShift access (required) 
-v|--verbose
    Print information on each subaccount user for the given login
-h|--help
    Show Usage info
USAGE
  exit 255
end

args = {}
begin
  opts = GetoptLong.new(
    ["--login",         "-l", GetoptLong::REQUIRED_ARGUMENT],
    ["--verbose",       "-v", GetoptLong::NO_ARGUMENT],
    ["--help",          "-h", GetoptLong::NO_ARGUMENT]
  )
  opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
  usage
end

login = args["--login"]
verbose = args["--verbose"]
total_users = deleted_users = 0

usage if login.nil? or args["--help"]

require "/var/www/openshift/broker/config/environment"

begin
  # Find parent login id
  parent_user_id = nil
  begin
    parent_user_id = CloudUser.find_by(login: login)._id
  rescue Mongoid::Errors::DocumentNotFound
    raise Exception.new "Login '#{login}' not found."
  end
  
  # Find and delete one week old subaccounts
  puts "One week old subaccounts for user '#{login}':" if verbose
  week_old_time = Time.now.utc - (7*24*60*60)
  query = {'parent_user_id' => parent_user_id, 'updated_at' => {"$lte" => week_old_time}}
  CloudUser.no_timeout.where(query).each do |cloud_user|
    total_users += 1
    print "Subaccount '#{cloud_user.login}' " if verbose
    app_exists = false
    cloud_user.domains.each do |domain|
      if domain.applications.count > 0
        app_exists = true
        break
      end if domain.applications
    end if cloud_user.domains
    if app_exists
      print "has apps => Skipped\n" if verbose
    else
      # As of Jun 26, 2013 we do not generate usage records for subaccounts.
      # For now, these are no-ops
      UsageRecord.where(user_id: cloud_user._id).delete
      Usage.where(user_id: cloud_user._id).delete

      cloud_user.force_delete
      deleted_users += 1
      print "has NO apps => Deleted\n" if verbose
    end
  end
  puts "NO users found." if verbose and (total_users == 0)
  puts
  puts "Summary of one week old subaccounts for user '#{login}':"
  puts "\tTotal   : #{total_users}"
  puts "\tDeleted : #{deleted_users}"
rescue Exception => e
  puts e.message
  exit 1
end
exit 0
