#!/usr/bin/env oo-ruby

#--
# Copyright 2012 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

require 'rubygems'
require 'getoptlong'
require 'time'

def usage
  puts <<USAGE
== Synopsis

#{$0}: Delete all subaccounts that has no activity for at least a week and has no applications for a given parent login or for all parent logins.

== Usage

#{$0} --all|--login <login_name>|--help [--threads] [--verbose]

Options:
-a|--all
    All OpenShift logins
-l|--login <login_name>
    Login with OpenShift access
-t|--threads
    Number of threads for parallel processing (default: 4)
-v|--verbose
    Print information on each deleted subaccount user
-h|--help
    Show Usage info
USAGE
  exit 255
end

args = {}
begin
  opts = GetoptLong.new(
    ["--all",           "-a", GetoptLong::NO_ARGUMENT],
    ["--login",         "-l", GetoptLong::REQUIRED_ARGUMENT],
    ["--threads",       "-t", GetoptLong::REQUIRED_ARGUMENT],
    ["--verbose",       "-v", GetoptLong::NO_ARGUMENT],
    ["--help",          "-h", GetoptLong::NO_ARGUMENT]
  )
  opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
  usage
end

MAX_THREADS=16
$all = args["--all"]
$login = args["--login"]
if args["--threads"]
  $threads = args["--threads"].to_i
else
  $threads = 4
end
$verbose = args["--verbose"]

usage if ($login.nil? and $all.nil?) or args["--help"]

if $login and $all
  puts "Error: You can not provide both '--login' and '--all' options."
  exit 1
end

if $threads > MAX_THREADS
  puts "Error: Max allowed threads is #{MAX_THREADS}."
  exit 2
end

require "/var/www/openshift/broker/config/environment"

week_old_time = Time.now.utc - (7*24*60*60)
user_hash = {}
domain_hash = {}
query = {}

if $login
  # Find parent login id
  parent_user_id = nil
  OpenShift::DataStore.find(:cloud_users, {'login' => $login}, {:fields => []}) do |user|
    parent_user_id = user['_id']
  end
  unless parent_user_id
    puts "Login '#{$login}' not found."
    exit 5
  end 

  query = {'parent_user_id' => parent_user_id, 'updated_at' => {"$lte" => week_old_time}}
else
  query = {'parent_user_id' => {"$ne" => nil}, 'updated_at' => {"$lte" => week_old_time}}
end

# Populate user_hash for subaccounts that need to be deleted
OpenShift::DataStore.find(:cloud_users, query, {:fields => [], :timeout => false}) do |user|
  user_hash[user["_id"].to_s] = true
end

# Populate domain_hash for subaccounts that need to be deleted
OpenShift::DataStore.find(:domains, {}, {:fields => ['owner_id'], :timeout => false}) do |domain|
  owner_id = domain["owner_id"].to_s
  if user_hash[owner_id]
    domain_hash[domain["_id"].to_s] = owner_id
  end
end

# Ignore domains that has valid apps
OpenShift::DataStore.find(:applications, {}, {:fields => ['domain_id'], :timeout => false}) do |app|
  domain_id = app['domain_id'].to_s
  domain_hash.delete(domain_id) if domain_hash[domain_id]
end

def delete_subaccounts(tid_info)
  tid_info['dom_info'].each do |domain_id, user_id|
    begin
      # Mongoid will ensure domain won't get deleted in case of any apps
      Domain.where(_id: Moped::BSON::ObjectId(domain_id)).delete
      tid_info['cu_handle'].remove({'_id' => BSON::ObjectId(user_id)})
      tid_info['deleted_count'] += 1
      puts "Deleted subaccount domain_id: #{domain_id}, user_id: #{user_id}" if $verbose
    rescue Mongoid::Errors::DeleteRestriction
      tid_info['skipped_count'] += 1
    rescue Exception => e
      tid_info['failed_count'] += 1
      Rails.logger.error e.message
      Rails.logger.error e.backtrace.inspect
    end
  end
end

tids = []
tid_info = []
# Init thread info
$threads.times do |idx|
  cu_handle = OpenShift::DataStore.db[:cloud_users]
  tid_info[idx] = { 'deleted_count' => 0, 'failed_count' => 0, 'skipped_count' => 0,
                    'cu_handle' => cu_handle, 'dom_info' => {} }
end

idx = 0
# Distribute work among threads
domain_hash.each do |dk, dv|
  tid_info[idx]['dom_info'][dk] = dv
  idx += 1
  idx = 0 if idx == $threads
end

tid_info.each do |ti|
  tids << Thread.new { delete_subaccounts(ti) }
end

begin
  tids.each { |tid| tid.join }
rescue SystemExit, Interrupt
  tids.each { |tid| tid.kill }
end

deleted_count = failed_count = skipped_count = 0
tid_info.each do |ti|
  deleted_count += ti['deleted_count']
  failed_count += ti['failed_count']
  skipped_count += ti['skipped_count']
end
total_count = domain_hash.size - skipped_count
unprocessed_count = total_count - deleted_count - failed_count

puts
if $login 
  puts "Summary of one week old subaccounts for user '#{$login}':"
else
  puts "Summary of one week old subaccounts:"
end
puts "\tTotal       : #{total_count}"
puts "\tDeleted     : #{deleted_count}"
puts "\tFailed      : #{failed_count}"
puts "\tUnprocessed : #{unprocessed_count}"
puts
if (failed_count == 0) and (unprocessed_count == 0)
  puts "SUCCESS"
else
  puts "INCOMPLETE"
end
exit 0
