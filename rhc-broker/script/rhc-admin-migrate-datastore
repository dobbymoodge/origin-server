#!/usr/bin/env oo-ruby
require 'getoptlong'

VERSIONS = { '2.0.32' => {:compatible => false,
                          :non_compatible => true} }

CARTRIDGE_CHANGES = [{"old_name" => "phpmyadmin-3.4", "new_name" => "phpmyadmin-3", "old_version" => "3.4", "new_version" => "3"},
                     {"old_name" => "jbosseap-6.0", "new_name" => "jbosseap-6", "old_version" => "6.0", "new_version" => "6"},
                     {"old_name" => "jenkins-1.4", "new_name" => "jenkins-1", "old_version" => "1.4", "new_version" => "1"},
                     {"old_name" => "jenkins-client-1.4", "new_name" => "jenkins-client-1", "old_version" => "1.4", "new_version" => "1"},
                     {"old_name" => "switchyard-0.6", "new_name" => "switchyard-0", "old_version" => "0.6", "new_version" => "0"}] 

def migrate(version, compatible=true)
  if version == VERSIONS.keys.first
    puts "Starting migration"
    puts ""
    if compatible
      # ignore
    else
      CARTRIDGE_CHANGES.each do |cart_change|
        puts "Updating cartridge #{cart_change['old_name']} to #{cart_change['new_name']}"
        
        print "Updating component instances for all applications...\t"
        update_component_instances(cart_change['old_name'], cart_change['new_name'])
        puts "Done."
        
        print "Updating group overrides for all applications...\t"
        update_group_overrides(cart_change['old_name'], cart_change['new_name'])
        puts "Done."

        print "Updating cartridge version for all applications...\t"
        update_cartridge_version(cart_change['new_name'], cart_change['old_version'], cart_change['new_version'])
        puts "Done."
        
        print "Verifying cartridge update for all applications...\t"
        missed_update_count = verify_migration(cart_change['old_name'], cart_change['new_name'], cart_change['old_version'])
        puts (missed_update_count == 0 ? "Successful." : "Failed.")
        puts ""
      end
    end
  end
end

def update_component_instances(old_cart_name, new_cart_name)
  db = nil
  begin
    db = OpenShift::DataStore.db(:primary)

    ci_index = 0
    ci_search_count = 1
    while ci_search_count > 0 do
      filter = {"component_instances.#{ci_index}.cartridge_name" => old_cart_name}
      update_query = {"$set" => {"component_instances.#{ci_index}.cartridge_name" => new_cart_name,
                                 "component_instances.#{ci_index}.component_name" => new_cart_name}}
      db["applications"].update(filter, update_query, { :multi => true })

      ci_index += 1
      ci_search_count = db["applications"].find({"component_instances.#{ci_index}" => {"$exists" => true}}).count
    end
  rescue Exception => e
    puts e.message
    puts e.backtrace
    exit 1
  ensure
    db.connection.close if db and db.connection and db.connection.connected?
  end
end

def update_group_overrides(old_cart_name, new_cart_name)
  db = nil
  begin
    db = OpenShift::DataStore.db(:primary)

    # Update all the cartridge names in group_overrides
    go_index = 0
    go_search_count = 1
    while go_search_count > 0 do
      component_index = 0
      component_search_count = 1
      while component_search_count > 0
        filter = {"group_overrides.#{go_index}.components.#{component_index}.cart" => old_cart_name}
        update_query = {"$set" => {"group_overrides.#{go_index}.components.#{component_index}.cart" => new_cart_name,
                                   "group_overrides.#{go_index}.components.#{component_index}.comp" => new_cart_name}}
        db["applications"].update(filter, update_query, { :multi => true })
        component_index += 1
        component_search_count = db["applications"].find({"group_overrides.#{go_index}.components.#{component_index}" => {"$exists" => true}}).count
      end
      go_index += 1
      go_search_count = db["applications"].find({"group_overrides.#{go_index}.components.0" => {"$exists" => true}}).count
    end
  rescue Exception => e
    puts e.message
    puts e.backtrace
    exit 1
  ensure
    db.connection.close if db and db.connection and db.connection.connected?
  end
end

def update_cartridge_version(new_cart_name, old_cart_version, new_cart_version)
  db = nil
  begin
    db = OpenShift::DataStore.db(:primary)

    ci_index = 0
    ci_search_count = 1
    while ci_search_count > 0 do
      filter = {"component_instances.#{ci_index}.cartridge_name" => new_cart_name, 
                "component_instances.#{ci_index}.cartridge_vendor" => "redhat",
                "component_instances.#{ci_index}.version" => old_cart_version}
      update_query = {"$set" => {"component_instances.#{ci_index}.version" => new_cart_version}}
      db["applications"].update(filter, update_query, { :multi => true })

      ci_index += 1
      ci_search_count = db["applications"].find({"component_instances.#{ci_index}" => {"$exists" => true}}).count
    end
  rescue Exception => e
    puts e.message
    puts e.backtrace
    exit 1
  ensure
    db.connection.close if db and db.connection and db.connection.connected?
  end
end

def verify_migration(old_cart_name, new_cart_name, old_cart_version)
  db = nil
  missed_update_count = 0
  begin
    db = OpenShift::DataStore.db(:primary)
	
	missed_update_count += db["applications"].find({"component_instances.cartridge_name" => old_cart_name}).count
	missed_update_count += db["applications"].find({"component_instances.component_name" => old_cart_name}).count
	missed_update_count += db["applications"].find({"group_overrides.components.cart" => old_cart_name}).count
	missed_update_count += db["applications"].find({"group_overrides.components.comp" => old_cart_name}).count
	missed_update_count += db["applications"].find({"component_instances" => {"$elemMatch" => {"cartridge_name" => new_cart_name, "cartridge_vendor" => "redhat", "version" => old_cart_version}}}).count
  rescue Exception => e
    puts e.message
    puts e.backtrace
    exit 1
  ensure
    db.connection.close if db and db.connection and db.connection.connected?
  end
  return missed_update_count
end


def p_usage
  puts <<USAGE

Usage: #{$0}

  --version                            Version of the migration to run
  --compatible                         Run the backwards compatible portion of the migration (Can be run after the system is upgrade with the brokers running)
  --non-compatible                     Run the non backwards compatible portion of the migration (Must be run with the brokers shutdown)
  --check                              Check whether the compatible or non compatible portion of the migration is necessary (Returns 0 if necessary)
  --help                               Show usage info
USAGE
  exit 255
end

begin
  opts = GetoptLong.new(
    ["--version", "-v", GetoptLong::REQUIRED_ARGUMENT],
    ["--compatible", "-c", GetoptLong::NO_ARGUMENT],
    ["--non-compatible", "-n", GetoptLong::NO_ARGUMENT],
    ["--check", GetoptLong::NO_ARGUMENT],
    ["--help", "-h", GetoptLong::NO_ARGUMENT]
  )
  opt = {}
  opts.each do |o, a|
    opt[o[2..-1]] = a.to_s
  end
rescue Exception => e
  p_usage
end

if opt['help']
  p_usage
end

unless opt['version']
  puts "version is required!"
  p_usage
end

unless opt['compatible'] || opt['non-compatible']
  puts "compatible or non-compatible is required!"
  p_usage
end

if opt['compatible'] && opt['non-compatible']
  puts "compatible and non-compatible can not be run together."
  p_usage
end

if opt['check']
  # Return 0 if the migration specified is necessary
  if VERSIONS[opt['version']]
    if VERSIONS[opt['version']][:compatible] && opt['compatible']
      exit 0
    elsif VERSIONS[opt['version']][:non_compatible] && opt['non-compatible']
      exit 0
    else
      exit 1
    end
  else
    exit 1
  end
else
  unless VERSIONS[opt['version']]
    puts "Migration of version '#{opt['version']}' not supported!"
    exit 1
  end
  $:.unshift('/var/www/openshift/broker')
  require 'config/environment'
  if opt['compatible']
    unless VERSIONS[opt['version']][:compatible]
      puts "Compatible migration for version '#{opt['version']}' not supported!"
      exit 1
    end
    migrate(opt['version'])
  else
    unless VERSIONS[opt['version']][:non_compatible]
      puts "Non compatible migration for version '#{opt['version']}' not supported!"
      exit 1
    end
    migrate(opt['version'], false)
  end
end

puts "Done!"