#!/usr/bin/env oo-ruby
require 'getoptlong'

VERSIONS = { '2.0.30' => {:compatible => true,
                          :non_compatible => false} }

def migrate(version, compatible=true)
  if version == VERSIONS.keys.first
    puts "Starting migration"
    total = 0
    fixed_total = 0
    db = OpenShift::DataStore.db(:primary)
    if compatible
      applications = db.collection('applications')
      #domains = db.collection('domains')
      #cloud_users = db.collection('cloud_users')
      query = { }
      selection = {:fields => ["component_instances.cartridge_name",
                               "component_instances.component_properties",
                               "component_instances._id",
                               "name",
                               "domain_id"], :timeout => false}
      applications.find(query, selection) do |cursor|
        cursor.each do |app|
          print "."
          total += 1
          fixed_total += 1
        end
      end
    else
    end
    puts "\nMigrated #{fixed_total}/#{total} applications"
  end
end


def p_usage
  puts <<USAGE

Usage: #{$0}

  --version                            Version of the migration to run
  --compatible                         Run the backwards compatible portion of the migration (Can be run after the system is upgrade with the brokers running)
  --non-compatible                     Run the non backwards compatible portion of the migration (Must be run with the brokers shutdown)
  --check                              Check whether the compatible or non compatible portion of the migration is necessary (Returns 0 if necessary)
  --help                               Show usage info
USAGE
  exit 255
end

begin
  opts = GetoptLong.new(
    ["--version", "-v", GetoptLong::REQUIRED_ARGUMENT],
    ["--compatible", "-c", GetoptLong::NO_ARGUMENT],
    ["--non-compatible", "-n", GetoptLong::NO_ARGUMENT],
    ["--check", GetoptLong::NO_ARGUMENT],
    ["--help", "-h", GetoptLong::NO_ARGUMENT]
  )
  opt = {}
  opts.each do |o, a|
    opt[o[2..-1]] = a.to_s
  end
rescue Exception => e
  p_usage
end

if opt['help']
  p_usage
end

unless opt['version']
  puts "version is required!"
  p_usage
end

unless opt['compatible'] || opt['non-compatible']
  puts "compatible or non-compatible is required!"
  p_usage
end

if opt['compatible'] && opt['non-compatible']
  puts "compatible and non-compatible can not be run together."
  p_usage
end

if opt['check']
  # Return 0 if the migration specified is necessary
  if VERSIONS[opt['version']]
    if VERSIONS[opt['version']][:compatible] && opt['compatible']
      exit 0
    elsif VERSIONS[opt['version']][:non_compatible] && opt['non-compatible']
      exit 0
    else
      exit 1
    end
  else
    exit 1
  end
else
  unless VERSIONS[opt['version']]
    puts "Migration of version '#{opt['version']}' not supported!"
    exit 1
  end
  $:.unshift('/var/www/openshift/broker')
  require 'config/environment'
  if opt['compatible']
    unless VERSIONS[opt['version']][:compatible]
      puts "Compatible migration for version '#{opt['version']}' not supported!"
      exit 1
    end
    migrate(opt['version'])
  else
    unless VERSIONS[opt['version']][:non_compatible]
      puts "Non compatible migration for version '#{opt['version']}' not supported!"
      exit 1
    end
    migrate(opt['version'], false)
  end
end

puts "Done!"