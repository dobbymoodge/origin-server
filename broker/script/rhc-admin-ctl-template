#!/usr/bin/env ruby

require 'rubygems'
require 'getoptlong'
require 'json'
require 'yaml'

def usage
    puts <<USAGE
== Synopsis

rhc-admin-ctl-template: Add or remove an application template

== Usage

rhc-admin-ctl-template OPTIONS

Options:
-u|--uuid UUID
  The UUID of the application template to remove.
-n|--named NAME
  The display name of the template
-c|--command <command>
    (add|remove) (required)
-d|--descriptor DESCRIPTOR
  The descriptor as YAML or a file path to the descriptor
-g|--git-url GIT_URL
  The URL to the git repository holding the source code for this template
-t|--tags TAGS
  Comma seperated list of tags for the template
--cost GEAR_COST
  The number of gears this template will use
-m|--metadata
  The JSON metadata for this template or a file path to the JSON metadata
-h|--help
    Show Usage info
USAGE
end

opts = GetoptLong.new(
    ["--uuid",             "-u", GetoptLong::REQUIRED_ARGUMENT],    
    ["--named",            "-n", GetoptLong::REQUIRED_ARGUMENT],
    ["--command",          "-c", GetoptLong::REQUIRED_ARGUMENT],
    ["--descriptor",       "-d", GetoptLong::REQUIRED_ARGUMENT],
    ["--git-url",          "-g", GetoptLong::REQUIRED_ARGUMENT],
    ["--tags",             "-t", GetoptLong::REQUIRED_ARGUMENT],
    ["--cost",                   GetoptLong::REQUIRED_ARGUMENT],
    ["--metadata",         "-m", GetoptLong::REQUIRED_ARGUMENT],    
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

uuid             = args["--uuid"]
display_name     = args["--named"]
command          = args['--command']
descriptor       = args["--descriptor"]
git_url          = args["--git-url"]
tags             = args["--tags"]
gear_cost        = args["--cost"]
metadata         = args["--metadata"]

if args["--help"]
  usage
  exit 1
end

require "/var/www/stickshift/broker/config/environment"

case command
when "add"
  begin
    descriptor = File.file?(descriptor) ?
      YAML.load_file(descriptor) :
      YAML.load(descriptor)
  rescue Exception => e
    print "Invalid descriptor YAML: #{descriptor}\n"
    usage
    exit -100
  end
  
  begin
    metadata = File.file?(metadata) ?
      JSON.load(File.open(metadata)) :
      JSON.parse(metadata)
  rescue Exception => e
    print "Invalid metadata JSON: #{metadata}\n"
    usage
    exit -100
  end

  tags = tags.split(",")
  template = ApplicationTemplate.new(display_name, descriptor.to_yaml, git_url, tags, gear_cost, metadata)
  template.save
  print "Template #{template.uuid} created\n"

when "remove"
  if uuid.nil?
    print "Template UUIDnot provided\n"
    usage
    exit -100
  end

  template = ApplicationTemplate.find(uuid)
  if template.nil?
    print "Template with UUID #{uuid} not found\n"
  else
    template.delete
    print "Template with UUID #{template.uuid} deleted\n"
  end

else
  print "Command must be one of: (add|remove)"
  usage
  exit -100
end