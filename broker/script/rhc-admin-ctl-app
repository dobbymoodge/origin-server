#!/usr/bin/env ruby

require 'rubygems'
require 'openshift'
require 'mcollective'
require 'getoptlong'

include Libra

def p_usage
    puts <<USAGE

Usage: #{$0}
Control an OpenShift express app

  -a|--app   application   Application name  (alphanumeric) (required)
  -l|--rhlogin rhlogin     Red Hat login (RHN or OpenShift login with OpenShift Express access) (required)
  -c|--command command     (start|stop|force-stop|restart|status|destroy) (required)
  -b|--bypass              Bypass warnings
  -h|--help                Show Usage info

USAGE
exit 255
end

begin
    opts = GetoptLong.new(
        ["--help",      "-h", GetoptLong::NO_ARGUMENT],
        ["--bypass",    "-b", GetoptLong::NO_ARGUMENT],
        ["--rhlogin",    "-l", GetoptLong::REQUIRED_ARGUMENT],
        ["--app",        "-a", GetoptLong::REQUIRED_ARGUMENT],
        ["--command",    "-c", GetoptLong::REQUIRED_ARGUMENT]
    )
    opt = {}
    opts.each do |o, a|
        opt[o[2..-1]] = a.to_s
    end
rescue Exception => e
    puts e.message
    p_usage
end

if opt["help"]
    p_usage
end

unless opt['rhlogin'] && opt['app'] && opt['command']
    p_usage
end

#Check to see if user exists
user = Libra::User.find(opt['rhlogin'])
if not user
  puts "User with Red Hat login #{opt["rhlogin"]} does not exist"
  exit 1
else
  # check to see if app exists
  app_info = user.app_info(opt['app'])
  if not app_info
    puts "Application #{opt["app"]} does not exist for user #{opt["rhlogin"]}"
    exit 1
  end
end
  

unless opt["command"] =~ /^(start|stop|force-stop|restart|status|destroy)$/
  puts "Invalid command '#{opt["command"]}' specified.  Valid commands are (start|stop|force-stop|restart|status|destroy)"
  p_usage
end

puts "Performing command '#{opt["command"]}' on application '#{opt["app"]}' for user '#{opt["rhlogin"]}'"

opt["command"] = "deconfigure" if opt["command"] == "destroy"

if !opt["bypass"] and opt["command"] == "deconfigure"
    # deconfigure is the actual hook called on 'destroy'
    # destroy is used for clarity

    puts <<WARNING
!!!! WARNING !!!! WARNING !!!! WARNING !!!!
You are about to destroy the #{opt['app']} application.

This is NOT reversible, all remote data for this application will be removed.
WARNING

    print "Do you want to destroy this application (y/n): "
    begin
      agree = gets.chomp
      if agree != 'y'
          puts "\n"
          exit 217
      end
    rescue Interrupt
      puts "\n"
      exit 217
    end
end

app_info = Libra.execute(nil, opt['command'], opt['app'], opt['rhlogin'], nil, nil)

puts app_info.pretty_inspect