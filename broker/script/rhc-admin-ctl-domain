#!/usr/bin/env ruby

require "/var/www/libra/broker/config/environment"
require 'getoptlong'

def usage
    puts <<USAGE
== Synopsis

rhc-admin-ctl-domain: Manage user domains

== Usage

rhc-admin-ctl-domain OPTIONS

Options:
-l|--rhlogin <rhlogin>
    Red Hat login (RHN or OpenShift login with OpenShift Express access) (required)
-n|--namespace <Namespace>
    Namespace for application(s) (alphanumeric - max 16 chars) (required)
-c|--command (create|update|delete|info)
-s|--ssh <ssh key>
    Users SSH key
-h|--help:
    Show Usage info
USAGE
end

opts = GetoptLong.new(
    ["--rhlogin",          "-l", GetoptLong::REQUIRED_ARGUMENT],
    ["--namespace",        "-n", GetoptLong::REQUIRED_ARGUMENT],    
    ["--command",          "-c", GetoptLong::REQUIRED_ARGUMENT],
    ["--ssh",              "-s", GetoptLong::REQUIRED_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

login = args["--rhlogin"]
ssh = args["--ssh"]
namespace = args["--namespace"]

if login.nil? or args["--help"]
  usage
  exit 1
end

reply = ResultIO.new
case args["--command"]
when "create"
  if ssh.nil? || namespace.nil? || login.nil?
    print "Please provide rhlogin, ssh key and namespace to create the user\n"
    exit -1
  end
  user = CloudUser.find(login)
  if user
    print "User #{login} already exists. Please use the 'update' command to alter ssh keys or namespace.\n"
    exit -1
  end
  
  user = CloudUser.new(login, ssh, namespace)
  reply.append user.save
  reply.resultIO << "Successfully created user.\n"
when "update"
  user = CloudUser.find(login)
  unless user
    print "User with login: #{login} not found\n"
    exit 1
  end
  
  reply.append user.update_ssh_key(ssh, "dsa") unless ssh.nil?
  reply.append user.update_namespace(namespace) unless namespace.nil?
  reply.resultIO << "Successfully updated user.\n"
when "delete"
  user = CloudUser.find(login)
  unless user
    print "User with login: #{login} not found\n"
    exit 1
  end
  unless user.applications.empty?
    print "User still has applications. Delete them first\n"
    exit 1
  end
  reply.append user.delete
  reply.resultIO << "Successfully deleted user.\n"  
else
  user = CloudUser.find(login)
  unless user
    print "User with login: #{login} not found\n"
    exit 1
  end
  reply.resultIO << "RHLogin: #{user.rhlogin}\n"
  reply.resultIO << "Primary SSH key:\n#{user.ssh}\n\n"
  reply.resultIO << "Namespace: #{user.namespace}\n"
  reply.resultIO << "Additional SSH keys:\n"
  user.ssh_keys.each do |name,key|
    reply.resultIO << "\t#{name}:\n#{key}\n\n"
  end unless user.ssh_keys.nil?
  reply.resultIO << "Applications:\n"
  user.applications.each do |app|
    reply.resultIO << app.as_json.to_yaml
  end
end

print reply.resultIO.string