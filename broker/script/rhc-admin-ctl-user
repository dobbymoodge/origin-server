#!/usr/bin/env ruby

require 'getoptlong'

def usage
    puts <<USAGE
== Synopsis

#{File.basename $0}: Control user settings.

== Notes

  *** WARNING *** WARNING *** WARNING *** WARNING ***

  Cloud SDK currently has an odd behavior that makes
  this script somewhat dangerous.

  DO NOT USE THIS SCRIPT TO MODIFY A LOT OF USERS AT ONCE!

  Please see US1963 in Rally for details.

  *** WARNING *** WARNING *** WARNING *** WARNING ***

== Usage

#{File.basename $0} OPTIONS

Options:
  -l|--rhlogin <rhlogin>
    Red Hat login (RHN or OpenShift login with OpenShift Express access) (required)
  --setmaxgears <number>
    Set the maximum number of gears a user is allowed to use
  --setconsumedgears <number>
    Set the number of gears a user has consumed (use carefully)
  --setvip (true|false)
    Set the vip status of the user
  -h|--help
    Show Usage info

Examples:
  List the current user settings with:
    #{File.basename $0} -l bob@redhat.com

  Set the maximum number of gears a user is allowed to use with:
    #{File.basename $0} -l bob@redhat.com --setmaxgears 10
USAGE
end

class String
    def to_b()
        return true if self.to_s.strip =~ /^(true|t|yes|y|1)$/i

        return false
    end
end

def set_max_gears(user, maxgears)
    if user.max_gears == maxgears
        puts "User already has max_gears set to #{user.max_gears}"
        return
    end

    print "Setting max_gears to #{maxgears}... "
    user.max_gears=maxgears
    result = user.save
    puts "Done."

    if result.exitcode != 0
        puts "An error occurred saving the user."
        exit 6
    end
end

def set_consumed_gears(user, consumedgears)
    if user.consumed_gears == consumedgears
        puts "User already has consumed_gears set to #{user.consumed_gears}"
        return
    end

    print "Setting consumed_gears to #{consumedgears}... "
    db = Crankcase::MongoDataStore.instance
    result = db.update({ "_id" => user.login }, { "$set" => {'consumed_gears' => consumedgears} })
    puts "Done."

    # TODO: figure out what a correct return code is
    #if result != 0
    #    puts "An error occurred saving the user."
    #    exit 6
    #end
end

def set_vip(user, vip)
    if user.vip == vip
        puts "User already has vip set to #{user.vip}"
        return
    end

    print "Setting vip to #{vip}... "
    user.vip = vip
    result = user.save
    puts "Done."

    if result.exitcode != 0
        puts "An error occurred saving the user."
        exit 6
    end
end

opts = GetoptLong.new(
    ["--rhlogin",          "-l", GetoptLong::REQUIRED_ARGUMENT],
    ["--setmaxgears",      GetoptLong::REQUIRED_ARGUMENT],
    ["--setconsumedgears", GetoptLong::REQUIRED_ARGUMENT],
    ["--setvip",           GetoptLong::REQUIRED_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

login = args["--rhlogin"]
maxgears = args["--setmaxgears"].to_i if args["--setmaxgears"]
consumedgears = args["--setconsumedgears"].to_i if args["--setconsumedgears"]
vip = args["--setvip"].to_b if args["--setvip"]

if login.nil? or args["--help"]
    usage
    exit 1
end

# this require is here to not load the environment simply to display help
require '/var/www/stickshift/broker/config/environment'
puts
puts

user = CloudUser::find(login)

if user.nil?
    puts "Error: User '#{login}' not found"
    exit 5
end

changed_user = false

unless maxgears.nil?
    set_max_gears(user, maxgears)
    changed_user = true
end

unless consumedgears.nil?
    set_consumed_gears(user, consumedgears)
    changed_user = true
end

unless vip.nil?
    set_vip(user, vip)
    changed_user = true
end

if changed_user
    # reload user with new settings
    user = CloudUser::find(login)
    puts
    puts
end

# print out the user's current settings
puts "User #{user.login}:"
puts "     consumed gears: #{user.consumed_gears}"
puts "          max gears: #{user.max_gears}"
puts "         vip status: #{user.vip}"
puts
puts
