#!/usr/bin/env ruby

require "/var/www/libra/broker/config/environment"
require 'getoptlong'
require 'pp'

def usage
    puts <<USAGE
== Synopsis

rhc-admin-ctl-district: Control districts

== Usage

rhc-admin-ctl-district OPTIONS

Options:
-u|--uuid     <district uuid>
    District uuid  (alphanumeric)
-c|--command <command>
    (add-node|remove-node|deactivate-node|add-capacity|remove-capacity|destroy)
-i|--server_identity
    Node server_identity (required)
-s|--size
    Size to add or remove (positive number) (required)
-b|--bypass
    Ignore warnings
-h|--help
    Show Usage info
USAGE
end

opts = GetoptLong.new(
    ["--uuid",             "-u", GetoptLong::REQUIRED_ARGUMENT],
    ["--server_identity",  "-i", GetoptLong::REQUIRED_ARGUMENT],
    ["--command",          "-c", GetoptLong::REQUIRED_ARGUMENT],
    ["--size",             "-s", GetoptLong::REQUIRED_ARGUMENT],
    ["--bypass",           "-b", GetoptLong::NO_ARGUMENT],    
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

if args["--help"]
  usage
  exit 1
end

uuid     = args["--uuid"]
command  = args['--command']
server_identity  = args['--server_identity']
size     = args['--size'] ? args['--size'].to_i : nil
bypass   = args['--bypass']

district = nil
if uuid
  district = District.find(uuid)
  unless district
    puts "District #{uuid} not found."
    exit 1
  end
  unless server_identity || (command != 'add-node' && command != 'remove-node' && command != 'deactivate-node')
    puts "--server_identity is required with command: #{command}"
    exit 1
  end
  unless size || (command != 'add-capacity' && command != 'remove-capacity')
    puts "--size is required with command: #{command}"
    exit 1
  end
elsif command
  puts "--uuid is required with --command"
  exit 1
end

reply = ResultIO.new
begin
  case command
  when "add-node"
    district.add_node(server_identity)
    reply.resultIO << "Success!"
  when "remove-node"
    district.remove_node(server_identity)
    reply.resultIO << "Success!"
  when "deactivate-node"
    district.deactivate_node(server_identity)
    reply.resultIO << "Success!"
  when "add-capacity"
    district.add_capacity(size)
    reply.resultIO << "Success!"
  when "remove-capacity"
    district.remove_capacity(size)
    reply.resultIO << "Success!"
  when "destroy"
    unless bypass
      puts <<-WARNING
    !!!! WARNING !!!! WARNING !!!! WARNING !!!!
    You are about to destroy the #{uuid} district.
  
    This is NOT reversible, all remote data for this district will be removed.
    WARNING
  
      print "Do you want to destroy this district (y/n): "
      begin
        agree = gets.chomp
        if agree != 'y'
          puts "\n"
          exit 217
        end
      rescue Interrupt
        puts "\n"
        exit 217
      end
    end

    district.delete
    reply.resultIO << "Successfully destroyed district: #{uuid}" if reply.resultIO.string.empty?
  
  else
    if district
      district.available_uids = '<hidden>'
      reply.resultIO << district.attributes.pretty_inspect
    else
      districts = District.find_all
      unless districts.empty?
        districts.each do |district|
          district.available_uids = '<hidden>'
          reply.resultIO << district.attributes.pretty_inspect
        end
      else
        puts "No districts created yet.  Use rhc-admin-create-district to create one."
      end
    end
  end
rescue Cloud::Sdk::CdkException => e
  reply.errorIO << e.message
end

print "DEBUG OUTPUT:\n#{reply.debugIO.string}\n\n" unless reply.debugIO.string.empty?
print "ERROR OUTPUT:\n#{reply.errorIO.string}\n\n" unless reply.errorIO.string.empty?
print "#{reply.resultIO.string}\n" unless reply.resultIO.string.empty?
