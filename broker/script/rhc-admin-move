#!/usr/bin/env ruby

require 'rubygems'
require 'getoptlong'

def usage
    puts <<USAGE
== Synopsis

rhc-admin-move: Run cartridge hooks

== Usage

rhc-admin-move OPTIONS

Options:
-l|--rhlogin <rhlogin>
    Red Hat login (RHN or OpenShift login with OpenShift access)
-a|--app     <application>
    Application name (alphanumeric)
--app_uuid   <app_uuid>
    Application uuid
--gear_uuid <gear_uuid>
    Gear uuid to move, if app is a scalable application
--destination_district_uuid <district_uuid>
    Destination district uuid
-i|--target_server_identity <server_identity>
    Target server identity
-p|--node_profile <node_profile>
    Node profile
-t|--timeout
    timeout
--allow_change_district
    Allow the move to be between districts
-h|--help
    Show Usage info
USAGE
end

opts = GetoptLong.new(
    ["--rhlogin",          "-l", GetoptLong::REQUIRED_ARGUMENT],
    ["--app",              "-a", GetoptLong::REQUIRED_ARGUMENT],
    ["--app_uuid",               GetoptLong::REQUIRED_ARGUMENT],
    ["--gear_uuid",        "-g", GetoptLong::REQUIRED_ARGUMENT],
    ["--destination_district_uuid", "-u", GetoptLong::REQUIRED_ARGUMENT],
    ["--target_server_identity", "-i", GetoptLong::REQUIRED_ARGUMENT],
    ["--node_profile",     "-p", GetoptLong::REQUIRED_ARGUMENT],
    ["--timeout",          "-t", GetoptLong::REQUIRED_ARGUMENT],
    ["--allow_change_district",  GetoptLong::NO_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

login    = args["--rhlogin"]
app_name = args["--app"]
app_uuid = args["--app_uuid"]
gear_uuid = args["--gear_uuid"]
target_server_identity = args['--target_server_identity']
destination_district_uuid = args['--destination_district_uuid']
node_profile = args['--node_profile']
allow_change_district = args['--allow_change_district'] ? true : false
timeout  = args['--timeout']

if args["--help"]
  usage
  exit 1
end

unless app_name && login || app_uuid || gear_uuid
    puts "ERROR: Specify app name (-a) and rhlogin (-l) or app uuid (--app_uuid) or gear uuid (--gear_uuid)"
    exit 1
end

if app_uuid and app_name
    puts "ERROR: you can't specify both app uuid and app name or rhlogin"
    exit 1
end

if app_uuid and login
    puts "ERROR: you can't specify both app uuid and rhlogin"
    exit 1
end

require "/var/www/stickshift/broker/config/environment"

# Set the MCollective options
if timeout
  Rails.configuration.rpc_opts[:timeout] = timeout.to_i 
end

app = nil
user = nil
if (app_uuid)
  app  = Application.find_by_uuid(app_uuid)
else 
  if login && app_name
    user = CloudUser.find(login)
    app  = Application.find(user, app_name)
  end
end

gear = nil
if (gear_uuid)
  gapp = nil
  users = CloudUser.find_all(nil)
  users.each do |u|
    u.applications.each do |a|
      a.gears.each { |g|
        if g.uuid == gear.uuid
          gapp = a
          gear = g
          user = u
          break
        end
      }
      break if gapp
    end
    break if gapp
  end
  if gapp.nil? or gear.nil? or user.nil?
    puts "Could not find gear with uuid '#{gear_uuid}'."
    exit 1
  end
  if app and app.uuid!=gapp.uuid
    puts "ERROR: Given gear '#{gear_uuid}' belongs to an app (user: #{gapp.user.login}, name: #{gapp.name}, uuid: #{gapp.uuid})  which is different from the given app (user: #{app.user.login}, name: #{app.name}, uuid: #{app.uuid}) !"
    exit 1
  end
  app = gapp
end

unless app
  puts "ERROR: Application not found: #{app_uuid ? app_uuid : app_name}"
end

url = "http://#{app.name}-#{app.domain.namespace}.#{Rails.configuration.ss[:domain_suffix]}"

puts "URL: #{url}"
puts "Login: #{app.user.login}"
puts "App UUID: #{app.uuid}"

destination_container = nil
destination_container = StickShift::ApplicationContainerProxy.instance(target_server_identity) if target_server_identity

if app.scalable
  if not gear
    puts "ERROR: Application '#{app.name}' is a scalable app. Please provide the gear to move with --gear_uuid option. Available gears for this app are :\n"
    app.gears.each { |g| puts "\t#{g.uuid}\n" }
    exit 1
  end
  reply = app.container.move_gear(app, gear, destination_container, destination_district_uuid, allow_change_district, node_profile)
else
  reply = app.container.move_app(app, destination_container, destination_district_uuid, allow_change_district, node_profile)
end

puts "################# ADDITIONAL DEBUG OUTPUT #################\n#{reply.debugIO.string}\n" unless reply.debugIO.string.empty?
puts "################# ADDITIONAL ERROR OUTPUT #################\n#{reply.errorIO.string}\n" unless reply.errorIO.string.empty?
