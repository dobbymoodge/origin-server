#!/usr/bin/env ruby

require 'rubygems'
require 'getoptlong'
require 'json'

def usage
    puts <<USAGE
== Synopsis

rhc-admin-add-template: Create a new application template

== Usage

rhc-admin-add-template OPTIONS

Options:
-n|--named NAME
  The display name of the template
-d|--descriptor DESCRIPTOR
  The descriptor as YAML or a file path to the descriptor
-g|--git-url GIT_URL
  The URL to the git repository holding the source code for this template
-t|--tags TAGS
  Comma seperated list of tags for the template
-c|--cost GEAR_COST
  The number of gears this template will use
-m|--metadata
  The JSON metadata for this template or a file path to the JSON metadata
-h|--help
    Show Usage info
USAGE
end

opts = GetoptLong.new(
    ["--named",            "-n", GetoptLong::REQUIRED_ARGUMENT],
    ["--descriptor",       "-d", GetoptLong::REQUIRED_ARGUMENT],
    ["--git-url",          "-g", GetoptLong::REQUIRED_ARGUMENT],
    ["--tags",             "-t", GetoptLong::REQUIRED_ARGUMENT],
    ["--cost",             "-c", GetoptLong::REQUIRED_ARGUMENT],
    ["--metadata",         "-m", GetoptLong::REQUIRED_ARGUMENT],    
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

display_name     = args["--named"]
descriptor       = args["--descriptor"]
git_url          = args["--git-url"]
tags             = args["--tags"]
gear_cost        = args["--cost"]
metadata         = args["--metadata"]

begin
  if(File.file?(descriptor))
    descriptor = File.open(descriptor).read
  end
  YAML.load(descriptor)
rescue Exception => e
  print "Invalid descriptor YAML: #{descriptor}\n"
  usage
  exit -100
end

begin
  if(File.file?(metadata))
    metadata = File.open(metadata).read
  end
  metadata = JSON.parse(metadata)
rescue Exception => e
  print "Invalid metadata JSON: #{metadata}\n"
  usage
  exit -100
end
tags = tags.split(",")

require "/var/www/libra/broker/config/environment"

template = ApplicationTemplate.new(display_name,descriptor, git_url,tags,gear_cost,metadata)
template.save
print "Template #{template.uuid} created\n"