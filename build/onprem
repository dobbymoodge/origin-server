#!/usr/bin/env ruby

#####################################################################
# bootstrap our devops/onprem builder

$: << File.expand_path(File.dirname(__FILE__))
require 'dev_tools_onprem_constants'

DEVTOOLS_REPO = File.join('lib', '..', '..', '..', 'origin-dev-tools')

require 'rubygems'
require 'thor'
require 'fileutils'
require File.join(DEVTOOLS_REPO, 'build', 'lib', 'openshift')
require 'pp'
require 'yaml'
require File.join(DEVTOOLS_REPO, 'build', 'builder')

include FileUtils

######################################################################
#
# Define the options available for the onprem builder

module DevOps
  class BuilderPlugin < OpenShift::Builder
    include OpenShift::BuilderHelper

    desc "launch TAG", "Launches and configures the latest devops instance, tagging with TAG"
    method_option :verbose, :type => :boolean, :desc => "Enable verbose logging"
    method_option :base, :type => :boolean, :desc => "Just the base image, no packages or config"
    method_option :node, :type => :boolean, :desc => "Just the node packages, and no config"
    method_option :no_conf, :type => :boolean, :desc => "Just the packages and no config"
    method_option :no_update, :type => :boolean, :desc => "Don't yum update after launch"
    method_option :image_name, :required => false, :desc => "AMI ID or DEVENV name to launch"
    method_option :ssh_config_verifier, :type => :boolean, :desc => "Set as verifier in .ssh/config"
    method_option :instance_type, :required => false, :desc => "Amazon machine type override (default '#{TYPE}')"
    method_option :region, :required => false, :desc => "Amazon region override"
    def launch(tag)
      super #just needed to define the method to override options
    end


    desc "sanity_check NAME", "validates instance can find openshift-origin-broker RPM"
    method_option :tag, :type => :boolean, :desc => "look for NAME as an Amazon tag"
    method_option :region, :required => false, :desc => "Amazon region override"
    def sanity_check(name)
      @@log.level = Logger::ERROR  #hush
      validate_instance(get_host_by_name_or_tag(name, options))
    end

    # override those that are inherited but not ready
    desc "update", "TODO: local build from working repos"
    def update
      puts "TODO: update not yet implemented"
    end
    desc "build NAME BUILD_NUM", "TODO"
    method_option :tag, :type => :boolean, :desc => "NAME is an Amazon tag"
    def build(name, num)
    end
    desc "install_local_client", "TODO"
    def install_local_client
    end
    desc "test TAG", "TODO"
    def test(tag)
    end

    # also expect to inherit from lib/builder:
    #  terminate

    ######################################################################
    #
    # Supporting methods go here

    no_tasks do
      # override how this is chosen for devenv launch
      def choose_filter_for_launch_ami(options)
        return options.base? ? DEVOPS_BASE_WILDCARD : DEVOPS_NODE_WILDCARD
      end

      # launch calls this; not needed yet
      def update_facts_impl(hostname)
      end

      # launch also calls this to perform some kind of validation of instance state
      def validate_instance(hostname, num_tries=2)
        # here we will check that it has access to the yum repos
        puts "Validating instance..."

        validation_output = ssh(hostname, 'yum info openshift-origin-broker --cacheonly', 30)
        if validation_output =~ /Name\s*:\s*openshift-origin-broker/
          puts "Instance is valid."
        else
          puts "ERROR - instance is not valid"
          puts "Node Acceptance Output:"
          puts validation_output
          exit 1
        end
      end

      # launch calls this after the instance is created and "stabilized"
      def post_launch_setup(hostname)
        unless options.no_update?
          puts "Updating instance RPMs..."
          output, rc = ssh(hostname, 'yum update -y', 300, true)
          if rc > 0
            puts "update on launch failed. output:\n#{output}"
            exit 1
          end
        end

        output, rc =
        if options.base?  #nothing more to do, just want the plain AMI
          ["", 0]
        elsif options.node? # install remaining node pkgs, no conf
          puts "Installing final node RPMs..."
          ssh(hostname, 'yum install -y openshift-origin-node', 300, true)
        elsif options.no_conf? # install node/broker pkgs, no conf
          puts "Installing final broker/node RPMs..."
          ssh(hostname, 'yum install -y openshift-origin-{node,broker}', 300, true)
        else # in the "normal" case, we want to install and configure a broker/node
          puts "Installing and configuring broker..."
          ssh(hostname, <<-SHELL, 600, true)
            yum install -y openshift-origin-node openshift-origin-broker
            oo-setup-broker
          SHELL
        end
        if rc > 0
          puts "Launch post-setup failed. output:\n#{output}"
          exit 1
        end
        puts "Launch post-setup complete."
      end

    end # no_tasks end
  end # class end
end # module end




















DevOps::BuilderPlugin.start
