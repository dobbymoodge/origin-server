#!/usr/bin/env ruby

$: << File.expand_path(File.dirname(__FILE__))

require 'rubygems'
require 'thor'
require 'lib/openshift'
require 'pp'

include OpenShift::AWS

class Verifier < Thor
  desc "setup", "configs verification instance based on the latest devenv"
  method_option :name, :required => true, :desc => "The unique verifier name"
  def setup
    # Get the latest devenv image and create a new instance
    conn = connect
    latest = get_amis(conn).sort[-1]
    instance = Instance.create(conn, options[:name], latest)

    private_ip = instance.ssh("facter ipaddress")
    if !private_ip or private_ip.strip.empty?
      puts "EXITING - AMZ instance didn't return ipaddress fact"
      exit 0
    end
    print "Updating the controller to use the AMZ private IP '#{private_ip}'..."
    instance.ssh("sed -i \"s/public_ip.*/public_ip='#{private_ip}'/g\" /etc/libra/node_data.conf")
    instance.ssh("/usr/bin/puppet /usr/libexec/mcollective/update_yaml.pp")
    instance.ssh("service mcollective restart")
    puts "Done"

    print "Verifying fact for public_ip is '#{private_ip}'..."
    instance.ssh("mc-facts public_ip | grep found").split[0] == private_ip
    puts "Done"

    print "Installing the mechanize gem..."
    instance.ssh("yum -y install rubygem-mechanize", 120)
    puts "Done"

    print "Bouncing Apache to pick up the change..."
    instance.ssh("service httpd restart")
    instance.ssh("service libra-site restart")
    puts "Done"

    print "Creating tests directories..."
    instance.ssh("mkdir -p /tmp/rhc/junit")
    puts "Done"

    print "Updating tests to remote instance..."
    `git archive --prefix li/ HEAD --output /tmp/li.tar`
    instance.scp_to("/tmp/li.tar", "~/")
    instance.ssh('rm -rf li; tar -xf li.tar')
    puts "Done"

    print "Validating instance..."
    unless instance.is_valid?
      puts "ERROR - instance is not valid"
      exit 1
    end
    puts "Done"
  end

  desc "test", "runs the tests on a specified verifier instance"
  method_option :name, :required => true, :desc => "The unique verifier name"
  def test
    conn = connect
    instance = Instance.find(conn, options[:name])

    # Run verification tests
    print "Running verification tests..."
    instance.ssh("cucumber --tags @verify --format junit -o /tmp/rhc/junit/ li/tests/", 3600)
    p = $?
    puts "Done"

    print "Checking mcollective status..."
    instance.ssh("service mcollective status")
    puts "Done"

    print "Downloading verification output..."
    `mkdir -p rhc/log`
    instance.scp_from("/tmp/rhc/cucumber*.log", "rhc/log")
    instance.scp_from("/tmp/rhc/failures.log", "rhc/log")
    instance.scp_from("/var/www/libra/site/httpd/logs/access_log", "rhc/log")
    instance.scp_from("/var/www/libra/site/httpd/logs/error_log", "rhc/log")
    instance.scp_from("/var/www/libra/site/log/development.log", "rhc/log")
    instance.scp_from("/var/www/libra/broker/httpd/logs/access_log", "rhc/log")
    instance.scp_from("/var/www/libra/broker/httpd/logs/error_log", "rhc/log")
    instance.scp_from("/var/www/libra/broker/log/development.log", "rhc/log")
    instance.scp_from("/var/log/mcollective.log", "rhc/log")
    instance.scp_from("/var/tmp/mcollective-client.log", "rhc/log")

    `mkdir -p rhc/junit`
    instance.scp_from("/tmp/rhc/junit/*", "rhc/junit")

    puts "Done"

    if p.exitstatus != 0
      puts "ERROR - Non-zero exit code from verification tests (exit: #{p.exitstatus})"
      exit p.exitstatus
    end
  end
end

Verifier.start
