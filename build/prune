#!/usr/bin/env ruby

$: << File.expand_path(File.dirname(__FILE__))

require 'rubygems'
require 'thor'
require 'lib/openshift'
require 'pp'


class Prune < Thor
  include OpenShift::Amazon

  desc "instances", "prune untagged and instances marked terminate"
  def instances
    conn = connect
    conn.regions.each do |region|
      puts "Terminating instances in region=#{region.name}"
      terminate_flagged_instances(region)
      stop_untagged_instances(region)
      terminate_old_verifiers(region)
    end
  end

  desc "amis", "prune old devenv AMIs"
  def amis
    # Get current AMIs
    conn = connect
    conn.regions.each do |region|
      puts "Prunning AMIs in region=#{region.name}"
      AWS.memoize do
        images = get_amis(region)
        # Take the last DevEnv AMI - memoize saves a remote call
        sorted_images = images.to_a.sort_by {|ami| ami.name.split("_")[1].to_i}
  
        # Keep the 10 most recent images
        sorted_images.pop(10)
  
        # Deregister the rest
        puts "Removing AMI's #{sorted_images.pretty_inspect}"
        sorted_images.each {|i| i.deregister}
      end
    end
  end
  desc "security_groups PATTERN", "prune unused security groups matching pattern"
  def security_groups(pattern)
    conn = connect
    conn.regions.each do |region|
      security_groups = region.security_groups.filter('group-name', pattern)
      security_groups.each do |s|
        begin
          puts "Deleting security group #{s.name} in #{region.name}"
          s.delete()
        rescue AWS::EC2::Errors::InvalidGroup::InUse
          puts "security group #{s.name} is in use and cannot be deleted"
        end
      end
    end
  end
end

Prune.start
