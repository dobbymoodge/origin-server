#!/usr/bin/env ruby

$: << File.expand_path(File.dirname(__FILE__))

require 'rubygems'
require 'thor'
require 'fileutils'
require 'lib/openshift'
require 'pp'

include OpenShift::AWS

class DevEnv < Thor
  include Thor::Actions

  desc "build", "build a new devenv AMI"
  method_option :name, :required => true, :desc => "The unique AMI name"
  method_option :terminate, :type => :boolean, :desc => "Terminate the instance when finished"
  method_option :reboot, :type => :boolean, :desc => "Reboot the instance after updating"
  method_option :force, :type => :boolean, :desc => "Build even if no package updates are detected"
  method_option :skip_register, :type => :boolean, :desc => "Do not register AMI"
  def build
    # See if any updates are needed
    unless options[:force]
      pkgs = check_update
      exit_msg "Nothing to update" if pkgs.empty?
    end

    # Establish a new connection
    conn = connect

    # Create a new builder instance
    instance = Instance.create(conn, options[:name])

    begin
      print "Uploading devenv script..."
      script_path = File.expand_path(File.dirname(__FILE__) + "/../misc/devenv/li-devenv.sh")
      instance.scp_to(script_path, "~/")
      puts "Done"

      print "Performing clean install with the latest code..."
      output = instance.ssh('sh li-devenv.sh', 1800)
      puts "Done"

      puts "----------------- Install Output ------------------------"
      puts output
      puts "---------------------------------------------------------"

      print "Updating all packages on the system..."
      instance.ssh('yum update -y', 1800)
      puts "Done"

      if options.reboot?
        print "Rebooting instance to apply new kernel..."
        instance.reboot
        puts "Done"
      end

      # Validate the node installation
      print "Validating instance..."
      unless instance.is_valid?
        puts "ERROR - instance is not valid"
        exit 1
      end
      puts "Done"

      print "Retrieving RPM manifest"
      manifest = instance.ssh('rpm -qa | grep rhc-')
      manifest = manifest.split("\n").sort.join(" / ")
      # Trim down the output to 255 characters
      manifest.gsub!(/rhc-([a-z])/, '\1')
      manifest.gsub!('.el6.noarch', '')
      manifest.gsub!('.el6_1.noarch', '')
      manifest.gsub!('cartridge', 'c-')
      manifest = manifest[0..254]
      puts "Done"

      unless options.skip_register?
        print "Registering AMI..."
        Image.register(conn, instance.amz_id, options[:name], manifest)
        puts "Done"
      end
    ensure
      instance.terminate if options.terminate?
    end
  end

  desc "update", "Update a DevEnv environment with local RPM installations"
  method_option :verbose, :type => :boolean, :desc => "Enable verbose logging"
  def update
    # Warn on uncommitted changes
    `git diff-index --quiet HEAD` 
    puts "WARNING - Uncommitted repository changes" if $? != 0

    remove_dir '/tmp/tito/'

    # Figure out what needs to be built
    packages = `tito report --untagged-commits | grep rhc`
    build_dirs = packages.split("\n").collect do |package|
      if package =~ /rhc-devenv-0/
        "misc/devenv/"
      elsif package =~ /rhc-(cartridge-.*)-0/
        "cartridges/" + $1['cartridge-'.length..-1]
      elsif package =~ /rhc-(.*)-0/
        $1
      else
        "client"
      end
    end

    puts "Changes detected in the following directories: #{build_dirs.pretty_inspect}"

    # Build and install them
    build_dirs.each do |build_dir|
      puts "Building in #{build_dir}"
      inside(File.expand_path("../#{build_dir}", File.dirname(__FILE__))) do
        # Build and install the RPM's locally
        exit 1 unless run('tito build --rpm --test --install', :verbose => options.verbose?)
      end
    end
  end

  desc "sync TAG", "Synchronize a local git repo with a DevEnv instance"
  method_option :branch, :default => "master", :desc => "The branch to synchronize"
  method_option :verbose, :type => :boolean, :desc => "Enable verbose logging"
  def sync(tag)
    # Warn on uncommitted changes
    `git diff-index --quiet HEAD` 
    puts "WARNING - Uncommitted repository changes" if $? != 0

    instance = Instance.find(connect, tag)
    puts "Synchronizing local changes..."
    run("git push root@#{instance.dns}:/root/li #{options[:branch]}:master --tags")
    puts "Done"

    puts "Performing remote install..."
    instance.ssh("git clone li li-working; pushd li-working; build/devenv update; popd; rm -rf li-working", 600)
    puts "Done"
  end
end

DevEnv.start
