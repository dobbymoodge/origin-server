#!/bin/bash
#
# libra         This shell script starts libra services
#
# Author:       Seth Vidal <skvidal@phy.duke.edu>
#               Mike McGrath <mmcgrath@redhat.com>
#
# chkconfig:    345 90 01
#
# description:  Start local libra services
# processname:  NA
#

# source function library
. /etc/rc.d/init.d/functions
#set -x

lockfile=/var/lock/subsys/libra

numparallel=5
timeout=90

# colors, use like: echo "${RED}FAILED!!!${NORM}"
RED=$(echo -e "\033[31m")
GREEN=$(echo -e "\033[32m")
NORM=$(echo -e "\033[0m")

function print_column() {
    sameline="false"
    if [ "$1" == "-n" ]
    then
        shift
        sameline="true"
    fi

    length=$1
    msg=$2
    numspaces=$(( $length - ${#msg} ))

    echo -n "$msg"

    for ix in $(seq $numspaces)
    do
        echo -n ' '
    done
    if [ "$sameline" == "false" ]
    then
        echo
    fi
}

function libra_users() {
    grep ":libra guest:" /etc/passwd | cut -d: -f1
}

function get_mcs_level() {
    # UID=$1

    SETSIZE=1023
    TIER=$SETSIZE

    ORD=$1
    while [ $ORD -gt $(($TIER)) ] ; do
        ORD=$(($ORD - $TIER))
        TIER=$(($TIER - 1))
    done
    TIER=$(($SETSIZE - $TIER))
    echo s0:c$TIER,c$(($ORD + $TIER))
}

#
# Given a username, get the home directory
#
function homedir() {
    # USERNAME=$1
    grep "^$1:" /etc/passwd | cut -d: -f 6
}

function userapps() {
    # USERNAME=$1
    (
        for env_var in `homedir $1`/.env/*_CTL_SCRIPT
        do
            source $env_var
        done
        for cmd in `awk 'BEGIN { for (a in ENVIRON) if (a ~ /DB_CTL_SCRIPT$/) print ENVIRON[a] }'`
        do
            echo "$cmd"
        done
        for cmd in `awk 'BEGIN { for (a in ENVIRON) if ((a ~ /_CTL_SCRIPT$/) && !(a ~ /DB_CTL_SCRIPT$/) && (a != "OPENSHIFT_GEAR_CTL_SCRIPT")) print ENVIRON[a] }'`
        do
            echo "$cmd"
        done
        for cmd in `awk 'BEGIN { for (a in ENVIRON) if (a == "OPENSHIFT_GEAR_CTL_SCRIPT") print ENVIRON[a] }'`
        do
            echo "$cmd"
        done
    )
}

function apptype() {
    # USERNAME=$1
    # APPNAME=$2
    _HOMEDIR=`homedir $1`
    _APP_TYPE=`cat $_HOMEDIR/git/${2}.git/description | cut -d' ' -f 1`
    echo $_APP_TYPE
}

RETVAL=0
GROUP_RETVAL=0

# Disable IPV6 - SELinux Friendly
if [ -f /proc/sys/net/ipv6/conf/all/disable_ipv6 ]
then
    echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
fi

if [ -f /proc/sys/net/ipv6/conf/default/disable_ipv6 ]
then
    echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
fi

return_output() {
    if [ "$1" ]; then
	echo >> "$1" 2>&1
	cat "$1" | sed -e "s#\[  OK  \]#\[  ${GREEN}OK${NORM}  \]#" -e "s#\[FAILED\]#\[${RED}FAILED${NORM}\]#"
	rm -f "$1"
    fi
}

return_terminate() {
    print_column -n 59 "Timeout $1..."
    echo "[${RED}FAILED${NORM}]"
    exit 1
}

startuser() {
    # USERNAME=$1
    local OUTFILE=$(mktemp /var/run/stickshift/stickshift_init-startuser-$1.XXXXXXXX)
    trap "return_terminate $1 $OUTFILE" USR1
    echo "Starting $1..." >> $OUTFILE 2>&1
    ( for APPNAME in `userapps $1`
      do
          startapp $1 $APPNAME >> $OUTFILE 2>&1
      done ) &
    wait
    return_output $OUTFILE
}

stopuser() {
    # USERNAME=$1
    local OUTFILE=$(mktemp /var/run/stickshift/stickshift_init-stopuser-$1.XXXXXXXX)
    trap "return_terminate $1 $OUTFILE" USR1
    echo "Stopping $1..." >> $OUTFILE 2>&1
    ( for APPNAME in `userapps $1 | tac`
      do
          stopapp $1 $APPNAME >> $OUTFILE 2>&1
      done ) &
    wait
    return_output $OUTFILE
}

setuppam(){
    uuid=$1
    if [ ! -f "/etc/security/limits.d/84-${uuid}.conf" ]
    then
        echo "found"
        /usr/libexec/stickshift/lib/express/setup_pam_fs_limits.sh $uuid
    fi
}

startapp() {
    # USERNAME=$1
    # APPSCRIPT=$2
    uid=$(id -u "$1")
    setuppam $1
    mcs_level=`get_mcs_level $uid`
    source /var/lib/stickshift/$1/.env/OPENSHIFT_RUN_DIR
    if [ -f "${OPENSHIFT_RUN_DIR}/stop_lock" ]
    then
        echo "$1 is locked"
    else
        print_column -n 59 "    $(basename $2)"
        local OUTPUT=$(daemon --user="$1" --pidfile=httpd_$1-$(basename $2) runcon -t libra_t -l $mcs_level $2 start)
        RETVAL=$?
        if [ $RETVAL -eq 0 ]
        then
            echo_success
        else
            GROUP_RETVAL=$(($GROUP_RETVAL+1))
            echo_failure
            echo
            echo $OUTPUT
            echo
        fi
        echo
    fi
    unset OPENSHIFT_RUN_DIR
}

stopapp() {
    # USERNAME=$1
    # APPSCRIPT=$2
    uid=$(id -u "$1")
    mcs_level=`get_mcs_level $uid`
    print_column -n 59 "    $(basename $2)"
    local OUTPUT=$(daemon --user="$1" --pidfile=httpd_$1-$(basename $2) runcon -t libra_t -l $mcs_level $2 stop)
    RETVAL=$?
    if [ $RETVAL -eq 0 ]
    then
        echo_success
    else
        GROUP_RETVAL=$(($GROUP_RETVAL+1))
        echo_failure
        echo
        echo $OUTPUT
        echo
    fi
    echo
}

start() {
    echo "Starting Libra Services: "
    echo

    for uuid in `libra_users`
    do
        /bin/egrep -q -v "idle" /var/lib/stickshift/$uuid/app-root/runtime/.state && echo $uuid || echo "Skipping $uuid" 1>&2
    done | xargs -I{} -n 1 -P $numparallel /usr/bin/timeout -s USR1 $timeout /etc/init.d/libra startuser {}

    echo -n "All Libra services started"
    [ $GROUP_RETVAL -eq 0 ] && touch ${lockfile}
    [ $GROUP_RETVAL -eq 0 ] && success || failure
    echo
    return $GROUP_RETVAL
}

stop() {
    echo "Stopping Libra Services: "
    echo

    for uuid in `libra_users`
    do
        /bin/egrep -q -v "stopped|idle" /var/lib/stickshift/$uuid/app-root/runtime/.state && echo $uuid || echo "Skipping $uuid" 1>&2
    done | xargs -I{} -n 1 -P $numparallel /usr/bin/timeout -s USR1 $timeout /etc/init.d/libra stopuser {}

    echo -n "All Libra services stopped"
    [ $GROUP_RETVAL -eq 0 ] && touch ${lockfile}
    [ $GROUP_RETVAL -eq 0 ] && success || failure
    echo
    return $GROUP_RETVAL
}

restart() {
    # This restarts each app individually. DO NOT change it to simply call stop() and start()
    echo "Restarting Libra Services: "
    echo

    for uuid in `libra_users`
    do
        /bin/egrep -q -v "idle|stopped" /var/lib/stickshift/$uuid/app-root/runtime/.state && echo $uuid || echo "Skipping $uuid" 1>&2
    done | xargs -I{} -n 1 -P $numparallel /usr/bin/timeout -s USR1 $timeout /etc/init.d/libra restartuser {}

    echo -n "All Libra services restarted"
    [ $GROUP_RETVAL -eq 0 ] && touch ${lockfile}
    [ $GROUP_RETVAL -eq 0 ] && success || failure
    echo
    return $GROUP_RETVAL
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart|force-reload)
    restart
    ;;
  reload)
    ;;
  condrestart)
    [ -f "$lockfile" ] && restart
    ;;
  status)
    echo "Checking Libra Services: "

    # check for $1 (user) and $2 (appname)
    # This won't scale forever, but works fine in the '100 or so' range
    for ctl_script in `/bin/find /var/lib/stickshift/ -maxdepth 3 -mindepth 3 -type f -name "*_ctl.sh"`
    do
        script_name=$(basename $ctl_script)
        run_as=$( echo $ctl_script | awk -F/ '{print $5}')
        echo -n "    Checking http for ${script_name%_ctl.sh}"
        uid=$(id -u "$run_as")
        mcs_level=`get_mcs_level $uid`
        daemon --user=$run_as --pidfile=httpd_${script_name} runcon -t libra_t -l $mcs_level $ctl_script status
        RETVAL=$?
        echo
        if [ $RETVAL -eq 0 ]
        then
            echo_success
        else
            GROUP_RETVAL=$(($GROUP_RETVAL+1))
            echo_failure
        fi
    done
    echo
    #return $GROUP_RETVAL
    ;;

  startuser)
    startuser $2
    ;;

  stopuser)
    stopuser $2
    ;;

  restartuser)
    stopuser $2
    startuser $2
    ;;

  startapp)
    startapp $2 $3 
    ;;

  stopapp)
    stopapp $2 $3
    ;;

  restartapp)
    stopapp $2 $3
    startapp $2 $3
    ;;

  *)
    echo "Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
    exit 1
esac

exit $RETVAL
