#!/bin/bash
#
# libra         This shell script starts libra services
#
# Author:       Seth Vidal <skvidal@phy.duke.edu>
#               Mike McGrath <mmcgrath@redhat.com>
#
# chkconfig:    345 90 01
#
# description:  Start local libra services
# processname:  NA
#

# source function library
. /etc/rc.d/init.d/functions
. /usr/libexec/openshift/cartridges/abstract/info/lib/util 

lockfile=/var/lock/subsys/libra
logfile=/var/log/libra-async-start.log

numparallel=5
timeout=90

# colors, use like: echo "${RED}FAILED!!!${NORM}"
RED=$(echo -e "\033[31m")
GREEN=$(echo -e "\033[32m")
NORM=$(echo -e "\033[0m")

function print_column() {
    sameline="false"
    if [ "$1" == "-n" ]
    then
        shift
        sameline="true"
    fi

    length=$1
    msg=$2
    numspaces=$(( $length - ${#msg} ))

    echo -n "$msg"

    for ix in $(seq $numspaces)
    do
        echo -n ' '
    done
    if [ "$sameline" == "false" ]
    then
        echo
    fi
}

function libra_users() {
    grep ":libra guest:" /etc/passwd | cut -d: -f1
}

function get_mcs_level() {
    # UID=$1

    SETSIZE=1023
    TIER=$SETSIZE

    ORD=$1
    while [ $ORD -gt $(($TIER)) ]
    do
        ORD=$(($ORD - $TIER))
        TIER=$(($TIER - 1))
    done
    TIER=$(($SETSIZE - $TIER))
    echo s0:c$TIER,c$(($ORD + $TIER))
}

#
# Given a username, get the home directory
#
function homedir() {
    # USERNAME=$1
    grep "^$1:" /etc/passwd | cut -d: -f 6
}

RETVAL=0
GROUP_RETVAL=0

# Disable IPV6 - SELinux Friendly
if [ -f /proc/sys/net/ipv6/conf/all/disable_ipv6 ]
then
    echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
fi

if [ -f /proc/sys/net/ipv6/conf/default/disable_ipv6 ]
then
    echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
fi

function _log_message() {
    faclvl=$1
    shift
    [ -z "$@" ]  &&  return 0
    /usr/bin/logger -i -s -t "libra-service" -p $faclvl "$@"
}

function log_info() {
    _log_message user.info "$@"
}

function log_error() {
    _log_message user.err "$@"
}

function return_output() {
    if [ "$1" ]
    then
        echo >> "$1" 2>&1
        cat "$1" | sed -e "s#\[  OK  \]#\[  ${GREEN}OK${NORM}  \]#" -e "s#\[FAILED\]#\[${RED}FAILED${NORM}\]#"
        rm -f "$1"
    fi
}

function return_terminate() {
    log_error "Timeout $1 $2"
    print_column -n 59 "Timeout $2..."
    echo "[${RED}FAILED${NORM}]"
    exit 1
}

function startuser() {
    # USERNAME=$1
    local OUTFILE=$(mktemp /var/run/stickshift/stickshift_init-startuser-$1.XXXXXXXX)
    trap "return_terminate startuser $1 $OUTFILE" USR1
    log_info "Starting $1..."
    echo "Starting $1..." >> $OUTFILE 2>&1
    (
      APP_HOME=/var/lib/openshift/$1
      for cartridge in $(get_start_order)
      do
          startapp $1 $cartridge >> $OUTFILE 2>&1
      done
    ) &
    wait
    log_info "Started $1"
    return_output $OUTFILE
}

function stopuser() {
    # USERNAME=$1
    local OUTFILE=$(mktemp /var/run/stickshift/stickshift_init-stopuser-$1.XXXXXXXX)
    trap "return_terminate stopuser $1 $OUTFILE" USR1
    log_info "Stopping $1..."
    echo "Stopping $1..." >> $OUTFILE 2>&1
    (
      APP_HOME=/var/lib/openshift/$1
      for cartridge in $(get_stop_order)
      do
          stopapp $1 $cartridge >> $OUTFILE 2>&1
      done
    ) &
    wait
    log_info "Stopped $1"
    return_output $OUTFILE
}

function setuppam() {
    uuid=$1
    if [ ! -f "/etc/security/limits.d/84-${uuid}.conf" ]
    then
        echo "found"
        /usr/libexec/openshift/lib/express/setup_pam_fs_limits.sh $uuid
    fi
}

function startapp() {
    # USERNAME=$1
    # CARTRIDGE=$2
    uid=$(id -u "$1")
    setuppam $1
    mcs_level=$(get_mcs_level $uid)

    locks=$(ls /var/lib/openshift/$1/*/run/stop_lock 2>/dev/null |grep -ve 'app-root|git' |wc -l)
    if [ "$locks" -gt 0 ]
    then
        echo "$1 is locked"
    else
        print_column -n 59 "    $2"

        script_name=/usr/libexec/openshift/cartridges/$2/info/bin/app_ctl.sh
        local OUTPUT=$(daemon --user="$1" --pidfile=httpd_$1-$2 runcon -t libra_t -l $mcs_level $script_name start)
        RETVAL=$?
        if [ $RETVAL -eq 0 ]
        then
            echo_success
        else
            GROUP_RETVAL=$(($GROUP_RETVAL+1))
            echo_failure
            echo
            echo $OUTPUT
            echo
        fi
        echo
    fi
}

function stopapp() {
    # USERNAME=$1
    # CARTRIDGE=$2
    uid=$(id -u "$1")
    mcs_level=$(get_mcs_level $uid)
    print_column -n 59 "    $2"
    script_name=/usr/libexec/openshift/cartridges/$2/info/bin/app_ctl.sh
    local OUTPUT=$(daemon --user="$1" --pidfile=httpd_$1-$2 runcon -t libra_t -l $mcs_level $script_name stop)
    RETVAL=$?
    if [ $RETVAL -eq 0 ]
    then
        echo_success
    else
        GROUP_RETVAL=$(($GROUP_RETVAL+1))
        echo_failure
        echo
        echo $OUTPUT
        echo
    fi
    echo
}

function start_backgrounded() {
    log_info "Starting Libra services in the background ..."
    nohup /etc/init.d/libra waited-start > $logfile 2>&1 &
    bgpid=$!
    log_info "Background start initiated - process id = $bgpid"
    log_info "Check $logfile for more details."
    echo
    echo "Note: In the future, if you wish to start the libra services in the"
    echo "      foreground (waited), use:  service libra waited-start"
    echo
}

function waited_start() {
    log_info "Starting Libra services: "
    echo

    for uuid in $(libra_users)
    do
        /bin/egrep -q -v "idle" /var/lib/openshift/$uuid/app-root/runtime/.state && echo $uuid || echo "Skipping $uuid" 1>&2
    done | xargs -I{} -n 1 -P $numparallel /usr/bin/timeout -s USR1 $timeout /etc/init.d/libra startuser {}

    log_info "All Libra services started"
    [ $GROUP_RETVAL -eq 0 ] && touch ${lockfile}
    [ $GROUP_RETVAL -eq 0 ] && success || failure
    echo
    return $GROUP_RETVAL
}

function stop() {
    log_info "Stopping Libra Services: "
    echo

    for uuid in $(libra_users)
    do
        /bin/egrep -q -v "stopped|idle" /var/lib/openshift/$uuid/app-root/runtime/.state && echo $uuid || echo "Skipping $uuid" 1>&2
    done | xargs -I{} -n 1 -P $numparallel /usr/bin/timeout -s USR1 $timeout /etc/init.d/libra stopuser {}

    log_info "All Libra services stopped"
    [ $GROUP_RETVAL -eq 0 ] && touch ${lockfile}
    [ $GROUP_RETVAL -eq 0 ] && success || failure
    echo
    return $GROUP_RETVAL
}

function restart() {
    # This restarts each app individually. DO NOT change it to simply call stop() and start()
    log_info "Restarting Libra Services: "
    echo

    for uuid in $(libra_users)
    do
        /bin/egrep -q -v "idle|stopped" /var/lib/openshift/$uuid/app-root/runtime/.state && echo $uuid || echo "Skipping $uuid" 1>&2
    done | xargs -I{} -n 1 -P $numparallel /usr/bin/timeout -s USR1 $timeout /etc/init.d/libra restartuser {}

    log_info "All Libra services restarted"
    [ $GROUP_RETVAL -eq 0 ] && touch ${lockfile}
    [ $GROUP_RETVAL -eq 0 ] && success || failure
    echo
    return $GROUP_RETVAL
}

case "$1" in
  start)
    start_backgrounded
    ;;
  stop)
    stop
    ;;
  restart|force-reload)
    restart
    ;;
  reload)
    ;;
  condrestart)
    [ -f "$lockfile" ] && restart
    ;;
  waited-start)
    waited_start
    ;;
  status)
    echo "Checking Libra Services: "

    for gear in $(grep ':libra guest:' /etc/passwd | cut -d: -f6)
    do
        for cartridge in $(ls -d $gear/* |grep -v 'app-root|git')
        do
            cartridge=$(basename $cartridge)
            script_name=/usr/libexec/openshift/cartridges/$cartridge/info/bin/app_ctl.sh
            source $gear/.env/OPENSHIFT_APP_NAME
            echo -n "    Checking http for $OPENSHIFT_APP_NAME"
            runas=$(basename $gear)
            uid=$(id -u "$run_as")
            mcs_level=$(get_mcs_level $uid)
            daemon --user=$run_as --pidfile=httpd_$runas_$cartridge runcon -t libra_t -l $mcs_level $script_name status
            RETVAL=$?
            echo
            if [ $RETVAL -eq 0 ]
            then
                echo_success
            else
                GROUP_RETVAL=$(($GROUP_RETVAL+1))
                echo_failure
            fi
        done
    done
    echo
    #return $GROUP_RETVAL
    ;;

  startuser)
    startuser $2
    ;;

  stopuser)
    stopuser $2
    ;;

  restartuser)
    stopuser $2
    startuser $2
    ;;

  startapp)
    startapp $2 $3 
    ;;

  stopapp)
    stopapp $2 $3
    ;;

  restartapp)
    stopapp $2 $3
    startapp $2 $3
    ;;

  *)
    echo "Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
    exit 1
esac

exit $RETVAL
