#!/bin/sh
#
# libra-tc This shell script initializes libra traffic control for users
#
# Author:       Mark lamourine <markllama@redhat.com>
# Liberally excerpted from an example by Scott Seong
#   http://www.topwebhosts.org/tools/traffic-control.php
#
# chkconfig:    345 7 93
#
# description:  Set Libra traffic control limits
# processname:  NA
#

# source function library
. /etc/rc.d/init.d/functions

# import libra cgroups settings
if [ -f /etc/sysconfig/libra-cgroups ]
then
    . /etc/sysconfig/libra-cgroups
fi

lockfile=/var/lock/subsys/libra-cgroups

if [ -f /etc/libra/node.conf ]
then
    . /etc/libra/node.conf
fi

if [ -f /etc/libra/resource_limits.conf ]
then
    . /etc/libra/resource_limits.conf
fi

# ============================================================================
#  Functions for setting the net class
# ============================================================================

# Get a user's UID
function uid() {
    grep -e "^$1:" /etc/passwd | cut -d: -f3
}

function netclass() {
    # major = 1, minor = UID 
    printf "%04x" $1
}

# List the libra guest users
#
libra_users() {
    grep 'libra guest' /etc/passwd | cut -d: -f1
}

#
#  tc uses the following units when passed as a parameter.
#  kbps: Kilobytes per second 
#  mbps: Megabytes per second
#  kbit: Kilobits per second
#  mbit: Megabits per second
#  bps: Bytes per second 
#       Amounts of data can be specified in:
#       kb or k: Kilobytes
#       mb or m: Megabytes
#       mbit: Megabits
#       kbit: Kilobits
#  To get the byte figure from bits, divide the number by 8 bit
#

# Create a Libra parent qdesc and limit it to a large percentage of the
# bandwidth of the interface (leaving some for the OS)
# 
# Then create for each user a qdesc and limit it to a small fraction of
# the total bandwidth
#
# Name of the traffic control command.
TC=/sbin/tc

# The network interface we're planning on limiting bandwidth.
tc_if=${tc_if:="eth0"}             # Interface

# total bandwidth = 10240mbit
# libra bandwidth = 80% ~= 8000mbit
# max apps = 400
# bandwidth/app = 200mbit
# oversubscribe=??
tc_max_libra=${tc_max_libra:=800}
tc_user_share=${tc_user_share:=2}
tc_oversubscribe=${tc_oversubscribe:=10}
OVERSUBSCRIBE=$(expr $tc_user_share \* $tc_oversubscribe)
tc_user_limit=${tc_user_limit:=$OVERSUBSCRIBE}
# tc quantum is rate / r2q
# r2q is 10 by default
# r2q will generate a warning if 1500 > quantum > 60000 
tc_rate_to_quantum_ratio=200

start() {

# We'll use Hierarchical Token Bucket (HTB) to shape bandwidth.
# For detailed configuration options, please consult Linux man
# page.

# The first line creates the root qdisc
    ${NOOP} $TC qdisc add dev $tc_if root handle 1: htb r2q $tc_rate_to_quantum_ratio

# This line creates a container for tagged Libra traffic
    # Since user classes start at 1:1
    ${NOOP} $TC class add dev $tc_if parent 1: classid 1:1 htb rate ${tc_max_libra}mbit

# for each user
    for USERNAME in `libra_users`
    do
	startuser $USERNAME
    done

    # add the filter line to put cgroup tagged traffic into the correct class
    ${NOOP} $TC filter add dev $tc_if parent 1: protocol ip prio 10 handle 1: cgroup
}

stop() {

# Stop the bandwidth shaping.
    ${NOOP} $TC qdisc del dev $tc_if root

}

startuser() {
    # USERNAME=$1
    echo "Starting user $1"
    USERID=`uid $1`
    NETCLASS=`netclass $USERID`
    ${NOOP} $TC class add dev $tc_if parent 1:1 classid 1:$NETCLASS htb rate ${tc_user_share}mbit ceil ${tc_user_limit}mbit

    ${NOOP} $TC qdisc add dev $tc_if parent 1:$NETCLASS handle ${NETCLASS}: htb r2q $tc_rate_to_quantum_ratio default 1
    ${NOOP} $TC class add dev $tc_if parent ${NETCLASS}: classid ${NETCLASS}:1 htb rate ${tc_user_share}mbit ceil ${tc_user_limit}mbit
    ${NOOP} $TC class add dev $tc_if parent ${NETCLASS}: classid ${NETCLASS}:2 htb rate 128kbit ceil 256kbit
    ${NOOP} $TC class add dev $tc_if parent ${NETCLASS}: classid ${NETCLASS}:3 htb rate  12kbit ceil  24kbit
    ${NOOP} $TC filter add dev $tc_if parent ${NETCLASS}: protocol ip prio 10 u32 match ip dport 587 0xffff flowid ${NETCLASS}:2
    ${NOOP} $TC filter add dev $tc_if parent ${NETCLASS}: protocol ip prio 10 u32 match ip dport  25 0xffff flowid ${NETCLASS}:3
    ${NOOP} $TC filter add dev $tc_if parent ${NETCLASS}: protocol ip prio 10 u32 match ip dport 465 0xffff flowid ${NETCLASS}:3
}

stopuser() {
    # USERNAME=$1

    echo "Stopping user $1"
    USERID=`uid $1`
    NETCLASS=`netclass $USERID`
    ${NOOP} $TC class del dev $tc_if parent 1:1 classid 1:$NETCLASS
}


restart() {

    # Self-explanatory.
    stop
    sleep 1
    start

}

status() {
    # USERNAME=$1

    if $TC qdisc show dev eth0 | grep "qdisc htb 1:" > /dev/null
    then
        # Display status of traffic control status.
	if [ -z "$1" ]
	then
	    $TC -s qdisc show dev $tc_if
	    $TC -s class show dev $tc_if
	else
	    USERID=`uid $1`
	    NETCLASS=`netclass $USERID`
	    if test `$TC -s class show dev $tc_if classid 1:${NETCLASS} |  wc -l` -gt 0
            then
		$TC -s class show dev $tc_if classid 1:${NETCLASS}
	    else
		echo "tc not configured for user $1"
		exit 1
	    fi
	fi
	exit 0
    else
	echo "no htb qdisc on $tc_if" >&2
	exit 1
    fi

}

case "$1" in

    start)

	echo -n "Starting bandwidth shaping: "
	start
	echo "done"
	;;

    stop)

	echo -n "Stopping bandwidth shaping: "
	stop
	echo "done"
	;;

    startuser)
	echo -n "Starting bandwidth shaping for user $2"
	startuser $2
	;;

    stopuser)
	echo -n "Stopping bandwidth shaping for user $2"
	stopuser $2
	;;

    restart)

	echo -n "Restarting bandwidth shaping: "
	restart
	echo "done"
	;;

    show|status)

	echo "Bandwidth shaping status for $tc_if:"
	status $2
	echo ""
	;;
    
    *)

	pwd=$(pwd)
	echo "Usage: $0 {start|stop|restart|status [username]|startuser <username>|stopuser <username>}"
	;;

esac

exit 0
