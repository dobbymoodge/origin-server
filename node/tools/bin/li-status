#!/usr/bin/ruby
#============================================================================
# Author: Mark Lamourine <markllama@redhat.com>
# Copyright: 2011
# License: GNU Public License V2
# ===========================================================================
# survey the status of the Libra services on a node
#   Access Controls
#    SELinux
#   Messaging
#     qpid
#     mcollective
#   Resource Control
#     cgconfig
#     cgred
#     libra-cgroups
#     libra-tc
#     quotas
#   Service
#     httpd
#     user applications
#
# ===========================================================================

# ---------------------------------------------------------------------------
#  Initialize Logging
# ---------------------------------------------------------------------------
require 'logger'

log = Logger.new(STDOUT)
log.level = Logger::WARN
log.formatter = proc { |severity, datetime, programname, msg|
  "#{severity}: #{msg}\n"
}

# ----------------------------------------------------------------------------
# Define CLI/Environment options and defaults
# ----------------------------------------------------------------------------
require 'getoptlong'

#
# standard options and their default values
#
standard_options = 
  [
   ["--help", "-h", GetoptLong::NO_ARGUMENT], 
   ["--debug", "-d", GetoptLong::NO_ARGUMENT],
   ["--verbose", "-v", GetoptLong::NO_ARGUMENT],
   ["--dryrun", "-n", GetoptLong::NO_ARGUMENT]
  ]

standard_defaults = {
  # standard defaults
  :help => false,
  :debug => false,
  :verbose => false,
  :dryrun => false,
}

#
# Add your options here
#
app_options =
  [
   ["--format", "-f", GetoptLong::REQUIRED_ARGUMENT]
  ]

app_defaults = {
  :format => "text"
}

#
# Combine the standard and application options and defaults
#

all_options = standard_options + app_options
defaults = standard_defaults.merge app_defaults

#
# Process the CLI and environment options
#
opts = {} 
optparser = GetoptLong.new(*all_options)
optparser.each {|key, value| opts[key[2..-1].to_sym] = value }

# Apply environment variable values or defaults as needed
defaults.each do |key, dvalue|
  #if no matching value in opts, set the default
  if opts[key] == nil
    # check for ENV to supersede the default as well
    if ENV[key.to_s.upcase] != nil
      opts[key] = ENV[key.to_s.upcase]
    else
      opts[key] = dvalue
    end
  end
end

# Adjust logging for user input
log.level = Logger::DEBUG if opts[:debug] 


# =============================================================================
#
# Application logic - Add the guts here
#
# =============================================================================
require "libra/node"

# =============================================================================
# =============================================================================
#                                   MAIN
# =============================================================================
# =============================================================================
status = Libra::Node::Status.new :all
status.check

case opts[:format]
when 'text'
  puts status
when 'json'
  puts status.to_json
when 'xml'
  puts status.to_xml
else
  puts "invalid format '#{opts[:format]}, (text|json|xml)"
end
