#!/bin/bash

# Copyright © 2010 Mike McGrath All rights reserved
# Copyright © 2010 Red Hat, Inc. All rights reserved

# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.

# Start the application httpd instance

# Exit on any errors
set -e

function print_help {
    echo "Usage: $0 app-name namespace uuid [target]"
    echo "Start a running application"

    echo "$0 $@" | logger -p local0.notice -t libra_httpd_start
    exit 1
}

while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done


[ $# -eq 3 -o $# -eq 4 ] || print_help

CART_DIR=/usr/libexec/li/cartridges
source ${CART_DIR}/abstract/info/lib/util

setup_basic_hook "$1" $2 $3

uuid=$3
uid=`id -u $uuid`
target="$4"

PORT_BEGIN=35531
PORTS_PER_USER=5
UID_BEGIN=500
# UID_END=12700   # Too large for port numbers
UID_END=6500

UAPP_BASE="127.0.0.0"
UAPP_NM="25"

function decode_ip {
  ret=0
  quad=16777216
  for byt in `echo "$1" | sed -e 's/\./ /g'`; do
    ret=$(($ret + $(($byt * $quad))))
    quad=$(($quad/256))
  done

  echo $ret
}

function uid_to_ip {
  # This works on IPv4.  Switch to a real language
  # and use inet_ntop/inet_pton for ipv6.
  block=$((2**$((32 - $UAPP_NM))))
  start=`decode_ip $UAPP_BASE`

  a=$(($1*$block+$start))
  h1=$(($a/16777216))
  h2=$(($(($a%16777216))/65536))
  h3=$(($(($a%65536))/256))
  h4=$(($a%256))

  echo "${h1}.${h2}.${h3}.${h4}"
}

function ip_in_uid_range {
  uid=$1
  ip=$2

  first_addr=$(decode_ip $(uid_to_ip $uid))
  last_addr=$(($first_addr+2**$((32 - $UAPP_NM))-1))
  addr=$(decode_ip $ip)

  if [ $addr -ge $first_addr -a $addr -le $last_addr ]; then
    return 0
  else
    return 1
  fi
}

function uid_to_portbegin {
  echo $(($(($(($1-$UID_BEGIN))*$PORTS_PER_USER))+$PORT_BEGIN))
}

function uid_to_portend {
  pbegin=`uid_to_portbegin $1`
  echo $(( $pbegin + $PORTS_PER_USER - 1 ))
}


function find_next_port {
  uuid=$1
  target=$2
  uid=`id -u $uuid`

  source "/var/lib/libra/${uuid}/.env/OPENSHIFT_INTERNAL_IP"
  source "/var/lib/libra/${uuid}/.env/OPENSHIFT_INTERNAL_PORT"
  source "/var/lib/libra/${uuid}/.env/OPENSHIFT_APP_DNS"

  for port_file in `/bin/ls /var/lib/libra/${uuid}/.env/OPENSHIFT_*_PUB_PORT 2> /dev/null`
  do
    source "$port_file"
  done


  if [ -z "$target" ]; then
    target="$OPENSHIFT_INTERNAL_IP:$OPENSHIFT_INTERNAL_PORT"
  elif ! ip_in_uid_range $uid $(echo $target |cut -f 1 -d :); then
    client_error "Target not allowed: $target"
    exit 8
  fi

  first_port=$(uid_to_portbegin $uid)
  last_port=$(uid_to_portend $uid)

  for proxy_port in $(seq $first_port $last_port)
  do
    if [ "$target" == "${OPENSHIFT_PUB_PORT[$proxy_port]}" ]
    then
      client_error "$target is already exposed on $OPENSHIFT_APP_DNS:$proxy_port"
      exit 8
    fi
  done

  for proxy_port in $(seq $first_port $last_port)
  do
    if [ -z "${OPENSHIFT_PUB_PORT[$proxy_port]}" ]
    then
      service libra-proxy setproxy $proxy_port "$target"
      client_message "Exposing port: $OPENSHIFT_APP_DNS:$proxy_port"
      echo "OPENSHIFT_PUB_PORT[$proxy_port]='$target'" > $APP_HOME/.env/OPENSHIFT_${proxy_port}_PUB_PORT
      echo "export OPENSHIFT_PUB_PORT" >> $APP_HOME/.env/OPENSHIFT_${proxy_port}_PUB_PORT
      exit 0
    fi
  done
  client_error "All ports are taken, cannot add more"
  exit 67
}


find_next_port $uuid $target
