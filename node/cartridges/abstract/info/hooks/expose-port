#!/bin/bash

# Copyright © 2010 Mike McGrath All rights reserved
# Copyright © 2010 Red Hat, Inc. All rights reserved

# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.

# Start the application httpd instance

# Exit on any errors
set -e

function print_help {
    echo "Usage: $0 app-name namespace uuid"
    echo "Start a running application"

    echo "$0 $@" | logger -p local0.notice -t libra_httpd_start
    exit 1
}

while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done


[ $# -eq 3 ] || print_help

CART_DIR=/usr/libexec/li/cartridges
source ${CART_DIR}/abstract/info/lib/util

setup_basic_hook "$1" $2 $3

uuid=$3
uid=`id -u $uuid`
PORT_BEGIN=35531
PORTS_PER_USER=5
UID_BEGIN=500
# UID_END=12700   # Too large for port numbers
UID_END=6500

function uid_to_portbegin {
  echo $(($(($(($1-$UID_BEGIN))*$PORTS_PER_USER))+$PORT_BEGIN))
}

function uid_to_portend {
  pbegin=`uid_to_portbegin $1`
  echo $(( $pbegin + $PORTS_PER_USER - 1 ))
}

function check_dup {
    uuid="$1"
    new_ip_port=$2 # in the form of "127.0.5.1:8080"
    for port_file in `/bin/ls /var/lib/libra/${uuid}/.env/OPENSHIFT_*_PUB_PORT 2> /dev/null`
    do
        source "$port_file"
    done
    [ -z $OPENSHIFT_PUB_PORT ] || exit 0
    for port_offset in `seq 0 $(($PORTS_PER_USER - 1 ))`
    do
        proxy_port=$(($first_port + $port_offset))
        if [ "$new_ip_port" == "${OPENSHIFT_PUB_PORT[$proxy_port]}" ]
        then
            client_error "$new_ip_port already taken!"
            exit 8
        fi
    done
}

function find_next_port {
    uuid=$1
    uid=`id -u $uuid`

    source "/var/lib/libra/${uuid}/.env/OPENSHIFT_INTERNAL_IP"
    source "/var/lib/libra/${uuid}/.env/OPENSHIFT_INTERNAL_PORT"

    first_port=$(uid_to_portbegin $uid)
    last_port=$(uid_to_portend $uid)

    for port_file in `/bin/ls /var/lib/libra/${uuid}/.env/OPENSHIFT_*_PUB_PORT 2> /dev/null`
    do
        source "$port_file"
    done
    [ -z $OPENSHIFT_PUB_PORT ] || exit 0
    for port_offset in `seq 0 $(($PORTS_PER_USER - 1 ))`
    do
        proxy_port=$(($first_port + $port_offset))
        if [ -z "${OPENSHIFT_PUB_PORT[$proxy_port]}" ]
        then
            check_dup $uuid "$OPENSHIFT_INTERNAL_IP:$OPENSHIFT_INTERNAL_PORT"
            service libra-proxy setproxy $proxy_port $OPENSHIFT_INTERNAL_IP:$OPENSHIFT_INTERNAL_PORT
            client_message "Exposing port: $proxy_port"
            echo "OPENSHIFT_PUB_PORT[$proxy_port]='$OPENSHIFT_INTERNAL_IP:$OPENSHIFT_INTERNAL_PORT'" > $APP_HOME/.env/OPENSHIFT_${proxy_port}_PUB_PORT
            echo "export OPENSHIFT_PUB_PORT" >> $APP_HOME/.env/OPENSHIFT_${proxy_port}_PUB_PORT
            exit 0
        fi
    done
    client_error "All ports are taken, cannot add more"
    exit 67
}


find_next_port $uuid
