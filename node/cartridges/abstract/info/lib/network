#!/bin/bash

[ ! -z "$LI_CONTROLLER_LIB_NETWORK" ] && return 0
LI_CONTROLLER_LIB_NETWORK=true

# create an IP address as an 32 bit unsigned integer
function address() {
    # uid=$1
    # final=$2
    printf "0x%08x\n" "$((0x7f000000 + $(($1<<7)) + $2))"
}

# convert an integer IP address to dotted quad format
function dotted_quad() {
    # ADDR=$1
    q3=$(($1 >> 24))
    q2=$(($1 >> 16 & 0xff))
    q1=$(($1 >> 8 & 0xff))
    q0=$(($1 & 0xff))
    echo "$q3.$q2.$q1.$q0"
}

function find_open_ip {
    uid=$1
    uuid=$2
    for host_ip in `seq 1 127`
    do
        a=`address $uid $host_ip`
        new_ip=`dotted_quad $a`
        if ! /usr/sbin/lsof -i @${new_ip}:8080 > /dev/null 2>&1
        then
            echo $new_ip
            exit
        fi
    done

    echo "Could not find open IP" 1>&2
    exit 5
}

function embedded_find_open_ip {
    uid=$1
    app_home=$2
    for host_ip in `seq 1 127`
    do
        a=`address $uid $host_ip`
        new_ip=`dotted_quad $a`
        # Ensure nothing is listening on new IP
        if ! /usr/sbin/lsof -i @${new_ip}:8080 > /dev/null 2>&1
        then
            # Ensure new IP is available
            if ! grep -q $new_ip $app_home/.env/*_IP
            then 
                echo $new_ip
                exit
            fi
        fi
    done

    echo "Could not find open IP" 1>&2
    exit 5
}


function uid_to_portbegin {
  uid=$1
  echo $(($(($(($uid-${UID_BEGIN:-500}))*${PORTS_PER_USER:-5}))+${PORT_BEGIN:-35531}))
}

function uid_to_portend {
  uid=$1
  echo $(($(uid_to_portbegin $(($uid + 1)))-1))
}

function uid_to_portset {
  uid=$1
  seq $(uid_to_portbegin $uid) $(uid_to_portend $uid)
}

function uid_to_portrange {
  uid=$1
  echo $(uid_to_portbegin $uid)":"$(uid_to_portend $uid)
}

function uuid_to_portset {
  uuid=$1
  uid=`id -u $uuid`
  if [ $? -ne 0 ]; then
    echo "Cannot resolve uuid" 1>&2
    exit 5
  fi
  uid_to_portset $uid
}

function uuid_to_portrange {
  uuid=$1
  uid=`id -u $uuid`
  if [ $? -ne 0 ]; then
    echo "Cannot resolve uuid" 1>&2
    exit 5
  fi
  uid_to_portrange $uid
}


function find_next_proxy_port {
  import_env_vars

  # All-or-nothing: run all checks first before committing
  exposing=()
  for target in "$@"; do
    for proxy_port in $(uuid_to_portset $uuid)
    do
      if [ "$target" == "${OPENSHIFT_PUB_PORT[$proxy_port]}" ]
      then
        client_error "Already exposed: $OPENSHIFT_APP_DNS:$proxy_port -> $target"
        exit 8
      fi
      if [ -z "${OPENSHIFT_PUB_PORT[$proxy_port]}" ]
      then
        OPENSHIFT_PUB_PORT[$proxy_port]="$target"
        exposing=("${exposing[@]}" "$proxy_port")
        continue 2
      fi
    done
    client_error "All ports are taken, cannot add more"
    exit 67
  done

  # Commit changes 
  setproxy=()
  for proxy_port in "${exposing[@]}"
  do
    setproxy=( "${setproxy[@]}" "$proxy_port" "${OPENSHIFT_PUB_PORT[$proxy_port]}" )
    client_message "Exposing port: $OPENSHIFT_APP_DNS:$proxy_port -> ${OPENSHIFT_PUB_PORT[$proxy_port]}"
    echo "OPENSHIFT_PUB_PORT[$proxy_port]='$target'" > $APP_HOME/.env/OPENSHIFT_${proxy_port}_PUB_PORT
    echo "export OPENSHIFT_PUB_PORT" >> $APP_HOME/.env/OPENSHIFT_${proxy_port}_PUB_PORT
  done

  # Libra-proxy is more stable/efficient if it takes the whole task set in one go
  service libra-proxy setproxy "${setproxy[@]}"
}

function remove_proxy_port {
  import_env_vars

  # This function may be called to clean-up a half-built proxy
  setproxy=()
  for target in "$@"
  do
    for proxy_port in "${!OPENSHIFT_PUB_PORT[@]}"
    do
      if [ "$target" ==  "${OPENSHIFT_PUB_PORT[$proxy_port]}" ]
      then
        client_message "Concealing port: $OPENSHIFT_APP_DNS:$proxy_port -> $target"
        setproxy=("${setproxy[@]}" "$proxy_port" "del" )
        rm -f $APP_HOME/.env/OPENSHIFT_${proxy_port}_PUB_PORT
      fi
    done
  done

  # Libra-proxy is more stable/efficient if it takes the whole task set in one go
  service libra-proxy setproxy "${setproxy[@]}"  
}

function show_proxy_port {
  import_env_vars

  # Display proxy ports which match the supplied targets
  for target in "$@"
  do
    for proxy_port in "${!OPENSHIFT_PUB_PORT[@]}"
    do
      if [ "$target" ==  "${OPENSHIFT_PUB_PORT[$proxy_port]}" ]
      then
        client_message "Exposed port: $OPENSHIFT_APP_DNS:$proxy_port -> ${OPENSHIFT_PUB_PORT[$proxy_port]}"
      fi
    done
  done
}
