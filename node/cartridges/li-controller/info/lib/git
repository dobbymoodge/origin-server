#!/bin/bash

[ ! -z "$LI_CONTROLLER_LIB_GIT" ] && return 0
LI_CONTROLLER_LIB_GIT=true

function clone_git_repo {
    application="$1"
    user_id=$2
    group_id=$3
    uuid=$4
    desc="$5"
    APP_HOME="${libra_dir}/${uuid}"

    if [ ! -d $APP_HOME ]; then echo "ERROR: Application ${uuid} not found!  Please create." 1>&2; exit 2; fi

    GIT_DIR=$APP_HOME/git/$application.git
    mkdir -p "$APP_HOME/git"
    git clone --bare --no-hardlinks $CART_INFO_DIR/data/git_template.git $GIT_DIR

    # Repacking is needed to handle a bug with running multiple
    # git clone operations under concurrency.  The cloned repos
    # can end up in a corrupt state which repack will correct
    pushd $GIT_DIR
    git repack
    popd

    setup_git_repo $application $user_id $group_id $uuid "$desc"
}

function destroy_git_repo {
    application="$1"
    uuid="$2"
    APP_HOME="${libra_dir}/${uuid}"
    
    if [ ! -d $APP_HOME ]; then echo "ERROR: Application ${uuid} not found!  Please create." 1>&2; exit 2; fi
    
    GIT_DIR=$APP_HOME/git/$application.git
    rm -rf $GIT_DIR || warning "Could not remove ${application}" 108
}

function setup_git_repo {
    application="$1"
    user_id=$2
    group_id=$3
    uuid=$4
    desc="$5"
    
    APP_HOME="${libra_dir}/${uuid}"
    GIT_DIR=$APP_HOME/git/$application.git

    echo "$desc application '$application'" > $GIT_DIR/description

    cat <<EOF > $GIT_DIR/hooks/pre-receive
#!/bin/bash

# Import Environment Variables
for f in ~/.env/*
do
    . \$f
done

pre_receive_app.sh
EOF

    cat <<EOF > $GIT_DIR/hooks/post-receive
#!/bin/bash

# Import Environment Variables
for f in ~/.env/*
do
    . \$f
done

post_receive_app.sh ${libra_server}
EOF

    chmod 0755 $GIT_DIR/hooks/post-receive $GIT_DIR/hooks/pre-receive
    chown $user_id.$group_id -R $GIT_DIR
    # Secure the hooks dir
    chown root.root -R $GIT_DIR/hooks
    chown root.root $GIT_DIR
    chmod 0755 $GIT_DIR
}

function populate_repo_dir {
    repo_dir="$1"
    GIT_DIR="$GIT_DIR" git archive --format=tar HEAD | (cd "${APP_DIR}/${repo_dir}" && tar --warning=no-timestamp -xf -)
}