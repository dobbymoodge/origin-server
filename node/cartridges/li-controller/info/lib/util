function start_app {
    runuser --shell /bin/sh "$uuid" -c "runcon -t libra_t -l $mcs_level $APP_DIR/${application}_ctl.sh start" || error "Failed to start ${application}" 121
}

function stop_app {
    runuser --shell /bin/sh "$uuid" -c "runcon -t libra_t -l $mcs_level $APP_DIR/${application}_ctl.sh stop" || echo "Failed to stop ${application}" 1>&2
}

function create_standard_env_vars {
    echo "export OPENSHIFT_APP_DIR='$APP_DIR/'" > $APP_HOME/.env/OPENSHIFT_APP_DIR
    echo "export OPENSHIFT_LOG_DIR='$APP_DIR/logs/'" > $APP_HOME/.env/OPENSHIFT_LOG_DIR
    echo "export OPENSHIFT_DATA_DIR='$APP_DIR/data/'" > $APP_HOME/.env/OPENSHIFT_DATA_DIR
    echo "export OPENSHIFT_TMP_DIR='/tmp/'" > $APP_HOME/.env/OPENSHIFT_TMP_DIR
    echo "export OPENSHIFT_RUN_DIR='$APP_DIR/run/'" > $APP_HOME/.env/OPENSHIFT_RUN_DIR
    echo "export OPENSHIFT_APP_NAME='$application'" > $APP_HOME/.env/OPENSHIFT_APP_NAME
}

function create_standard_network_env_vars {
    echo "export OPENSHIFT_INTERNAL_IP='$IP'" > $APP_HOME/.env/OPENSHIFT_INTERNAL_IP
    echo "export OPENSHIFT_INTERNAL_PORT='8080'" > $APP_HOME/.env/OPENSHIFT_INTERNAL_PORT
    echo "export OPENSHIFT_APP_CTL_SCRIPT='$APP_DIR/${application}_ctl.sh'" > $APP_HOME/.env/OPENSHIFT_APP_CTL_SCRIPT
    echo "export OPENSHIFT_APP_DNS='${application}-${namespace}.${libra_domain}'" > $APP_HOME/.env/OPENSHIFT_APP_DNS
}

function create_standard_redo_dir_env_var {
    echo "export OPENSHIFT_REPO_DIR='$APP_DIR/repo/'" > $APP_HOME/.env/OPENSHIFT_REPO_DIR
}

function create_standard_path_env_var {
    echo "export PATH=$CART_INFO_DIR/bin/:$CART_DIR/abstract-httpd/info/bin/:$CART_DIR/li-controller/info/bin/:$PATH" > $APP_HOME/.env/PATH
}

# Create simple application start / stop script
function create_app_ctl_script {

    cat <<EOF > "$APP_DIR/${application}_ctl.sh"
#!/bin/bash -e

# Import Environment Variables
for f in ~/.env/*
do
    . \$f
done

app_ctl.sh \$1
EOF

chmod +x "$APP_DIR/${application}_ctl.sh" || error "Failed to chmod new application scripts" 122
chown root.root "$APP_DIR/${application}_ctl.sh"

}

function secure_app_dir {
    chown $user_id.$group_id -R $APP_DIR || error "Failed to chown new application space.  Please contact support" 123
    chown root.root "$APP_DIR"
}

function secure_conf_dirs {
    chown root:root -R "$APP_DIR/conf" "$APP_DIR/conf.d"
}

function chcon_app_dir_and_git {
    chcon -t libra_var_lib_t -l $mcs_level -R "$APP_HOME/git/" "$APP_DIR"
}

function check_app_dir_doesnt_exist {
    if [ -d "$APP_DIR" ] 
    then
        error "${application}.  Please destroy then recreate, or pick a new name" 132
    fi
}

function load_node_conf {
    if [ -f '/etc/libra/node.conf' ]
    then
        . /etc/libra/node.conf
    elif [ -f 'node.conf' ]
    then
        . node.conf
    else
        echo "node.conf not found.  Cannot continue" 1>&2
        exit 3
    fi
}

function load_node_data_conf {
    if [ -f '/etc/libra/node_data.conf' ]
    then
        . /etc/libra/node_data.conf
    elif [ -f 'node_data.conf' ]
    then
        . node_data.conf
    else
        echo "node_data.conf not found.  Cannot continue" 1>&2
        exit 3
    fi
}

function load_resource_limits_conf {
    if [ -f '/etc/libra/resource_limits.conf' ]
    then
        . /etc/libra/resource_limits.conf
    fi
}

function error {
    echo "$1" 1>&2
    exit "$2"
}

function warning {
    echo "$1" 1>&2
    #echo "$2"
}

function rm_unobfuscated_app_home {
    # Check if unobfuscate is set in /etc/libra/node.conf
    # If it is set, remove symlink

    namespace=$1
    appname=$2

    if [ $unobfuscate -eq 1 ]
    then        
        rm "${libra_dir}/${appname}-${namespace}"
    fi
}

function unobfuscate_app_home {
    # Check if unobfuscate is set in /etc/libra/node.conf
    # If it is set, symlink /var/lib/libra/uuid to /var/lib/libra/appname-namespace
    # This will allow easier debugging.

    uuid=$1
    namespace=$2
    appname=$3

    if [ $unobfuscate -eq 1 ]
    then
        if [ ! -f "${libra_dir}/$appname-$namespace" ] && [ ! -d "${libra_dir}/$appname-$namespace" ]
        then
            /bin/ln -sf "${libra_dir}/${uuid}" "${libra_dir}/${appname}-${namespace}"
        fi
    fi
}
