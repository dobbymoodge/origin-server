#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.dirname(__FILE__) + '/lib') unless $LOAD_PATH.include?(File.dirname(__FILE__) + '/lib')

require 'config'

require 'trello_helper'
require 'output_helper'
require 'reports'
require 'report'

require 'pp'
require 'yaml'
require 'commander/import'

name="#{__FILE__}"

program :name, "Trello Utilities"
program :version, "1.0.0"
program :description, "An assortment of Trello utilities"

# This loads the conf files and creates new objects
#   based on the specified classes
def load_conf(klass,args,single = false)
  if single
    klass.new(args)
  else
    Hash[*args.map do |key,val|
      [key,klass.new(val)]
    end.flatten]
  end
end

$tag_to_label_color = {
  'documentation' => 'green',
  'tc-approved' => 'yellow',
  'no-qe' => 'orange',
  'security' => 'red',
  'devcut' => 'purple'
}

trello = load_conf(TrelloHelper, CONFIG.trello, true)

command :list do |c|
  c.syntax = "#{name} list"

  c.option "--list LIST_NAME", "Restrict to a particular list"
  c.option "--team TEAM_NAME (broker|ui|runtime|enterprise|documentation)", "Restrict to a team"

  c.description = "An assortment of Trello queries"
  c.action do |args, options|
    
    #puts trello.member('danmcp').full_name
    puts "Organization: #{trello.org.name}"

    if options.team
      boards = trello.team_boards(options.team)
    else
      boards = trello.org_boards
    end
    
    boards.each do |board|
      puts "\nBoard Name: #{board.name}"
      lists = board.lists.target
      if options.list
        lists = []
        lists.each do |list|
          if list.name == options.list
            lists = [list]
            break
          end
        end
      end
      lists.each do |list|
        cards = list.cards.target
        if !cards.empty?
          puts "\n  List: #{list.name}  (#cards #{cards.length})"
          puts "    Cards:"
          cards.each_with_index do |card, index|
            puts "     #{index+1}) #{card.name} (##{card.short_id})"
            members = card.members
            if !members.empty?
              puts "       Assignee(s): #{members.map{|member| member.full_name}.join(',')}"
            end
          end
        end
      end
    end
    #puts trello.org_boards
  end
end

command :report do |c|
  c.syntax = "#{name} report"

  c.option "--report-type NAME" , "Available report types: %s" % CONFIG.reports.keys.join(', ')
  c.option "--send-email" , "Send email?"

  c.description = "An assortment of Trello reporting utilities"
  c.action do |args, options|
    options.report_type ||= choose("Report to run?",*CONFIG.reports.keys)
    options.report_type = options.report_type.to_sym
    if options.date
      $date = Date.parse(options.date)
    end
    
    heading "Generating Status Report" do
      # Read Rally configuration file
      _progress "Logging into Trello" do
        $sprint = Sprint.new({:trello => trello})
      end
      
      # Generate queries
      _progress "Generating queries" do
        $report_types = load_conf(UserStoryReport,CONFIG.queries)
      end

      # Generate reports
      _progress "Building available reports" do
        $reports = load_conf(Report,CONFIG.reports)
      end
    end
    
    report = $reports[options.report_type]
    report.options = options.__hash__
    
    _table(
      "Running Report With Options",
      report.options.marshal_dump,
      { :capitalize => true, :sort => 0, :separator => ':' }
    )
    
    report.send_email if options.send_email
    
  end
end

command :update do |c|
  c.syntax = "#{name} update"

  c.description = "An assortment of Trello modification utilities"
  c.action do |args, options|
  end
end

default_command :list
