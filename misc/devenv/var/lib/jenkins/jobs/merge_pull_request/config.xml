<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Merge a pull request after tests have passes in serial</description>
  <logRotator>
    <daysToKeep>10</daysToKeep>
    <numToKeep>100</numToKeep>
    <artifactDaysToKeep>10</artifactDaysToKeep>
    <artifactNumToKeep>100</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>LI_PULL_ID</name>
          <description>The pull id to use for the li repo.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CRANKCASE_PULL_ID</name>
          <description>The pull id to use for the crankcase repo.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RHC_PULL_ID</name>
          <description>The pull id to use for the rhc repo.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM">
    <configVersion>1</configVersion>
    <remoteRepositories>
      <org.spearce.jgit.transport.RemoteConfig>
        <string>origin</string>
        <int>5</int>
        <string>fetch</string>
        <string>+refs/heads/*:refs/remotes/origin/*</string>
        <string>receivepack</string>
        <string>git-upload-pack</string>
        <string>uploadpack</string>
        <string>git-upload-pack</string>
        <string>url</string>
        <string>git@github.com:openshift/li.git</string>
        <string>tagopt</string>
        <string></string>
      </org.spearce.jgit.transport.RemoteConfig>
    </remoteRepositories>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <mergeOptions/>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>false</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <skipTag>false</skipTag>
  </scm>
  <canRoam>true</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>libra1</authToken>
  <triggers class="vector"/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>rm -rf li rhc crankcase
git clone git@github.com:openshift/li.git
if [ -n &quot;$LI_PULL_ID&quot; ]
then
set +x
  echo &quot;

*****Patching Pull Request: https://github.com/openshift/li/pull/$LI_PULL_ID&quot;
set -x
  pushd li
    set +x
    SECRET=`cat ~/.config/secret`
    curl --basic -u &quot;openshift-bot:$SECRET&quot; https://github.com/openshift/li/pull/$LI_PULL_ID.patch | git am
    set -x
  popd
fi
git clone git@github.com:openshift/crankcase.git
if [ -n &quot;$CRANKCASE_PULL_ID&quot; ]
then
set +x
  echo &quot;

*****Patching Pull Request: https://github.com/openshift/crankcase/pull/$CRANKCASE_PULL_ID&quot;
set -x
  pushd crankcase
    curl https://github.com/openshift/crankcase/pull/$CRANKCASE_PULL_ID.patch | git am
  popd
fi
git clone git@github.com:openshift/rhc.git
if [ -n &quot;$RHC_PULL_ID&quot; ]
then
set +x
  echo &quot;

*****Patching Pull Request: https://github.com/openshift/rhc/pull/$RHC_PULL_ID&quot;
set -x
  pushd rhc
    curl https://github.com/openshift/rhc/pull/$RHC_PULL_ID.patch | git am
  popd
fi

set +x
echo &quot;

&quot;
set -x

pushd li
  build/devenv build merge_pull_request ${BUILD_NUMBER} --terminate --install_from_local_source --instance_type m1.large
popd

# Make sure all the pull requests will merge cleanly
if [ -n &quot;$LI_PULL_ID&quot; ]
then
  test_pull_requests --test_merge_pull_request $LI_PULL_ID --repo li
fi

if [ -n &quot;$CRANKCASE_PULL_ID&quot; ]
then
  test_pull_requests --test_merge_pull_request $CRANKCASE_PULL_ID --repo crankcase
fi

if [ -n &quot;$RHC_PULL_ID&quot; ]
then
  test_pull_requests --test_merge_pull_request $RHC_PULL_ID --repo rhc
fi


# Do the merge
if [ -n &quot;$LI_PULL_ID&quot; ]
then
  test_pull_requests --merge_pull_request $LI_PULL_ID --repo li
fi

if [ -n &quot;$CRANKCASE_PULL_ID&quot; ]
then
  test_pull_requests --merge_pull_request $CRANKCASE_PULL_ID --repo crankcase
fi

if [ -n &quot;$RHC_PULL_ID&quot; ]
then
  test_pull_requests --merge_pull_request $RHC_PULL_ID --repo rhc
fi</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>li/rhc/log/**</artifacts>
      <latestOnly>false</latestOnly>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.BuildTrigger>
      <childProjects>libra_ami</childProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
      </threshold>
    </hudson.tasks.BuildTrigger>
    <hudson.tasks.junit.JUnitResultArchiver>
      <testResults>li/rhc/log/**/*.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <testDataPublishers/>
    </hudson.tasks.junit.JUnitResultArchiver>
  </publishers>
  <buildWrappers/>
</project>
