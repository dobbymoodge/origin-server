#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.dirname(__FILE__) + '/lib') unless $LOAD_PATH.include?(File.dirname(__FILE__) + '/lib')

require 'sprint'
require 'report'
require 'reports'

require 'yaml'
require 'commander/import'

Pony.options = {
  :from => 'openshift-sprint-report@redhat.com',
  :reply_to => 'fotios@redhat.com',
  :via => :sendmail
}

name="#{__FILE__}"

program :name, "Sprint Status Notifier"
program :version, "1.0.0"
program :description, "A script to create sprint status notification emails"

CONFIG_DIR = File.join(File.expand_path(File.dirname(__FILE__)),'/config')

# This loads the conf files and creates new objects
#   based on the specified classes
def load_conf(klass,file,single = false)
  args = YAML.load_file(File.join(CONFIG_DIR,file))
  if single
    klass.new(args)
  else
    Hash[*args.map do |key,val|
      [key,klass.new(val)]
    end.flatten]
  end
end

reports = YAML.load_file(File.join(CONFIG_DIR,'reports.yml'))

command :run do |c|
  c.syntax = "#{name} run"

  c.option "--report NAME" , "Available report types: %s" % reports.keys.join(', ')
  c.option "--[no-]nag", "Nag the individual owners (overrides default overrides default for report)"
  c.option "--[no-]email", "Actually send the report (false by default)"
  c.option "--to EMAIL", "Who to send the email to (overrides default for report)"

  c.description = "Run available reports"
  c.action do |args,options|
    options.report ||= choose("Report to run?",*reports.keys)
    options.report = options.report.to_sym

    # Read Rally configuration file
    say "Logging into Rally..."
    $sprint = load_conf(Sprint,'rally.yml',true)

    # Generate queries
    say "Generating queries..."
    $report_types = load_conf(UserStoryReport,'queries.yml')

    # Generate reports
    say "Building available reports..."
    $reports = load_conf(Report,'reports.yml')

    report = $reports[options.report]
    report.options = options.__hash__
    show_options(report.options)
    report.send_email
    say "Done"
  end
end

def show_options(options)
  say "Running Report With Options"
  say "==========================="
  args = options.marshal_dump
  max_len = args.keys.map(&:to_s).map(&:length).max + 1
  args.each do |k,v|
    say "  %#{max_len}s: %s \n" % [k.to_s.capitalize, [v].join(',')]
  end
end

default_command :run
