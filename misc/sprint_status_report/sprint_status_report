#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.dirname(__FILE__) + '/lib') unless $LOAD_PATH.include?(File.dirname(__FILE__) + '/lib')

require 'config'

require 'sprint'
require 'report'
require 'reports'
require 'output_helper'

require 'yaml'
require 'commander/import'

name="#{__FILE__}"

program :name, "Sprint Status Notifier"
program :version, "1.0.0"
program :description, "A script to create sprint status notification emails"

# This loads the conf files and creates new objects
#   based on the specified classes
def load_conf(klass,args,single = false)
  if single
    klass.new(args)
  else
    Hash[*args.map do |key,val|
      [key,klass.new(val)]
    end.flatten]
  end
end

command :run do |c|
  c.syntax = "#{name} run"

  c.option "--report NAME" , "Available report types: %s" % CONFIG.reports.keys.join(', ')
  c.option "--[no-]nag", "Nag the individual owners (overrides default overrides default for report)"
  c.option "--[no-]email", "Actually send the report (false by default)"
  c.option "--to EMAIL", "Who to send the email to (overrides default for report)"

  c.description = "Run available reports"
  c.action do |args,options|
    options.report ||= choose("Report to run?",*CONFIG.reports.keys)
    options.report = options.report.to_sym

    heading "Generating Status Report" do
      # Read Rally configuration file
      _progress "Logging into Rally" do
        $sprint = load_conf(Sprint,CONFIG.rally,true)
      end

      # Generate queries
      _progress "Generating queries" do
        $report_types = load_conf(UserStoryReport,CONFIG.queries)
      end

      # Generate reports
      _progress "Building available reports" do
        $reports = load_conf(Report,CONFIG.reports)
      end
    end

    report = $reports[options.report]
    report.options = options.__hash__

    _table(
      "Running Report With Options",
      report.options.marshal_dump,
      { :capitalize => true, :sort => 0, :separator => ':' }
    )

    report.send_email
  end
end

default_command :run
