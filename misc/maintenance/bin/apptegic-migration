#!/usr/bin/env ruby

require 'rubygems'
require 'parseconfig'
require 'thor'
require 'fileutils'
require 'aws'
require 'json'
require 'date'
require 'pp'
require 'uri'

class Apptegic < Thor
  include Thor::Actions

  no_tasks do
    def connect
      # This will verify the Amazon SSL connection
      Rightscale::HttpConnection.params[:ca_file] = "/etc/pki/tls/certs/ca-bundle.trust.crt"

      config = nil
      begin
        config = ParseConfig.new(File.expand_path("~/.awscred"))
      rescue StandardError => e
        puts <<-eos
          Couldn't access credentials in ~/.awscred

          Please create a file with the following format:
            AWSAccessKeyId=<ACCESS_KEY>
            AWSSecretKey=<SECRET_KEY>
        eos
        raise "Error - no credentials"
      end

      # Return the AMZ connection
      Aws::S3Interface.new(config.get_value("AWSAccessKeyId"), 
                           config.get_value("AWSSecretKey"), 
                           params = {:logger => Logger.new('/dev/null')})
    end
  end

  desc "migrate BUCKET DATASET SECRET", "Migrate events from S3 to Apptegic dataset"
  method_option :dryrun, :type => :boolean, :desc => "Don't actually perform any changes"
  def migrate(bucket, apptegic_dataset, apptegic_secret)
    # Return the AMZ connection
    s3 = connect

    # Read in accounts already migrated
    migrated = []
    File.open("migration_results").each {|line| migrated << line.chomp }

    s3.incrementally_list_bucket(bucket, {'prefix' => 'user_info'}) do |result|
      result[:contents].each do |item|  
        if item[:key] =~ /\/apps\//
          app_path = item[:key]

          unless migrated.index(app_path)
            app_name = File.basename(app_path, ".json")

            # Read the data from the JSON file
            app_data = JSON.parse(s3.get(bucket, app_path)[:object])
            app_type = app_data["framework"]

            # Convert seconds to milliseconds
            app_creation = Time.parse(app_data["creation_time"]).to_i * 1000
            app_uuid = app_data["uuid"]

            # Get the application user
            user_path = app_path.split("/apps/")[0] + "/user.json"
            rhlogin = File.basename(app_path.split("/apps/")[0])
            user_data = JSON.parse(s3.get(bucket, user_path)[:object])
            user_uuid = user_data["uuid"]

            apptegic_key = "redhat"

            # Build up the Apptegic URL
            puts "Migrating #{app_path}"
            begin
              apptegic_url = "https://redhat.apptegic.com/httpreceiver"
              apptegic_url << "?"
              apptegic_url << "_ak=#{URI.escape(apptegic_key)}"
              apptegic_url << "&_at=#{URI.escape(apptegic_secret)}"
              apptegic_url << "&_ds=#{URI.escape(apptegic_dataset)}"
              apptegic_url << "&_time=#{URI.escape(app_creation.to_s)}"
              apptegic_url << "&accountId=#{URI.escape(rhlogin)}"
              apptegic_url << "&accountType=regular"
              apptegic_url << "&userId=#{URI.escape(rhlogin)}"
              apptegic_url << "&user_uuid=#{URI.escape(user_uuid)}"
              apptegic_url << "&app_uuid=#{URI.escape(app_uuid)}"
              apptegic_url << "&app_name=#{URI.escape(app_name)}"
              apptegic_url << "&app_type=#{URI.escape(app_type)}"
              apptegic_url << "&action=configure"
              apptegic_url << "&platform=express"

              puts `curl -s "#{apptegic_url}"`
              `echo "#{app_path}" >> migration_results`
            rescue
              puts "ERROR"
            end
          else
            puts "Already migrated #{app_path}"
          end
        end
      end
    end
  end
end

Apptegic.start
