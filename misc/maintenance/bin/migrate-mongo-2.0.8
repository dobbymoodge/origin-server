#!/usr/bin/env ruby
require 'rubygems'
require 'mongo'
require 'json'
$:.unshift('/var/www/stickshift/broker')
require 'config/environment'

# Configurable params
$config = {
  # Mongo params
  :replica_set => true,
  # Replica set example: [[<host-1>, <port-1>], [<host-2>, <port-2>], ...]
  :host_port => [["localhost", 27017]],
  :user       => "libra",
  :password   => "momo",
  :db         => "openshift_broker_dev",
  :collection => "user"
}

def mongo_connect
  if $config[:replica_set]
    con = Mongo::ReplSetConnection.new(*$config[:host_port] \
                                       << {:read => :secondary})
  else
    con = Mongo::Connection.new($config[:host_port][0], 
                                $config[:host_port][1])
  end
  db = con.db($config[:db])
  db.authenticate($config[:user], $config[:password])
  $coll = con.db($config[:db]).collection($config[:collection])
end

def mongo_migrate
  users = $coll.find()
  users.each do |user|
    puts "Processing user #{user['login']}"
    if not user["namespace"].nil?
      uuid = StickShift::Model.gen_uuid
      domain = {"uuid" => uuid, "namespace"  => user["namespace"]}
      user["domains"] = [domain]
      user.delete("namespace")
    end
    if user["apps"]
      user["apps"].each do |app|
        app["domain"] = user["domains"][0] if app["domain"].nil?
        app.delete("optimize") if not app["optimize"].nil?
        if app["group_instances"]
          app["group_instances"].each do |gi|
            gi['gears'].each do |gear|
              gear['name']=app['name'] if gear['name'].nil? and not app['scalable']
            end
          end
        end
      end
    end
    puts "User #{user}"
    $coll.update({ "_id" => user["login"] }, user)
  end
end


mongo_connect
puts "User migration Started"
mongo_migrate
puts "User migration Done!"
