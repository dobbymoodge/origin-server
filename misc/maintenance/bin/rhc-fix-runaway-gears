#!/usr/bin/env ruby

require 'rubygems'
require 'getoptlong'
require "/var/www/stickshift/broker/config/environment"

users = CloudUser.find_all(nil)

scalable_count = 0
moved_count = 0
failed_to_move_count = 0
mysql_apps = []
attempted_move = []
users.each do |user|
  user.applications.each do |app|
    begin
      if app.scalable
        scalable_count += 1
        next
      end
      app.gear.get_proxy
      source_container = app.gear.container
      source_district_uuid = source_container.get_district_uuid
        source_district = District::find(source_district_uuid)
        if ( (app.gear.uid < (source_district.max_uid - source_district.max_capacity)) or (app.gear.uid > source_district.max_uid) )
          begin
            attempted_move << [user.login, app.name]
            app.gear.container.move_app_for_runaway_gear(app)
            moved_count += 1
            if app.embedded.include? "mysql-5.1"
              mysql_apps << [user.login, app.name]
            end
          rescue Exception=>e
            failed_to_move_count += 1
            print "Exception reported for app '#{app.name}' for user '#{user.login}' while fixing for runaway gear '#{app.gear.uuid}' : '#{e.message}'\n"
          end
        end
    end
  end
end

print "Scalable apps (not touched) : #{scalable_count}\n"
print "Total apps moved successfully : #{moved_count}\n"
print "List of apps on which move was attempted :\n"
attempted_move.each do |app_info|
  ulogin, appname = app_info
  print "\t[user: #{ulogin}, appname: #{appname}]\n"
end

print "\nList of moved apps which have mysql on them -\n"
mysql_apps.each do |app_info|
  ulogin, appname = app_info
  print "\t[user: #{ulogin}, appname: #{appname}]\n"
end

print "\nTotal apps that failed to move properly - #{failed_to_move_count}\n"

exit (failed_to_move_count==0 ? 0 : 1)

