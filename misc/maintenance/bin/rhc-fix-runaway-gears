#!/usr/bin/env ruby

require 'rubygems'
require 'getoptlong'


def usage
    puts <<USAGE
== Synopsis

rhc-fix-runaway-gears : Move an app from one node to another if its uid does not belong to a valid range

== Usage

rhc-admin-move OPTIONS

Options:
--gear_uuid <gear_uuid>
    Gear uuid to move
-h|--help
    Show Usage info
USAGE
end

opts = GetoptLong.new(
    ["--gear_uuid",        "-g", GetoptLong::REQUIRED_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

gear_uuid = args["--gear_uuid"]

if args["--help"]
  usage
  exit 1
end

unless gear_uuid
  puts "ERROR: Please specify gear_uuid for moving gear"
  exit 1
end

require "/var/www/stickshift/broker/config/environment"


app,gear = Application.find_by_gear_uuid(gear_uuid)

print "Checking application #{app.name} for gear #{gear_uuid}.."
if app.scalable
  puts "Will not move scalable app's gear. Needs manual fix."
  exit 1
end

if app.gear.uuid != gear.uuid
  puts "ERROR : Gears uuid(#{gear.uuid}) is not the same as what its app thinks (#{app.gear.uuid})"
  exit 1
end

source_container = gear.get_proxy
if source_container.nil?
  puts "ERROR : Could not find source container for the given gear"
  exit 1
end
source_district_uuid = source_container.get_district_uuid
if source_district_uuid.nil?
  puts "ERROR: Could not find district for the given gear"
  exit 1
end
source_district = District::find(source_district_uuid)
user = app.user
attempted_move = []
attempted_move << [user.login, app.name]
moved_count = 0
failed_to_move = []
mysql_apps = []
if ( (gear.uid < (source_district.max_uid - source_district.max_capacity)) or (gear.uid > source_district.max_uid) )
  begin
    app.gear.container.move_app_for_runaway_gear(app, nil, source_district.node_profile)
    moved_count += 1
    if app.embedded.include? "mysql-5.1"
      mysql_apps << [user.login, app.name]
    end
  rescue Exception=>e
    failed_to_move << [user.login, app.name]
    print "Exception reported for app '#{app.name}' for user '#{user.login}' while fixing for runaway gear '#{app.gear.uuid}' : '#{e.message}'\n"
  end
else 
  puts "This gear does not have its uid (#{gear.uid}) out of range."
end

print "\n\nTotal apps moved successfully : #{moved_count}\n"
print "List of apps on which move was attempted - #{attempted_move.length}\n"
attempted_move.each do |app_info|
  ulogin, appname = app_info
  print "\t[user: #{ulogin}, appname: #{appname}]\n"
end

print "\nList of moved apps which have mysql on them - #{mysql_apps.length}\n"
mysql_apps.each do |app_info|
  ulogin, appname = app_info
  print "\t[user: #{ulogin}, appname: #{appname}]\n"
end

print "\nTotal apps that failed to move properly - #{failed_to_move.length}\n"
failed_to_move.each do |app_info|
  ulogin, appname = app_info
  print "\t[user: #{ulogin}, appname: #{appname}]\n"
end

exit (failed_to_move.length==0 ? 0 : 1)

