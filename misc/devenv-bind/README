* Introduction

The Openshift service depends on Dynamic DNS to publish the names and
addresses of new applications. In a production service the DNS
components would be housed separately from the main components and
would be integrated with the public DNS infrastructure.

For testing and development this kind of overhead and formal
integration is impractical (and potentially dangerous if they are
making changes to live production service resources). It is preferable
to create an isolated Dynamic DNS service who's sole purpose is to
receive and reflect the change requests that are issued as a result of
the Openshift service operation. This document describes two service
configurations that are useful when a small local Dynamic DNS service
is needed.

The self-contained Dynamic DNS service can be run by any non-root
user.  It does not interact with the rest of the host system in any
way.  This configuration is meant to be used by unit and functional
tests of the DNS_Service modules.

The integrated DNS service runs as a normal system service on the
test/development host.  It is inserted between the test host and the
external DNS server.  It will accept update requests for the test
zones, and respond to queries for those zones.  All other queries are
forwarded to the upstream server for resolution.  This configuration
is intended for use when the Openshift client and server software
reside on the same host, and where testing will require resolution of
the test applications' public hostname.  (Usually in the process of
issuing and responding to an HTTP request to the application).

* DNS, BIND and dynamic updates

DNS is the most fundamental network service protocol on the internet
today.  It is ubiquitous and generally invisible to ordinary users.

ISC BIND named is the most widely used DNS server software for
external nameservices.  It serves as the reference implementation for
the RFCs that define the DNS protocol.

* Self-Contained

A self-contained named is what it sounds like.  It does not connect to
other servers or allow for name resolution or updates for anything but
it's own authoritative zones.  It is useful for testing where the test
prerequisites, stimulus and success/failure condition checks can all
be done using a configurable resolver.  That is: the test can specify
the nameserver IP address and port to use for queries. They do not
rely on the system configuration (/etc/resolv.conf) and libresolv to
direct the updates and queries.

Because it is not constrained to run on the standard UDP/TCP port (53)
and does not require updating /etc/resolv.conf, the self-contained
named can run as a non-privildged user.  It can be configured to read
configuration files and to write logs and journals into user space.
The service can re-initialized, started and stopped without altering
the behavior of the host system. 

** named.conf

** keys

** test zone file

** starting and stopping the daemon

** log files



* Integrated/Forwarding

* Forwarders by DHCP



* References

  - RFC 2136 Dynamic Updates in the Domain Name System (DNS UPDATE)
      http://www.rfc-editor.org/rfc/rfc2136.txt

  - RFC 3007 Secure Domain Name System (DNS) Dynamic Update
      http://www.rfc-editor.org/rfc/rfc3007.txt

  - Article: Painless Dynamic DNS,
      Copyright © 2008 Jeff Garzik
      http://linux.yyz.us/nsupdate/

  - Article: Painless DDNS part 2: the server
      Copyright © 2008 Jeff Garzik
      http://linux.yyz.us/dns/ddns-server.html

  - dhclient-script(8) man page
      http://linux.die.net/man/8/dhclient-script

  - A step-by-step guide to building a new SELinux policy module, 
      Dan Walsh, Copyright © 2012 Red Hat, Inc.
