#!/usr/bin/env ruby

require 'rubygems'
require 'parseconfig'
require 'getoptlong'
require 'mechanize'
require 'hpricot'
require 'net/https'
require 'uri'
require 'ping'

# Synchronize output
$stdout.sync = true
$stderr.sync = true

def p_usage
    puts <<USAGE

Usage: batch_register
Batch register users for testing

  -o|--host    devenv_host  DevEnv host to use for registering
  -i|--id      identifier   Namespace / email identifier (e.g. libra-test+ID@redhat.com)
  -n|--num     number_users Number of users to create (e.g. libra-test+ID1@redhat.com)
  -h|--help                 Show Usage info

USAGE
exit 255
end

begin
    opts = GetoptLong.new(
        ["--help",  "-h", GetoptLong::NO_ARGUMENT],
        ["--host",  "-o", GetoptLong::REQUIRED_ARGUMENT],
        ["--id",    "-i", GetoptLong::REQUIRED_ARGUMENT],
        ["--num",   "-n", GetoptLong::REQUIRED_ARGUMENT]
    )
    opt = {}
    opts.each do |o, a|
        opt[o[2..-1]] = a.to_s
    end
rescue Exception => e
  puts e.message
    p_usage
end

proxy = ['squid.corp.redhat.com', '8080']
password = "redhat"
openshift_host = "http://#{opt['host']}"
identifier = opt['id']
num_users = opt['num'].to_i

# Verify proxy connectivity
print "Verifying proxy connectivity..."
unless Ping.pingecho('squid.corp.redhat.com', 2)
  puts "ERROR - Could not connect to squid.corp.redhat.com."
  puts "You must be on the RH network or VPN to run this script."
  exit 1
end
puts "Done"

# Setup the internal proxy
a = Mechanize.new { |agent|
  agent.user_agent_alias = 'Mac Safari'
  agent.set_proxy(proxy[0], proxy[1])
}

# Register a new user
print "Registering users (#{num_users} in total)"
a.get(openshift_host) do |page|
  login_page = page.link_with(:text => /Login/).click
  register_page = login_page.link_with(:text => /Click here to register/).click

  num_users.times do |num|
    result_page = register_page.form_with(:action => '/app/user') do |form|
      form['web_user[email_address]'] = "libra-test+#{identifier}#{num}@redhat.com"
      form['web_user[password]'] = password
      form['web_user[password_confirmation]'] = password
    end.submit

    if result_page.body =~ /Check your email/
      print "."
    end
  end
end
puts "Done"

print "Waiting for two minutes to let the archives refresh..."
sleep 120
puts "Done"

# Verify the email
print "Now verifying emails"
a.get('http://post-office.corp.redhat.com/archives/libra-test/') do |page|
  # Get the current page of archives
  archive_page = page.link_with(:text => /Thread/).click

  # Get the confirmation emails
  archive_page.links_with(:text => /^Confirm/).each do |link|
    email_body = Hpricot.parse(link.click.body)

    # Parse out the date of the email
    email_body.at("ul").search("li").each do |li|
      if li.inner_html =~ /Date/
        date_str = li.inner_html.split("</em>:")[1].strip
        date = DateTime.parse(date_str)
        # Subtracting date time yields the numbers of days in between
        # Convert days to minutes for the comparison
        # If within 30 minutes, click the links
        if (((DateTime.now - date) * 24 * 60).to_i <= 30)
          # Found a recent link - submit the link
          link = email_body.at("pre/a")
          if link
            # Valid the email address
            a.get(link.attributes['href'])
            print "."
          end
        end
      end
    end
  end
end
puts "Done"
