#!/bin/bash

# Copyright © 2010 Mike McGrath All rights reserved
# Copyright © 2010 Red Hat, Inc. All rights reserved

# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.

# Creates a per application httpd instance

# Exit on any errors
set -e
#set -x

if [ -f '/etc/libra/node.conf' ]
then
    . /etc/libra/node.conf
elif [ -f 'node.conf' ]
then
    . node.conf
else
    echo "node.conf not found.  Cannot continue" 1>&2
    exit 3
fi

if [ -f '/etc/libra/node_data.conf' ]
then
    . /etc/libra/node_data.conf
elif [ -f 'node_data.conf' ]
then
    . node_data.conf
else
    echo "node_data.conf not found.  Cannot continue" 1>&2
    exit 3
fi

CART_DIR=${CART_DIR:=/usr/libexec/li/cartridges}

rotatelogs_interval="86400"
rotatelogs_format="-%Y%m%d-%H%M%S-%Z"

if [ -f '/etc/libra/resource_limits.conf' ]
then
    . /etc/libra/resource_limits.conf
fi


CART_DIR=/usr/libexec/li/cartridges
CART_INFO_DIR=$CART_DIR/jenkins-1.4/info

source ${CART_DIR}/li-controller/info/lib/util
source ${CART_DIR}/li-controller/info/lib/git
source ${CART_DIR}/li-controller/info/lib/selinux
source ${CART_DIR}/li-controller/info/lib/network
source ${CART_DIR}/li-controller/info/lib/apache

function print_help {
    echo "Usage: $0 app-name namespace uuid"

    echo "$0 $@" | logger -p local0.notice -t libra_jenkins_configure
    exit 1
}

function create_repo {
    application="$1"
    user_id=$2
    group_id=$3
    uuid=$4

    if [ ! -d $APP_HOME ]; then echo "ERROR: Application ${uuid} not found!  Please create." 1>&2; exit 2; fi

    GIT_DIR=$APP_HOME/git/$application.git
    mkdir -p "$APP_HOME/git"
    
    cp -ad $CART_DIR/jenkins-1.4/template $APP_HOME/git
    
    pushd $APP_HOME/git/template
    git init
    git add *
    git commit -m 'Creating template'
    popd
    pushd $APP_HOME/git
    git clone --bare --no-hardlinks template $application.git
    rm -rf template
    popd

    setup_git_repo $application $user_id $group_id $uuid "jenkins 1.4"
}

while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done


[ $# -eq 3 ] || print_help

namespace=`basename $2`
application="$1"
uuid=$3

APP_HOME="$libra_dir/$uuid"
APP_DIR=`echo $APP_HOME/$application | tr -s /`

unobfuscate_app_home $uuid $namespace $application

#
# Get user id info
# Not caching this information caused some early chowns to work but some later
# chowns to fail with a user not found error

user_id=$(id -u "$uuid") || error "Could not find user $uuid ($namespace)" 134
group_id=$(id -g "$uuid") || error "Could not find user $uuid ($namespace)" 135

uid=$(id -u "$uuid")
mcs_level=`openshift_mcs_level $uid`
export mcs_level

admin_password=$(head -n 500 /dev/urandom|tr -dc "a-np-zA-NP-Z1-9-_"|fold -w 12 | head | head -n1)
system_builder_password=$(head -n 500 /dev/urandom|tr -dc "a-np-zA-NP-Z1-9-_"|fold -w 12 | head | head -n1)

cp -ad "$CART_INFO_DIR/configuration/jenkins-pre-deploy/"* "$APP_DIR/data/"
sed -i "s,JENKINS_URL_TEMPLATE,http://${application}-${namespace}.${libra_domain}/,g" "$APP_DIR/data/config.xml"
openshift_server=`echo "${libra_server}" | sed -e "s/\/*$//" `
sed -i "s,OPENSHIFT_SERVER,$openshift_server,g" "$APP_DIR/data/config.xml"
unzip -q /usr/lib/jenkins/jenkins.war -d "$APP_DIR/data/war/"
admin_password_hash=`java -classpath "${APP_DIR}/data/war/WEB-INF/lib/acegi-security-1.0.5.jar:${APP_DIR}/data/war/WEB-INF/lib/commons-codec-1.4.jar:${CART_DIR}/jenkins-1.4/info/lib/password-encoder.jar" com.redhat.openshift.PasswordEncoder $admin_password`
sed -i "s,PASSWORD,$admin_password_hash,g" "$APP_DIR/data/users/admin/config.xml"
system_builder_password_hash=`java -classpath "${APP_DIR}/data/war/WEB-INF/lib/acegi-security-1.0.5.jar:${APP_DIR}/data/war/WEB-INF/lib/commons-codec-1.4.jar:${CART_DIR}/jenkins-1.4/info/lib/password-encoder.jar" com.redhat.openshift.PasswordEncoder $system_builder_password`
sed -i "s,PASSWORD,$system_builder_password_hash,g" "$APP_DIR/data/users/system_builder/config.xml"

echo $system_builder_password > $APP_HOME/.jenkins_password

create_repo $application $user_id $group_id $uuid

#
# Find an open localhost IP
#
IP=`find_open_ip $uid $uuid`

create_app_ctl_script

populate_repo_dir "repo"

secure_app_dir

chcon_app_dir_and_git

#
# Create environment variables
#
create_standard_env_vars
create_standard_network_env_vars
create_standard_redo_dir_env_var
create_standard_path_env_var
echo "export OPENSHIFT_APP_TYPE='jenkins-1.4'" > $APP_HOME/.env/OPENSHIFT_APP_TYPE

#
# Import new values so they can be used:
#
for f in $APP_HOME/.env/*
do
    . $f
done

#
# Start the server
#
start_app

#
# Create virtualhost definition for apache
#
export CART_INFO_DIR
$CART_INFO_DIR/bin/deploy_httpd_proxy.sh $application $namespace $uuid $IP

restart_httpd_graceful

echo "CLIENT_RESULT: "
echo "CLIENT_RESULT: Jenkins created successfully.  Please make note of these credentials:"
echo "CLIENT_RESULT: "
echo "CLIENT_RESULT:    User: admin"
echo "CLIENT_RESULT:    Password: $admin_password"
echo "CLIENT_RESULT: "
echo "CLIENT_RESULT: Note:  You can change your password at: http://${application}-${namespace}.${libra_domain}/me/configure"
echo "CLIENT_RESULT: "

echo "ENV_VAR_ADD: JENKINS_URL=http://${application}-${namespace}.${libra_domain}/"
echo "ENV_VAR_ADD: JENKINS_USERNAME=system_builder"
echo "ENV_VAR_ADD: JENKINS_PASSWORD=$system_builder_password"
