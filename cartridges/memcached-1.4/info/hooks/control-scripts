#!/bin/bash

source "/etc/stickshift/stickshift-node.conf"

# Control application's embedded Memcached server instance
CART_NAME=memcached
CART_VERSION=1.4
CART_DIRNAME=${CART_NAME}-$CART_VERSION
CART_DIR=${CARTRIDGE_BASE_PATH}


# Exit on any errors
set -e


function print_help() {
    cmd=$(basename "$0")
    echo "Usage: $0 app-name namespace uuid"
    echo "$cmd embedded Memcached service"

    echo "$0 $@" | logger -p local0.notice -t stickshift_memcached_$cmd
    exit 1

}  #  End of function  print_help.


function _control_memcached_service() {
   [ $# -lt 1 ]  &&  return 1
   super_run_as_user "$CTL_SCRIPT $1"

}  #  End of function  _control_memcached_service.


function _start_memcached_service() {
   rm -f "$CART_INSTANCE_DIR/run/stop_lock"
   _control_memcached_service "start"

}  #  End of function  _start_memcached_service.


function _stop_memcached_service() {
   _control_memcached_service "stop"
   touch "$CART_INSTANCE_DIR/run/stop_lock"

}  #  End of function  _stop_memcached_service.


function _restart_memcached_service() {
   rm -f "$CART_INSTANCE_DIR/run/stop_lock"
   _control_memcached_service "restart"

}  #  End of function  _restart_memcached_service.


function _reload_memcached_service() {
   :  #  Do nothing.
}  #  End of function  _reload_memcached_service.


function _move_memcached_service() {
   source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/apache
   source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/apache
   source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/network

MEMCACHED_DIR="$APP_HOME/memcached-1.4/"

observe_setup_var_lib_dir "$MEMCACHED_DIR"

. $APP_HOME/.env/OPENSHIFT_INTERNAL_IP
IP=$OPENSHIFT_INTERNAL_IP

. $APP_HOME/.env/OPENSHIFT_CACHE_PORT
. $APP_HOME/.env/OPENSHIFT_CACHE_HOST

ORIG_CACHE_HOST=$OPENSHIFT_CACHE_HOST

if [ "$ORIG_CACHE_HOST" != "$IP" ]
then
    echo "export OPENSHIFT_CACHE_URL='memcached://$IP:$OPENSHIFT_CACHE_PORT/'" > $APP_HOME/.env/OPENSHIFT_CACHE_URL
    echo "export OPENSHIFT_CACHE_HOST='$IP'" > $APP_HOME/.env/OPENSHIFT_CACHE_HOST

    set_app_info "Connection URL: memcached://$IP:$OPENSHIFT_CACHE_PORT/"
fi

}  #  End of function  _move_memcached_service.

function _pre_move_memcached_service() {
   source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/apache
   source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/network

}  #  End of function  _pre_move_memcached_service.

function _post_move_memcached_service() {
   source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/apache
   source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/network

}  #  End of function  _post_move_memcached_service.

function _status_memcached_service() {
    if output=$(runuser --shell /bin/sh "$uuid" "$CTL_SCRIPT" status 2>&1)
    then
        status_client_result "$output"
    else
        client_result "Memcached is either stopped or inaccessible"
    fi
}  #  End of function  _status_memcached_service.



#
# main():
#
source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/util

# Parse and ensure arguments.
while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x ;;
        ?) print_help ;;
    esac
done

[ $# -eq 3 ] || print_help
setup_basic_hook "$1" $2 $3

# Setup instance directory and control script name.
CART_INSTANCE_DIR="$APP_HOME/$CART_DIRNAME"
CTL_SCRIPT="$CART_INSTANCE_DIR/${application}_${CART_NAME}_ctl.sh"

cmd=$(basename "$0")
case "$cmd" in
   status)    _status_memcached_service    ;;
   start)     _start_memcached_service     ;;
   stop)      _stop_memcached_service      ;;
   restart)   _restart_memcached_service   ;;
   reload)    _reload_memcached_service    ;;
   move)      _move_memcached_service      ;;
   pre-move)  _pre_move_memcached_service  ;;
   post-move) _post_move_memcached_service ;;
esac

