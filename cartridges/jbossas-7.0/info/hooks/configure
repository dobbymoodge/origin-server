#!/bin/bash

# Copyright © 2010 Mike McGrath All rights reserved
# Copyright © 2011 Scott Stark All rights reserved
# Copyright © 2011 Red Hat, Inc. All rights reserved

# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.

# Creates a per customer jboss-as7 instance

# Exit on any errors
set -e
set -x

# Load the jboss_version and jboss_home settings
. `dirname $0`/jboss.version

echo "Running ${jboss_version} configure script "

if [ -f '/etc/libra/node.conf' ]
then
    . /etc/libra/node.conf
elif [ -f 'node.conf' ]
then
    . node.conf
else
    echo "node.conf not found.  Cannot continue" 1>&2
    exit 3
fi

if [ -f '/etc/libra/node_data.conf' ]
then
    . /etc/libra/node_data.conf
elif [ -f 'node_data.conf' ]
then
    . node_data.conf
else
    echo "node_data.conf not found.  Cannot continue" 1>&2
    exit 3
fi

apache_bandwidth="all 100000"
apache_maxconnection="all 20"
apache_bandwidtherror="510"

if [ -f '/etc/libra/resource_limits.conf' ]
then
    . /etc/libra/resource_limits.conf
fi

function print_help {
    echo "Usage: $0 app-name namespace uuid"

    echo "$0 $@" | logger -p local0.notice -t libra_jboss_create
    exit 1
}

[ $# -eq 3 ] || print_help

namespace=`basename $2`
application="$1"
uuid=$3

APP_HOME="$libra_dir/$uuid/"
# The location of the application jboss setup
APP_DIR="$APP_HOME/$application"
[ -d "$APP_DIR" ] && error "${application}.  Please destroy then recreate, or pick a new name" 132

# Redirect the configure script output for debugging
TMP_DIR="$APP_DIR"/${jboss_version}/standalone/tmp
mkdir -p ${TMP_DIR}
logfile=${TMP_DIR}/jbossas7-configure-$$.log
exec > $logfile 2>&1

function error {
    echo "$1" 1>&2
    exit "$2"
}

function find_open_ip {
    uid=$1
    uuid=$2
    for host_ip in `seq 1 127`
    do
        a=$(($uid*128+2130706432 + $host_ip))
        new_ip=$(($a>>24 )).$(($(($a%16777216))<<8>>24)).$(($(($a%65536))<<16>>24)).$(($(($a%256))<<24>>24))
        if ! grep -qe '^Listen '$new_ip':8080$' $(find /var/lib/libra/$uuid/ -maxdepth 4 -mindepth 4 -name libra.conf) /etc/sysconfig/network
        then
            echo $new_ip
            exit
        fi
    done

    echo "Could not find open IP" 1>&2
    exit 5
}

function unobfuscate {
    # Check if unobfuscate is set in /etc/libra/node.conf
    # If it is set, symlink /var/lib/libra/uuid to /var/lib/libra/appname-namespace
    # This will allow easier debugging.

    uuid=$1
    namespace=$2
    appname=$3

    if [ $unobfuscate -eq 1 ]
    then
        if [ ! -f "${libra_dir}/$appname-$namespace" ] && [ ! -d "${libra_dir}/$appname-$namespace" ]
        then
            /bin/ln -sf "${libra_dir}/${uuid}" "${libra_dir}/${appname}-${namespace}"
        fi
    fi
}

function create_repo {
    application="$1"
    user_id=$2
    group_id=$3
    c_val=$4
    APP_HOME="${libra_dir}/${uuid}"

    if [ ! -d $APP_HOME ]; then echo "ERROR: Application ${uuid} not found!  Please create." 1>&2; exit 2; fi

    GIT_DIR=$APP_HOME/git/$application.git
    mkdir -p "$APP_HOME/git"
    git clone --bare /usr/libexec/li/cartridges/${jboss_version}/info/data/git_template.git $GIT_DIR

    # Repacking is needed to handle a bug with running multiple
    # git clone operations under concurrency.  The cloned repos
    # can end up in a corrupt state which repack will correct
    pushd $GIT_DIR
    git repack
    popd

    echo "jbossas 7.0 application '$application'" > $GIT_DIR/description
    
    cat <<__EOF__ > $GIT_DIR/hooks/pre-receive
# Stop the app
echo "Stopping application..."
$APP_DIR/${application}_ctl.sh stop
__EOF__

    cat <<__EOF__ > $GIT_DIR/hooks/post-receive
rm -rf $APP_DIR/repo/* $APP_DIR/repo/.[^.]*
git archive --format=tar HEAD | (cd $APP_DIR/repo && tar --warning=no-timestamp -xf -)

# Start the app
echo "Starting application..."
$APP_DIR/${application}_ctl.sh start
__EOF__

    chmod 0755 $GIT_DIR/hooks/post-receive $GIT_DIR/hooks/pre-receive
    chown $user_id.$group_id -R $GIT_DIR
    # Secure the hooks dir
    chown root.root -R $GIT_DIR/hooks
}

while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done

unobfuscate $uuid $namespace $application

#
# Get user id info
# Not caching this information caused some early chowns to work but some later
# chowns to fail with a user not found error

user_id=$(id -u "$uuid") || error "Could not find user $uuid ($namespace)" 134
group_id=$(id -g "$uuid") || error "Could not find user $uuid ($namespace)" 135

#
# Create git app repo
#
uid=$(id -u "$uuid")
c_val="c$(($uid/1023)),c$(($uid%1023))"
# Repo
create_repo $application $user_id $group_id $c_val

#
# Find an open localhost IP
#

IP=$(find_open_ip $uid $uuid)

#
# Create jbossas7 base for application, every app gets its own jboss instance
#

mkdir -p "$APP_DIR"
pushd "$APP_DIR" > /dev/null
mkdir -p repo run ${jboss_version}/{bin,standalone/configuration}
JBOSS_BIN_DIR="$APP_DIR"/${jboss_version}/bin

cd ${jboss_version}
# Create a link to the jboss server modules jar and modules directory
ln -s ${jboss_home}/jboss-modules.jar
ln -s ${jboss_home}/modules

# Copy the jbossas server install standalone configuration files
cp ${jboss_home}/standalone/configuration/{standalone.xml,logging.properties} "$APP_DIR"/${jboss_version}/standalone/configuration
# Look for cartridge overrides of the configuration/{standalone.xml,logging.properties}
if [ -f /usr/libexec/li/cartridges/${jboss_version}/info/configuration/standalone.xml ]
then
    cp /usr/libexec/li/cartridges/${jboss_version}/info/configuration/standalone.xml "$APP_DIR"/${jboss_version}/standalone/configuration
fi
if [ -f /usr/libexec/li/cartridges/${jboss_version}/info/configuration/logging.properties ]
then
    cp /usr/libexec/li/cartridges/${jboss_version}/info/configuration/logging.properties "$APP_DIR"/${jboss_version}/standalone/configuration
fi
ls -l "$APP_DIR"/${jboss_version}/standalone/configuration

# Get the standalone.sh script
cp ${jboss_home}/bin/standalone.sh "$APP_DIR"/${jboss_version}/bin
# Update the standalone.xml for the application IP
sed 's/loopback-address value="127.*"/loopback-address value="'$IP'"/g' "$APP_DIR"/${jboss_version}/standalone/configuration/standalone.xml >${TMP_DIR}/standalone.xml
cp ${TMP_DIR}/standalone.xml "$APP_DIR"/${jboss_version}/standalone/configuration
popd > /dev/null

# Build the standalone.conf file
echo "Creating standalone.conf..."
cat <<EOF > "$APP_DIR"/${jboss_version}/bin/standalone.conf
# This uses the sun jdk install since the current open-jdk version has a bug
# Once this has been upgrade to something based on 1.6.0_20 or higher,
# such as java-1.6.0-openjdk-1.6.0.0-1.39.1.9.7.el6, require the sun jdk.
JAVA_HOME="/usr/lib/jvm/jre-1.6.0"
#
# Specify options to pass to the Java VM.
#
if [ "x\$JAVA_OPTS" = "x" ]; then
   JAVA_OPTS="-Xmx56m -XX:MaxPermSize=56m -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000"
fi
EOF


#
# Populate repo dir
#
GIT_DIR="$GIT_DIR" git archive --format=tar HEAD | (cd "${APP_DIR}/repo" && tar --warning=no-timestamp -xf -)

# Create a link from the repo/deployments directory to the standalone/deployments content
ln -s "$APP_DIR"/repo/deployments "$APP_DIR"/${jboss_version}/standalone
ls -l "$APP_DIR"/${jboss_version}/standalone/deployments
# Copy the samples into the ROOT.war
cp -pr /usr/libexec/li/cartridges/${jboss_version}/info/data/samples "$APP_DIR"/${jboss_version}/standalone/deployments/ROOT.war

# Create a link from the standalone/log directory to ${APP_DIR}/logs for rhc-tail-files
ln -s "$APP_DIR"/${jboss_version}/standalone/log "$APP_DIR"/logs

#
# Create simple application start / stop script
#
echo "Creating ${application}_ctl.sh..."
cat <<__EOF__ > "$APP_DIR/${application}_ctl.sh"
#/bin/bash

# For debugging, capture script output into app tmp dir
pid=\$\$
exec 4>&1   # Link file descriptor #4 with stdout, saves stdout.
exec > "$TMP_DIR/jbossas7-${application}_ctl-\$1.\${pid}.log" 2>&1

if ! [ \$# -eq 1 ]
then
    echo "Usage: \$0 [start|restart|graceful|graceful-stop|stop]"
    exit 1
fi

if whoami | grep -q root || ! runcon | grep 'system_r:libra_t:s0:$c_val' > /dev/null
then
    echo 1>&2
    echo "Please run script in the correct context, try:" 1>&2
    echo "runuser --shell /bin/sh \"$uuid\" -c \"runcon -t libra_t -l s0:$c_val $APP_DIR/${application}_ctl.sh\"" 1>&2
    echo 2>&1
    exit 15
fi

killtree() {
    local _pid=\$1
    local _sig=\${2-TERM}
    for _child in \$(ps -o pid --no-headers --ppid \${_pid}); do
        killtree \${_child} \${_sig}
    done
    echo kill -\${_sig} \${_pid}
    kill -\${_sig} \${_pid}
}

JBOSS_PID_FILE="$APP_DIR/run/jboss.pid"

case "\$1" in
    start)
        if [ -f $APP_DIR/run/stop_lock ]
        then
            echo -n " - Application is disabled"
            exit 0
        else
            $JBOSS_BIN_DIR/standalone.sh 1>&2 >${TMP_DIR}/${application}.log &
            PROCESS_ID=\$!
            echo \$PROCESS_ID > \$JBOSS_PID_FILE
        fi
    ;;
    graceful-stop|stop)
        echo "JBOSS PID FILE:" \$JBOSS_PID_FILE
        if [ -f "\$JBOSS_PID_FILE" ]; then
          pid=\$(cat \$JBOSS_PID_FILE);
          echo "Sending SIGTERM to jboss:\$pid ...";
          killtree \$pid
        else
          echo "Failed to locate JBOSS PID File"
        fi
    ;;
    restart|graceful)
        $APP_DIR/${application}_ctl.sh stop
        $APP_DIR/${application}_ctl.sh start
    ;;
    status)
        echo tailing "$APP_DIR/${jboss_version}/standalone/log/server.log"
        # Restore stdout and close file descriptor #4
        exec 1>&4 4>&-
        echo "------ Tail of ${application} application server.log ------"
        tail "$APP_DIR/${jboss_version}/standalone/log/server.log"
        exit 0
    ;;
esac

__EOF__


chmod +x "$APP_DIR/${application}_ctl.sh" || error "Failed to chmod new application scripts" 122
chown $user_id.$group_id -R $APP_DIR || error "Failed to chown new application space.  Please contact support" 123
# Secure script and config dirs.
chown root.root -R "$APP_DIR/${application}_ctl.sh"
chown $user_id.$group_id -R "$APP_DIR/${jboss_version}/standalone"
chcon -t libra_var_lib_t -l s0:$c_val -R "$APP_DIR"
cd $APP_DIR
# Check if the incoming context is correct. Useful for running script directly for testing.
runuser --shell /bin/sh "$uuid" -c "runcon -t libra_t -l s0:$c_val $APP_DIR/${application}_ctl.sh start" || error "Failed to start ${application}" 121

#
# Create virtualhost definition for apache
#
# node_ssl_template.conf gets copied in unaltered and should contain
# all of the configuration bits required for ssl to work including key location
#

cat <<EOF > "/etc/httpd/conf.d/libra/${uuid}_${namespace}_${application}.conf"
<VirtualHost *:80>
  ServerName ${application}-${namespace}.${libra_domain}
  ServerAdmin mmcgrath@redhat.com
  DocumentRoot /var/www/html

  ProxyPass / http://$IP:8080/
  ProxyPassReverse / http://$IP:8080/
</VirtualHost>

<VirtualHost *:443>
  ServerName ${application}-${namespace}.${libra_domain}
  ServerAdmin mmcgrath@redhat.com

$(/bin/cat /usr/libexec/li/cartridges/${jboss_version}/info/configuration/node_ssl_template.conf)

  ProxyPass / http://$IP:8080/
  ProxyPassReverse / http://$IP:8080/
</VirtualHost>
EOF

/sbin/service httpd configtest 2> /dev/null && /sbin/service httpd graceful || error "Failed to restart master httpd, please contact support" 120


