#!/bin/bash

# Copyright © 2010 Mike McGrath All rights reserved
# Copyright © 2011 Scott Stark All rights reserved
# Copyright © 2011 Red Hat, Inc. All rights reserved

# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.

# Creates a per customer jboss-as7 instance
# Variables used in this script:
: << --COMMENT--
# jboss.version
jboss_home = the location where the jbossas server is installed
jboss_version = the name/type of the jbossas cartridge, e.g., jbossas-7.0
# /etc/libra/node.conf
unobfuscate = Enable user-unobfuscate to create ~/appname-namespace in addition to ~/uuid
libra_dir=Users home dirs (where customer data ends up)
# Script arguments
namespace=basename $2
application=$1
uuid=$3
# Script local
JBOSS_CARTRIDGE_ROOT=/usr/libexec/li/cartridges/${jboss_version}
APP_HOME = ${libra_dir}/${uuid} # the root directory for application contents
APP_DIR = $APP_HOME/$application # The location of the application jboss setup
GIT_DIR = $APP_HOME/git/$application.git
M2_DIR = $APP_HOME/.m2 # maven dir
APP_JBOSS = $APP_DIR/${jboss_version} # the application jbossas root
APP_JBOSS_BIN_DIR = $APP_DIR/${jboss_version}/bin
APP_JBOSS_TMP_DIR = $APP_DIR/${jboss_version}/standalone/tmp # application jbossas tmp dir
--COMMENT--

# Exit on any errors
set -e

# Load the jboss_version and jboss_home settings
. `dirname $0`/jboss.version

CART_DIR=/usr/libexec/li/cartridges
JBOSS_CARTRIDGE_ROOT=$CART_DIR/${jboss_version}

if [ -f '/etc/libra/node.conf' ]
then
    . /etc/libra/node.conf
elif [ -f 'node.conf' ]
then
    . node.conf
else
    echo "node.conf not found.  Cannot continue" 1>&2
    exit 3
fi

if [ -f '/etc/libra/node_data.conf' ]
then
    . /etc/libra/node_data.conf
elif [ -f 'node_data.conf' ]
then
    . node_data.conf
else
    echo "node_data.conf not found.  Cannot continue" 1>&2
    exit 3
fi

apache_bandwidth="all 100000"
apache_maxconnection="all 20"
apache_bandwidtherror="510"

if [ -f '/etc/libra/resource_limits.conf' ]
then
    . /etc/libra/resource_limits.conf
fi

function print_help {
    echo "Usage: $0 app-name namespace uuid"

    echo "$0 $@" | logger -p local0.notice -t libra_jboss_configure
    exit 1
}

[ $# -eq 3 ] || print_help

namespace=`basename $2`
application="$1"
uuid=$3

APP_HOME="$libra_dir/$uuid/"
# The location of the application jboss setup
APP_DIR=`echo $APP_HOME/$application | tr -s /`
[ -d "$APP_DIR" ] && error "${application}.  Please destroy then recreate, or pick a new name" 132
# The root of the application jbossas contents
APP_JBOSS="$APP_DIR"/${jboss_version}
# Maven dir
M2_DIR=`echo $APP_HOME/.m2 | tr -s /`
mkdir -p $M2_DIR

# Redirect the configure script output for debugging
APP_JBOSS_TMP_DIR="$APP_JBOSS"/standalone/tmp
mkdir -p ${APP_JBOSS_TMP_DIR}
logfile=${APP_JBOSS_TMP_DIR}/jbossas7-configure-$$.log
exec > $logfile 2>&1

# Report an error msg $1 and exit with code $2
function error {
    echo "$1" 1>&2
    exit "$2"
}

# create an IP address as an 32 bit unsigned integer
function address() {
    # uid=$1
    # final=$2
    printf "0x%08x\n" "$((0x7f000000 + $(($1<<7)) + $2))"
}

# convert an integer IP address to dotted quad format
function dotted_quad() {
    # ADDR=$1
    q3=$(($1 >> 24))
    q2=$(($1 >> 16 & 0xff))
    q1=$(($1 >> 8 & 0xff))
    q0=$(($1 & 0xff))
    echo "$q3.$q2.$q1.$q0"
}

function find_open_ip {
    uid=$1
    uuid=$2
    for host_ip in `seq 1 127`
    do
        a=`address $uid $host_ip`
        new_ip=`dotted_quad $a`
        if ! /usr/sbin/lsof -a -i -n -u $uuid | /bin/grep -q "$new_ip"
        then
            echo $new_ip
            exit
        fi
    done

    echo "Could not find open IP" 1>&2
    exit 5
}

function unobfuscate {
    # Check if unobfuscate is set in /etc/libra/node.conf
    # If it is set, symlink /var/lib/libra/uuid to /var/lib/libra/appname-namespace
    # This will allow easier debugging.

    uuid=$1
    namespace=$2
    appname=$3

    if [ $unobfuscate -eq 1 ]
    then
        if [ ! -f "${libra_dir}/$appname-$namespace" ] && [ ! -d "${libra_dir}/$appname-$namespace" ]
        then
            /bin/ln -sf "${libra_dir}/${uuid}" "${libra_dir}/${appname}-${namespace}"
        fi
    fi
}

function create_repo {
    application="$1"
    user_id=$2
    group_id=$3
    c_val=$4

    if [ ! -d $APP_HOME ]; then echo "ERROR: Application ${uuid} not found!  Please create." 1>&2; exit 2; fi

    GIT_DIR=$APP_HOME/git/$application.git
    mkdir -p "$APP_HOME/git"
    
    cp -ad /usr/libexec/li/cartridges/${jboss_version}/template $APP_HOME/git
    
    pushd $APP_HOME/git/template
    sed -i "s/{APP_NAME}/$application/g" pom.xml
    mkdir -p .openshift/config
    cp "$APP_JBOSS"/standalone/configuration/standalone.xml .openshift/config
    chmod -R 0644 .openshift/config
    cat <<__EOF__ > .gitignore
target
__EOF__
    git init
    git add .openshift .gitignore *
    git commit -m 'Creating template'
    popd
    pushd $APP_HOME/git
    git clone --bare --no-hardlinks template $application.git
    rm -rf template
    popd

    echo "jbossas 7.0 application '$application'" > $GIT_DIR/description

    cat <<__EOF__ > $GIT_DIR/hooks/pre-receive
#!/bin/bash

# Import Environment Variables
for f in ~/.env/*
do
    . \$f
done

pre_receive_app.sh
__EOF__

    cat <<__EOF__ > $GIT_DIR/hooks/post-receive
#!/bin/bash

# Import Environment Variables
for f in ~/.env/*
do
    . \$f
done

post_receive_app.sh ${libra_server}
__EOF__

    chmod 0755 $GIT_DIR/hooks/post-receive $GIT_DIR/hooks/pre-receive
    chown $user_id.$group_id -R $GIT_DIR
    # Secure the hooks dir
    chown root.root -R $GIT_DIR/hooks
}

while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done

unobfuscate $uuid $namespace $application

#
# Get user id info
# Not caching this information caused some early chowns to work but some later
# chowns to fail with a user not found error

user_id=$(id -u "$uuid") || error "Could not find user $uuid ($namespace)" 134
group_id=$(id -g "$uuid") || error "Could not find user $uuid ($namespace)" 135

#
# Create git app repo
#
uid=$(id -u "$uuid")
c_val="c$(($uid/1023)),c$(($uid%1023))"

#
# Find an open localhost IP
#

IP=$(find_open_ip $uid $uuid)

#
# Create jbossas7 base for application, every app gets its own jboss instance
#

mkdir -p "$APP_DIR"
pushd "$APP_DIR" > /dev/null
mkdir -p repo run tmp data ${jboss_version}/{bin,standalone/configuration}
# application jbossas bin directory
APP_JBOSS_BIN_DIR="$APP_JBOSS"/bin

cd ${jboss_version}
# Create a link to the jboss server modules jar and modules directory
ln -s ${jboss_home}/jboss-modules.jar
ln -s ${jboss_home}/modules

# Copy the jbossas server install standalone configuration files
cp ${jboss_home}/standalone/configuration/{standalone.xml,logging.properties} "$APP_JBOSS"/standalone/configuration
# Look for cartridge overrides of the configuration/{standalone.xml,logging.properties}
if [ -f ${JBOSS_CARTRIDGE_ROOT}/info/configuration/standalone.xml ]
then
    cp ${JBOSS_CARTRIDGE_ROOT}/info/configuration/standalone.xml "$APP_JBOSS"/standalone/configuration
fi
if [ -f ${JBOSS_CARTRIDGE_ROOT}/info/configuration/logging.properties ]
then
    cp ${JBOSS_CARTRIDGE_ROOT}/info/configuration/logging.properties "$APP_JBOSS"/standalone/configuration
fi
ls -l "$APP_JBOSS"/standalone/configuration

# Get the standalone.sh script
if [ -f ${JBOSS_CARTRIDGE_ROOT}/info/bin/standalone.sh ]
then
    cp ${JBOSS_CARTRIDGE_ROOT}/info/bin/standalone.sh "$APP_JBOSS_BIN_DIR"
else
    cp ${jboss_home}/bin/standalone.sh "$APP_JBOSS_BIN_DIR"
fi
# Update the standalone.xml for the application IP
sed -i "s/{ip}/$IP/g" "$APP_JBOSS"/standalone/configuration/standalone.xml
sed -i "s/{app_name}/$application/g" "$APP_JBOSS"/standalone/configuration/standalone.xml
popd > /dev/null

# Repo
create_repo $application $user_id $group_id $c_val

# Build the standalone.conf file
echo "Creating standalone.conf..."
cat <<EOF > "$APP_JBOSS"/bin/standalone.conf
# This uses the sun jdk install since the current open-jdk version has a bug
# Once this has been upgrade to something based on 1.6.0_20 or higher,
# such as java-1.6.0-openjdk-1.6.0.0-1.39.1.9.7.el6, require the sun jdk.
JAVA_HOME="/usr/lib/jvm/jre-1.6.0"
#
# Specify options to pass to the Java VM.
#
if [ "x\$JAVA_OPTS" = "x" ]; then
   JAVA_OPTS="-Xmx95m -XX:MaxPermSize=85m -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000"
fi

# Add the user module path ahead of the server modules root
export MODULEPATH="$APP_JBOSS"/standalone/configuration/modules:"$APP_JBOSS"/modules
EOF

# Create a link from the repo/deployments directory to the standalone/deployments content
mkdir -p "$APP_DIR"/repo/deployments
ln -s "$APP_DIR"/repo/deployments "$APP_JBOSS"/standalone

# Create a link from the standalone/log directory to ${APP_DIR}/logs for rhc-tail-files
ln -s ${jboss_version}/standalone/log "$APP_DIR"/logs

#
# Create simple application start / stop script
#
echo "Creating ${application}_ctl.sh..."
cat <<__EOF__ > "$APP_DIR/${application}_ctl.sh"
#!/bin/bash -e
# Import Environment Variables
for f in ~/.env/*
do
    . \$f
done

app_ctl.sh \$1
__EOF__

#
# Populate repo
#
GIT_DIR="$GIT_DIR" git archive --format=tar HEAD | (cd "${APP_DIR}/repo" && tar --warning=no-timestamp -xf -)
cp ${JBOSS_CARTRIDGE_ROOT}/info/data/ROOT.war $APP_DIR/repo/deployments
pushd $M2_DIR
tar -xf ${JBOSS_CARTRIDGE_ROOT}/info/data/m2_repository.tar.gz
popd

chmod +x "$APP_JBOSS_BIN_DIR/standalone.sh" || error "Failed to chmod new application scripts" 122
chmod +x "$APP_DIR/${application}_ctl.sh" || error "Failed to chmod new application scripts" 122
chown $user_id.$group_id -R $APP_DIR || error "Failed to chown new application space.  Please contact support" 123
# Secure script and config dirs.
chown root.root -R "$APP_DIR/${application}_ctl.sh"
chown $user_id.$group_id -R "$APP_DIR/${jboss_version}/standalone"
chown -R $user_id.$group_id $M2_DIR
chcon -t libra_var_lib_t -l s0:$c_val -R "$APP_HOME/git/" "$APP_DIR"

#
# Create environment variables
#
echo "export OPENSHIFT_APP_DIR='$APP_DIR/'" > $APP_HOME/.env/OPENSHIFT_APP_DIR
echo "export OPENSHIFT_REPO_DIR='$APP_DIR/repo/'" > $APP_HOME/.env/OPENSHIFT_REPO_DIR
echo "export OPENSHIFT_INTERNAL_IP='$IP'" > $APP_HOME/.env/OPENSHIFT_INTERNAL_IP
echo "export OPENSHIFT_INTERNAL_PORT='8080'" > $APP_HOME/.env/OPENSHIFT_INTERNAL_PORT
echo "export OPENSHIFT_LOG_DIR='$APP_DIR/logs/'" > $APP_HOME/.env/OPENSHIFT_LOG_DIR
echo "export OPENSHIFT_DATA_DIR='$APP_DIR/data/'" > $APP_HOME/.env/OPENSHIFT_DATA_DIR
echo "export OPENSHIFT_TMP_DIR='/tmp/'" > $APP_HOME/.env/OPENSHIFT_TMP_DIR
echo "export OPENSHIFT_RUN_DIR='$APP_DIR/run/'" > $APP_HOME/.env/OPENSHIFT_RUN_DIR
echo "export OPENSHIFT_APP_NAME='$application'" > $APP_HOME/.env/OPENSHIFT_APP_NAME
echo "export OPENSHIFT_APP_TYPE='${jboss_version}'" > $APP_HOME/.env/OPENSHIFT_APP_TYPE
echo "export OPENSHIFT_APP_CTL_SCRIPT='$APP_DIR/${application}_ctl.sh'" > $APP_HOME/.env/OPENSHIFT_APP_CTL_SCRIPT
echo "export OPENSHIFT_APP_DNS='${application}-${namespace}.${libra_domain}'" > $APP_HOME/.env/OPENSHIFT_APP_DNS
echo "export PATH=$JBOSS_CARTRIDGE_ROOT/info/bin/:$CART_DIR/abstract-httpd/info/bin/:$CART_DIR/li-controller/info/bin/:$PATH" > $APP_HOME/.env/PATH

#
# Start the server
#
cd $APP_DIR
runuser --shell /bin/sh "$uuid" -c "runcon -t libra_t -l s0:$c_val $APP_DIR/${application}_ctl.sh start" || error "Failed to start ${application}" 121
#GIT_DIR="$GIT_DIR" runuser --shell /bin/sh "$uuid" -c "runcon -t libra_t -l s0:$c_val $GIT_DIR/hooks/post-receive" || error "Failed to start ${application}" 121

#
# Create virtualhost definition for apache
#
# node_ssl_template.conf gets copied in unaltered and should contain
# all of the configuration bits required for ssl to work including key location
#

cat <<EOF > "/etc/httpd/conf.d/libra/${uuid}_${namespace}_${application}.conf"
<VirtualHost *:80>
  ServerName ${application}-${namespace}.${libra_domain}
  ServerAdmin mmcgrath@redhat.com
  DocumentRoot /var/www/html
  DefaultType None

  ProxyPass /swydws/ http://$IP:18001/swydws/
  ProxyPassReverse /swydws/ http://$IP:18001/swydws/
  ProxyPass / http://$IP:8080/
  ProxyPassReverse / http://$IP:8080/
</VirtualHost>

<VirtualHost *:443>
  ServerName ${application}-${namespace}.${libra_domain}
  ServerAdmin mmcgrath@redhat.com
  DefaultType None

$(/bin/cat ${JBOSS_CARTRIDGE_ROOT}/info/configuration/node_ssl_template.conf)

  ProxyPass /swydws/ http://$IP:18001/swydws/
  ProxyPassReverse /swydws/ http://$IP:18001/swydws/
  ProxyPass / http://$IP:8080/
  ProxyPassReverse / http://$IP:8080/
</VirtualHost>
EOF

/sbin/service httpd configtest 2> /dev/null && /sbin/service httpd graceful || error "Failed to restart master httpd, please contact support" 120


