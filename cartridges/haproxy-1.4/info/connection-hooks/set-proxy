#!/bin/bash

# Adds a gear to the haproxy configuration.

# Exit on any errors
set -e

CART_DIR=/usr/libexec/li/cartridges
source ${CART_DIR}/abstract/info/lib/util


function print_help {
    echo "Usage: $0 app-name namespace uuid"
    echo "Start a running application"

    echo "$0 $@" | logger -p local0.notice -t libra_haproxy_set_proxy
    exit 1
}

while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done


[ $# -gt 3 ] || print_help

# Import Environment Variables
for f in ~/.env/*; do
    source $f
done

declare -A curr_server_gears

haproxy_cfg=$OPENSHIFT_APP_DIR/conf/haproxy.cfg
# Remove the first 3 args and process all the remaining args of the form k=v.
# The values are the gear endpoints.
kvargs=$(echo "${@:4}" | tr -d "\n" )
for arg in $kvargs; do
    ep=$(echo "$arg" | cut -f 2 -d '=' | tr -d "'")
    #  Add gear to the proxy configuration if not already in there.
    #  Gear end-point is the form: $gear-dns-entry:$gear-port
    gear_name=$(echo "$ep" | cut -f 1 -d '.')
    curr_server_gears[$gear_name]="$ep"

    if ! grep "server gear-$gear_name" "$haproxy_cfg" 2>&1 > /dev/null; then
        echo "    server gear-$gear_name $ep check fall 2 rise 3 inter 2000" >> "$haproxy_cfg"
    fi
done

# Now remove all the gears from the haproxy configuration which are not in the
# current set. No recreate permissions on haproxy.cfg, so need to use a temp
# file to operate on and then overlay the contents of haproxy.cfg
srvgears=$(grep -E "server\s*gear" "$haproxy_cfg" |  \
           sed "s/\s*server\s*gear-\([A-Za-z0-9\-]*\).*/\\1/g" | tr "\n" " ")
cp "$haproxy_cfg" /tmp/haproxy.cfg
for sg in $srvgears; do
    if [ -z "${curr_server_gears[$sg]}" ]; then
        sed -i "/\s*server\s*gear-$sg.*/d" /tmp/haproxy.cfg
    fi
done

cat /tmp/haproxy.cfg > "$haproxy_cfg"
rm -f /tmp/haproxy.cfg

uuid=$3
setup_user_vars
run_as_user "app_ctl.sh reload"
