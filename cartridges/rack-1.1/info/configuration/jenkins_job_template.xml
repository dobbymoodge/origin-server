<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name></name>
        <refspec></refspec>
        <url>UPSTREAM_REPO_URL</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>**</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>false</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <gitConfigName></gitConfigName>
    <gitConfigEmail></gitConfigEmail>
    <skipTag>false</skipTag>
    <scmName></scmName>
  </scm>
  <assignedNode>rack-1.1</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector"/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
# Build/update libs
build.sh

# If a Gemfile is committed then bundle install
if [ -f Gemfile ]
then
  # If the previous and current commits didn't upload .bundle and you have .bundle and vendor/bundle already deployed then sync previous bundled gems
  # Also adding .openshift/markers/force_clean_build at the root of the repo will trigger a clean rebundle
  if ! git show master:.openshift/markers/force_clean_build > /dev/null 2>&amp;1 &amp;&amp; ! git show master:.bundle > /dev/null 2>&amp;1 &amp;&amp; ! git show master~1:.bundle > /dev/null 2>&amp;1
  then
    rsync -azv --include '.bundle/***' --include 'vendor/***' --exclude=* -e $GIT_SSH UPSTREAM_SSH:~/UPSTREAM_APP_NAME/deploy/ .
  fi

  echo 'Bundling RubyGems based on Gemfile/Gemfile.lock to vendor/bundle'
  bundle install --deployment
fi

alias rsync="rsync --delete-after -az -e '$GIT_SSH'"

# Deploy new build

# Stop app
$GIT_SSH UPSTREAM_SSH 'ctl_all stop'

# Push content back to application
rsync ~/$WORKSPACE/ UPSTREAM_SSH:~/UPSTREAM_APP_NAME/deploy/

# Configure / start app
$GIT_SSH UPSTREAM_SSH deploy.sh
$GIT_SSH UPSTREAM_SSH 'ctl_all start'
$GIT_SSH UPSTREAM_SSH post_deploy.sh
      </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>**</artifacts>
      <latestOnly>false</latestOnly>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers/>
</project>
