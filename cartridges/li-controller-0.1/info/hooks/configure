#!/bin/bash

# Copyright © 2010 Mike McGrath All rights reserved
# Copyright © 2010 Red Hat, Inc. All rights reserved

# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.

# Creates a libra user
#
# IN: username
#     email address
#     SSH RSA public key
#
# 1) create a local user account: username, home directory
# 2) enable login via SSH using RSA key: trap user
# 3) place Libra service information: $HOME/etc/customer_info
# 4) Place limits on user: number of processes

# 
#
# default values
#
DEFAULT_LIBRA_DIR=/var/lib/libra
DEFAULT_LIBRA_CONF_DIR=/etc/libra
DEFAULT_LIMITS_PRIORITY=85
DEFAULT_LIMITS_NPROC=50 # this should be updated from node.conf

# Exit on any errors
# set -e

#
#  provide usage information
#
function print_help {
    echo "Usage: $0"
    echo "  -c customer_id"
    echo "  -e email"
    echo "  -s ssh_pub_key"
    echo "  -d (optional: debug)"
    exit 1
}

function initialize {
    # import Libra node configuration
    if [ -f '/etc/libra/node.conf' ]
    then
	. /etc/libra/node.conf
    elif [ -f 'node.conf' ]
    then
	. node.conf
    else
	echo "node.conf not found.  Cannot continue" 1>&2
	exit 3
    fi

    if [ -z "$libra_dir" ]
    then
	libra_dir=$DEFAULT_LIBRA_DIR
    fi

    # Provide defaults for values left unset in node configuration
    if [ -z "$limits_priority" ]
    then
	limits_priority=$DEFAULT_LIMITS_PRIORITY
    fi

    if [ -z "$limits_nproc" ]
    then
	limits_nproc=$DEFAULT_LIMITS_NPROC
    fi
}

function parse_options {
    while getopts 'c:e:s:p:P:dnr' OPTION
    do
	case $OPTION in
            c) username=$OPTARG
		;;
            e) email=$OPTARG
		;;
            s) ssh_key=$OPTARG
		;;
            p) limits_nproc=$OPTARG
		;;
            P) limits_priority=$OPTARG
		;;
            d) set -x
		;;
	    n) NOOP='echo'
		;;
	    r) REVERT="TRUE"
		;;
            ?) print_help
		;;
	esac
    done

    if ( [ -z "$username" ] || [ -z "$email" ] || [ -z "$ssh_key" ] )
    then
	print_help
    fi
}

function homedir {
    USERNAME=$1
    USERHOME=`grep $USERNAME /etc/passwd | cut -d: -f6`

    if [ -n "${USERHOME}" ]
    then
        echo $USERHOME
    else
        # remove duplicate slashes (/) and return the result
	echo ${libra_dir}/${USERNAME} | tr -s '/'
    fi
}

# Find the next available UID/GID pair
function next_uid() {
  expr `cat /etc/passwd | cut -d: -f3 | sort -n | tail -1` + 1

  # Should check if the GID is free as well
}

#
# Create a local user account
#
# IN: username
# IN: homeroot


function create_user_account() {
    USERNAME=$1

    # Don't depend on useradd to select the next UID/GID pair
    NEXTUID=`next_uid`

    HOMEDIR=`homedir $USERNAME`

    # check if the user can be identified already
    id $USERNAME >/dev/null 2>&1
    USEREXISTS=$?

    if [ $USEREXISTS -ne 0 ]
    then
        ${NOOP} groupadd -g ${NEXTUID} ${USERNAME}

	${NOOP} useradd -g ${USERNAME} -u ${NEXTUID} -d ${HOMEDIR} -s /bin/bash -c "libra guest" $USERNAME
	if [ $? -ne 0 ]
        then
	    echo "ERROR: unable to create user account $USERNAME"
	    exit 1
        fi
    fi
}

function remove_user_account {
    USERNAME=$1

    ${NOOP} userdel -f -r ${USERNAME}
}

#
# Configure Libra application information
#
# IN: username
# IN: user home directory
# IN: email
function configure_user_account {
    USERNAME=$1
    EMAIL="$2"

    USERHOME=`homedir $USERNAME`
    USERETC=$USERHOME/etc

    ${NOOP} mkdir -p $USERETC
    if [ -z "${NOOP}" ]
    then
	${NOOP} cat <<EOF >${USERETC}/customer_info
CUSTOMER_ID=\"${USERNAME}\"
EMAIL=\"${EMAIL}\"
EOF
    else
        echo "cat <<EOF > ${USERETC}/customer_info
EOF"
    fi

    # Give the new user ownership
    ${NOOP} chown -R $USERNAME:$USERNAME $USERETC
}


#
# Enable SSH RSA access for a user
#
# ASSUME: local user with username exists
# IN: username
# IN: user home directory
# IN: user email address
# IN: SSH RSA key string
#
function enable_user_ssh_access {
    USERNAME=$1
    USEREMAIL="$2"
    SSHKEY="$3"
    
    USERHOME=`homedir $USERNAME`
    SSHDIR=${USERHOME}/.ssh

    ${NOOP} mkdir -p ${SSHDIR}
    ${NOOP} chmod 700 ${SSHDIR}
    if [ -z "${NOOP}" ]
    then
	cat <<EOF > ${SSHDIR}/authorized_keys
command="/usr/bin/trap-user",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa $SSHKEY Libra-$USERNAME-$USEREMAIL
EOF
    else
	echo "cat <<EOF > $SSHDIR/authorized_keys
command=\\\"/usr/bin/trap-user\\\",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa $SSHKEY Libra-$USERNAME-$USEREMAIL
EOF\""
    fi

    ${NOOP} chmod 600 ${SSHDIR}/authorized_keys

    # Give the new user ownership
    ${NOOP} chown -R ${USERNAME}:${USERNAME} ${SSHDIR}
    ${NOOP} restorecon -R ${SSHDIR}
}


#
# Add a PAM limit set to the user
#
# IN: username
# IN: limits_priority
# IN: limits_nproc
#
# TODO: check if file already exists
function limit_user_account {
    USERNAME=$1
    LIMITS_PRIORITY=${2:-$limits_priority}
    LIMITS_NPROC=${3:-$limits_nproc}

    LIMITSFILE=/etc/security/limits.d/${LIMITS_PRIORITY}-${USERNAME}.conf

    if [ -z "${NOOP}" ]
    then
	cat <<EOF > ${LIMITSFILE}
# PAM process limits for guest $customer_id
# see limits.conf(5) for details
#Each line describes a limit for a user in the form:
#
#<domain> <type> <item> <value>
${USERNAME} hard nproc ${LIMITS_NPROC}
EOF
    else
	echo "cat <<EOF > ${LIMITSFILE}
# PAM process limits for guest $customer_id
# see limits.conf(5) for details
#Each line describes a limit for a user in the form:
#
#<domain>        <type>  <item>  <value>
${USERNAME}     hard    nproc   ${LIMITS_NPROC}
EOF"
    fi
}

function remove_user_limits {
    USERNAME=$1
    LIMITS_PRIORITY=${2:-$limits_priority}

    LIMITSFILE=/etc/security/limits.d/${LIMITS_PRIORITY}-${USERNAME}.conf


    ${NOOP} rm -f ${LIMITSFILE}
}

# ============================================================================
#                                 MAIN
# ============================================================================

# get configuration values from libra configuration files or defaults
initialize

# provides values for username, email and ssh_key
parse_options $*

if [ -z "$REVERT" ]
then
    create_user_account $username

    if (service cgconfig status > /dev/null )
    then
	service libra-cgroups startuser ${username} > /dev/null
    fi

    configure_user_account $username $email

    enable_user_ssh_access $username $email "$ssh_key"

    limit_user_account $username

else
    if (service cgconfig status > /dev/null)
    then
	service libra-cgroups stopuser ${username} > /dev/null
    fi

    remove_user_limits $username
    
    remove_user_account $username
fi
